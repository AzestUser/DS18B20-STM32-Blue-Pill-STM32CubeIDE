
DS18B20_Pro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f2c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018e4  08007040  08007040  00017040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008924  08008924  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  08008924  08008924  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008924  08008924  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008924  08008924  00018924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008928  08008928  00018928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800892c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000580  200001ec  08008b18  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000076c  08008b18  0002076c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d65  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002916  00000000  00000000  00030f7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  00033890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e08  00000000  00000000  000347a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000195b4  00000000  00000000  000355b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011657  00000000  00000000  0004eb64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cb00  00000000  00000000  000601bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eccbb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005080  00000000  00000000  000ecd10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	08007024 	.word	0x08007024

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	08007024 	.word	0x08007024

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_frsub>:
 8000bf0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bf4:	e002      	b.n	8000bfc <__addsf3>
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_fsub>:
 8000bf8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bfc <__addsf3>:
 8000bfc:	0042      	lsls	r2, r0, #1
 8000bfe:	bf1f      	itttt	ne
 8000c00:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c04:	ea92 0f03 	teqne	r2, r3
 8000c08:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c0c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c10:	d06a      	beq.n	8000ce8 <__addsf3+0xec>
 8000c12:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c16:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c1a:	bfc1      	itttt	gt
 8000c1c:	18d2      	addgt	r2, r2, r3
 8000c1e:	4041      	eorgt	r1, r0
 8000c20:	4048      	eorgt	r0, r1
 8000c22:	4041      	eorgt	r1, r0
 8000c24:	bfb8      	it	lt
 8000c26:	425b      	neglt	r3, r3
 8000c28:	2b19      	cmp	r3, #25
 8000c2a:	bf88      	it	hi
 8000c2c:	4770      	bxhi	lr
 8000c2e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c3a:	bf18      	it	ne
 8000c3c:	4240      	negne	r0, r0
 8000c3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c42:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c46:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4249      	negne	r1, r1
 8000c4e:	ea92 0f03 	teq	r2, r3
 8000c52:	d03f      	beq.n	8000cd4 <__addsf3+0xd8>
 8000c54:	f1a2 0201 	sub.w	r2, r2, #1
 8000c58:	fa41 fc03 	asr.w	ip, r1, r3
 8000c5c:	eb10 000c 	adds.w	r0, r0, ip
 8000c60:	f1c3 0320 	rsb	r3, r3, #32
 8000c64:	fa01 f103 	lsl.w	r1, r1, r3
 8000c68:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6c:	d502      	bpl.n	8000c74 <__addsf3+0x78>
 8000c6e:	4249      	negs	r1, r1
 8000c70:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c74:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c78:	d313      	bcc.n	8000ca2 <__addsf3+0xa6>
 8000c7a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c7e:	d306      	bcc.n	8000c8e <__addsf3+0x92>
 8000c80:	0840      	lsrs	r0, r0, #1
 8000c82:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c86:	f102 0201 	add.w	r2, r2, #1
 8000c8a:	2afe      	cmp	r2, #254	; 0xfe
 8000c8c:	d251      	bcs.n	8000d32 <__addsf3+0x136>
 8000c8e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c96:	bf08      	it	eq
 8000c98:	f020 0001 	biceq.w	r0, r0, #1
 8000c9c:	ea40 0003 	orr.w	r0, r0, r3
 8000ca0:	4770      	bx	lr
 8000ca2:	0049      	lsls	r1, r1, #1
 8000ca4:	eb40 0000 	adc.w	r0, r0, r0
 8000ca8:	3a01      	subs	r2, #1
 8000caa:	bf28      	it	cs
 8000cac:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cb0:	d2ed      	bcs.n	8000c8e <__addsf3+0x92>
 8000cb2:	fab0 fc80 	clz	ip, r0
 8000cb6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cba:	ebb2 020c 	subs.w	r2, r2, ip
 8000cbe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cc2:	bfaa      	itet	ge
 8000cc4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cc8:	4252      	neglt	r2, r2
 8000cca:	4318      	orrge	r0, r3
 8000ccc:	bfbc      	itt	lt
 8000cce:	40d0      	lsrlt	r0, r2
 8000cd0:	4318      	orrlt	r0, r3
 8000cd2:	4770      	bx	lr
 8000cd4:	f092 0f00 	teq	r2, #0
 8000cd8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cdc:	bf06      	itte	eq
 8000cde:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ce2:	3201      	addeq	r2, #1
 8000ce4:	3b01      	subne	r3, #1
 8000ce6:	e7b5      	b.n	8000c54 <__addsf3+0x58>
 8000ce8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf0:	bf18      	it	ne
 8000cf2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf6:	d021      	beq.n	8000d3c <__addsf3+0x140>
 8000cf8:	ea92 0f03 	teq	r2, r3
 8000cfc:	d004      	beq.n	8000d08 <__addsf3+0x10c>
 8000cfe:	f092 0f00 	teq	r2, #0
 8000d02:	bf08      	it	eq
 8000d04:	4608      	moveq	r0, r1
 8000d06:	4770      	bx	lr
 8000d08:	ea90 0f01 	teq	r0, r1
 8000d0c:	bf1c      	itt	ne
 8000d0e:	2000      	movne	r0, #0
 8000d10:	4770      	bxne	lr
 8000d12:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d16:	d104      	bne.n	8000d22 <__addsf3+0x126>
 8000d18:	0040      	lsls	r0, r0, #1
 8000d1a:	bf28      	it	cs
 8000d1c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d20:	4770      	bx	lr
 8000d22:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d26:	bf3c      	itt	cc
 8000d28:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d2c:	4770      	bxcc	lr
 8000d2e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d32:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d3a:	4770      	bx	lr
 8000d3c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d40:	bf16      	itet	ne
 8000d42:	4608      	movne	r0, r1
 8000d44:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d48:	4601      	movne	r1, r0
 8000d4a:	0242      	lsls	r2, r0, #9
 8000d4c:	bf06      	itte	eq
 8000d4e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d52:	ea90 0f01 	teqeq	r0, r1
 8000d56:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d5a:	4770      	bx	lr

08000d5c <__aeabi_ui2f>:
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e004      	b.n	8000d6c <__aeabi_i2f+0x8>
 8000d62:	bf00      	nop

08000d64 <__aeabi_i2f>:
 8000d64:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d68:	bf48      	it	mi
 8000d6a:	4240      	negmi	r0, r0
 8000d6c:	ea5f 0c00 	movs.w	ip, r0
 8000d70:	bf08      	it	eq
 8000d72:	4770      	bxeq	lr
 8000d74:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d78:	4601      	mov	r1, r0
 8000d7a:	f04f 0000 	mov.w	r0, #0
 8000d7e:	e01c      	b.n	8000dba <__aeabi_l2f+0x2a>

08000d80 <__aeabi_ul2f>:
 8000d80:	ea50 0201 	orrs.w	r2, r0, r1
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	e00a      	b.n	8000da4 <__aeabi_l2f+0x14>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_l2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d9c:	d502      	bpl.n	8000da4 <__aeabi_l2f+0x14>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	ea5f 0c01 	movs.w	ip, r1
 8000da8:	bf02      	ittt	eq
 8000daa:	4684      	moveq	ip, r0
 8000dac:	4601      	moveq	r1, r0
 8000dae:	2000      	moveq	r0, #0
 8000db0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000db4:	bf08      	it	eq
 8000db6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dba:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dbe:	fabc f28c 	clz	r2, ip
 8000dc2:	3a08      	subs	r2, #8
 8000dc4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dc8:	db10      	blt.n	8000dec <__aeabi_l2f+0x5c>
 8000dca:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dce:	4463      	add	r3, ip
 8000dd0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ddc:	fa20 f202 	lsr.w	r2, r0, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	f020 0001 	biceq.w	r0, r0, #1
 8000dea:	4770      	bx	lr
 8000dec:	f102 0220 	add.w	r2, r2, #32
 8000df0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df4:	f1c2 0220 	rsb	r2, r2, #32
 8000df8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dfc:	fa21 f202 	lsr.w	r2, r1, r2
 8000e00:	eb43 0002 	adc.w	r0, r3, r2
 8000e04:	bf08      	it	eq
 8000e06:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0a:	4770      	bx	lr

08000e0c <DS18B20_StartAll>:

//
//	Start conversion on all sensors
//
void DS18B20_StartAll()
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
	OneWire_Reset(&OneWire); // Reset the bus
 8000e10:	4806      	ldr	r0, [pc, #24]	; (8000e2c <DS18B20_StartAll+0x20>)
 8000e12:	f000 fc2c 	bl	800166e <OneWire_Reset>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_SKIPROM); // Skip ROM command
 8000e16:	21cc      	movs	r1, #204	; 0xcc
 8000e18:	4804      	ldr	r0, [pc, #16]	; (8000e2c <DS18B20_StartAll+0x20>)
 8000e1a:	f000 fca5 	bl	8001768 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, DS18B20_CMD_CONVERTTEMP); // Start conversion on all sensors
 8000e1e:	2144      	movs	r1, #68	; 0x44
 8000e20:	4802      	ldr	r0, [pc, #8]	; (8000e2c <DS18B20_StartAll+0x20>)
 8000e22:	f000 fca1 	bl	8001768 <OneWire_WriteByte>
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000664 	.word	0x20000664

08000e30 <DS18B20_Read>:

//
//	Read one sensor
//
uint8_t DS18B20_Read(uint8_t number, float *destination)
{
 8000e30:	b590      	push	{r4, r7, lr}
 8000e32:	b087      	sub	sp, #28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	6039      	str	r1, [r7, #0]
 8000e3a:	71fb      	strb	r3, [r7, #7]
	if( number >= TempSensorCount) // If read sensor is not availible
 8000e3c:	4b4f      	ldr	r3, [pc, #316]	; (8000f7c <DS18B20_Read+0x14c>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	79fa      	ldrb	r2, [r7, #7]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d301      	bcc.n	8000e4a <DS18B20_Read+0x1a>
		return 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	e094      	b.n	8000f74 <DS18B20_Read+0x144>

	uint16_t temperature;
	uint8_t resolution;
	float result;
	uint8_t i = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	74fb      	strb	r3, [r7, #19]
	uint8_t crc;

#endif


	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address)) // Check if sensor is DS18B20 family
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	011b      	lsls	r3, r3, #4
 8000e52:	4a4b      	ldr	r2, [pc, #300]	; (8000f80 <DS18B20_Read+0x150>)
 8000e54:	4413      	add	r3, r2
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 f93e 	bl	80010d8 <DS18B20_Is>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d101      	bne.n	8000e66 <DS18B20_Read+0x36>
		return 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	e086      	b.n	8000f74 <DS18B20_Read+0x144>

	if (!OneWire_ReadBit(&OneWire)) // Check if the bus is released
 8000e66:	4847      	ldr	r0, [pc, #284]	; (8000f84 <DS18B20_Read+0x154>)
 8000e68:	f000 fc54 	bl	8001714 <OneWire_ReadBit>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d101      	bne.n	8000e76 <DS18B20_Read+0x46>
		return 0; // Busy bus - conversion is not finished
 8000e72:	2300      	movs	r3, #0
 8000e74:	e07e      	b.n	8000f74 <DS18B20_Read+0x144>

	OneWire_Reset(&OneWire); // Reset the bus
 8000e76:	4843      	ldr	r0, [pc, #268]	; (8000f84 <DS18B20_Read+0x154>)
 8000e78:	f000 fbf9 	bl	800166e <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	011b      	lsls	r3, r3, #4
 8000e80:	4a3f      	ldr	r2, [pc, #252]	; (8000f80 <DS18B20_Read+0x150>)
 8000e82:	4413      	add	r3, r2
 8000e84:	4619      	mov	r1, r3
 8000e86:	483f      	ldr	r0, [pc, #252]	; (8000f84 <DS18B20_Read+0x154>)
 8000e88:	f000 fda2 	bl	80019d0 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 8000e8c:	21be      	movs	r1, #190	; 0xbe
 8000e8e:	483d      	ldr	r0, [pc, #244]	; (8000f84 <DS18B20_Read+0x154>)
 8000e90:	f000 fc6a 	bl	8001768 <OneWire_WriteByte>

	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 8000e94:	2300      	movs	r3, #0
 8000e96:	74fb      	strb	r3, [r7, #19]
 8000e98:	e00d      	b.n	8000eb6 <DS18B20_Read+0x86>
		data[i] = OneWire_ReadByte(&OneWire);
 8000e9a:	7cfc      	ldrb	r4, [r7, #19]
 8000e9c:	4839      	ldr	r0, [pc, #228]	; (8000f84 <DS18B20_Read+0x154>)
 8000e9e:	f000 fc81 	bl	80017a4 <OneWire_ReadByte>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	f107 0318 	add.w	r3, r7, #24
 8000eaa:	4423      	add	r3, r4
 8000eac:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 8000eb0:	7cfb      	ldrb	r3, [r7, #19]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	74fb      	strb	r3, [r7, #19]
 8000eb6:	7cfb      	ldrb	r3, [r7, #19]
 8000eb8:	2b04      	cmp	r3, #4
 8000eba:	d9ee      	bls.n	8000e9a <DS18B20_Read+0x6a>
	crc = OneWire_CRC8(data, 8); // CRC calculation

	if (crc != data[8])
		return 0; // CRC invalid
#endif
	temperature = data[0] | (data[1] << 8); // Temperature is 16-bit length
 8000ebc:	7a3b      	ldrb	r3, [r7, #8]
 8000ebe:	b21a      	sxth	r2, r3
 8000ec0:	7a7b      	ldrb	r3, [r7, #9]
 8000ec2:	021b      	lsls	r3, r3, #8
 8000ec4:	b21b      	sxth	r3, r3
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	b21b      	sxth	r3, r3
 8000eca:	823b      	strh	r3, [r7, #16]

	OneWire_Reset(&OneWire); // Reset the bus
 8000ecc:	482d      	ldr	r0, [pc, #180]	; (8000f84 <DS18B20_Read+0x154>)
 8000ece:	f000 fbce 	bl	800166e <OneWire_Reset>

	resolution = ((data[4] & 0x60) >> 5) + 9; // Sensor's resolution from scratchpad's byte 4
 8000ed2:	7b3b      	ldrb	r3, [r7, #12]
 8000ed4:	115b      	asrs	r3, r3, #5
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	f003 0303 	and.w	r3, r3, #3
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	3309      	adds	r3, #9
 8000ee0:	73fb      	strb	r3, [r7, #15]

	switch (resolution) // Chceck the correct value dur to resolution
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	3b09      	subs	r3, #9
 8000ee6:	2b03      	cmp	r3, #3
 8000ee8:	d83e      	bhi.n	8000f68 <DS18B20_Read+0x138>
 8000eea:	a201      	add	r2, pc, #4	; (adr r2, 8000ef0 <DS18B20_Read+0xc0>)
 8000eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef0:	08000f01 	.word	0x08000f01
 8000ef4:	08000f1b 	.word	0x08000f1b
 8000ef8:	08000f35 	.word	0x08000f35
 8000efc:	08000f4f 	.word	0x08000f4f
	{
		case DS18B20_Resolution_9bits:
			result = temperature*(float)DS18B20_STEP_9BIT;
 8000f00:	8a3b      	ldrh	r3, [r7, #16]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff ff2e 	bl	8000d64 <__aeabi_i2f>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff f926 	bl	8000160 <__aeabi_fmul>
 8000f14:	4603      	mov	r3, r0
 8000f16:	617b      	str	r3, [r7, #20]
		break;
 8000f18:	e028      	b.n	8000f6c <DS18B20_Read+0x13c>
		case DS18B20_Resolution_10bits:
			result = temperature*(float)DS18B20_STEP_10BIT;
 8000f1a:	8a3b      	ldrh	r3, [r7, #16]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ff21 	bl	8000d64 <__aeabi_i2f>
 8000f22:	4603      	mov	r3, r0
 8000f24:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff f919 	bl	8000160 <__aeabi_fmul>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	617b      	str	r3, [r7, #20]
		 break;
 8000f32:	e01b      	b.n	8000f6c <DS18B20_Read+0x13c>
		case DS18B20_Resolution_11bits:
			result = temperature*(float)DS18B20_STEP_11BIT;
 8000f34:	8a3b      	ldrh	r3, [r7, #16]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff ff14 	bl	8000d64 <__aeabi_i2f>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff f90c 	bl	8000160 <__aeabi_fmul>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	617b      	str	r3, [r7, #20]
		break;
 8000f4c:	e00e      	b.n	8000f6c <DS18B20_Read+0x13c>
		case DS18B20_Resolution_12bits:
			result = temperature*(float)DS18B20_STEP_12BIT;
 8000f4e:	8a3b      	ldrh	r3, [r7, #16]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff07 	bl	8000d64 <__aeabi_i2f>
 8000f56:	4603      	mov	r3, r0
 8000f58:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff f8ff 	bl	8000160 <__aeabi_fmul>
 8000f62:	4603      	mov	r3, r0
 8000f64:	617b      	str	r3, [r7, #20]
		 break;
 8000f66:	e001      	b.n	8000f6c <DS18B20_Read+0x13c>
		default:
			result = 0xFF;
 8000f68:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <DS18B20_Read+0x158>)
 8000f6a:	617b      	str	r3, [r7, #20]
	}

	*destination = result;
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	697a      	ldr	r2, [r7, #20]
 8000f70:	601a      	str	r2, [r3, #0]

	return 1; //temperature valid
 8000f72:	2301      	movs	r3, #1
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	371c      	adds	r7, #28
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd90      	pop	{r4, r7, pc}
 8000f7c:	20000208 	.word	0x20000208
 8000f80:	20000624 	.word	0x20000624
 8000f84:	20000664 	.word	0x20000664
 8000f88:	437f0000 	.word	0x437f0000

08000f8c <DS18B20_SetResolution>:

	return conf;
}

uint8_t DS18B20_SetResolution(uint8_t number, DS18B20_Resolution_t resolution)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	460a      	mov	r2, r1
 8000f96:	71fb      	strb	r3, [r7, #7]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	71bb      	strb	r3, [r7, #6]
	if( number >= TempSensorCount)
 8000f9c:	4b4b      	ldr	r3, [pc, #300]	; (80010cc <DS18B20_SetResolution+0x140>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	79fa      	ldrb	r2, [r7, #7]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d301      	bcc.n	8000faa <DS18B20_SetResolution+0x1e>
		return 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	e08c      	b.n	80010c4 <DS18B20_SetResolution+0x138>

	uint8_t th, tl, conf;
	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address))
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	011b      	lsls	r3, r3, #4
 8000fae:	4a48      	ldr	r2, [pc, #288]	; (80010d0 <DS18B20_SetResolution+0x144>)
 8000fb0:	4413      	add	r3, r2
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 f890 	bl	80010d8 <DS18B20_Is>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d101      	bne.n	8000fc2 <DS18B20_SetResolution+0x36>
		return 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	e080      	b.n	80010c4 <DS18B20_SetResolution+0x138>

	OneWire_Reset(&OneWire); // Reset the bus
 8000fc2:	4844      	ldr	r0, [pc, #272]	; (80010d4 <DS18B20_SetResolution+0x148>)
 8000fc4:	f000 fb53 	bl	800166e <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	011b      	lsls	r3, r3, #4
 8000fcc:	4a40      	ldr	r2, [pc, #256]	; (80010d0 <DS18B20_SetResolution+0x144>)
 8000fce:	4413      	add	r3, r2
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4840      	ldr	r0, [pc, #256]	; (80010d4 <DS18B20_SetResolution+0x148>)
 8000fd4:	f000 fcfc 	bl	80019d0 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 8000fd8:	21be      	movs	r1, #190	; 0xbe
 8000fda:	483e      	ldr	r0, [pc, #248]	; (80010d4 <DS18B20_SetResolution+0x148>)
 8000fdc:	f000 fbc4 	bl	8001768 <OneWire_WriteByte>

	OneWire_ReadByte(&OneWire);
 8000fe0:	483c      	ldr	r0, [pc, #240]	; (80010d4 <DS18B20_SetResolution+0x148>)
 8000fe2:	f000 fbdf 	bl	80017a4 <OneWire_ReadByte>
	OneWire_ReadByte(&OneWire);
 8000fe6:	483b      	ldr	r0, [pc, #236]	; (80010d4 <DS18B20_SetResolution+0x148>)
 8000fe8:	f000 fbdc 	bl	80017a4 <OneWire_ReadByte>

	th = OneWire_ReadByte(&OneWire); 	// Writing to scratchpad begins from the temperature alarms bytes
 8000fec:	4839      	ldr	r0, [pc, #228]	; (80010d4 <DS18B20_SetResolution+0x148>)
 8000fee:	f000 fbd9 	bl	80017a4 <OneWire_ReadByte>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	73bb      	strb	r3, [r7, #14]
	tl = OneWire_ReadByte(&OneWire); 	// 	so i have to store them.
 8000ff6:	4837      	ldr	r0, [pc, #220]	; (80010d4 <DS18B20_SetResolution+0x148>)
 8000ff8:	f000 fbd4 	bl	80017a4 <OneWire_ReadByte>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	737b      	strb	r3, [r7, #13]
	conf = OneWire_ReadByte(&OneWire);	// Config byte
 8001000:	4834      	ldr	r0, [pc, #208]	; (80010d4 <DS18B20_SetResolution+0x148>)
 8001002:	f000 fbcf 	bl	80017a4 <OneWire_ReadByte>
 8001006:	4603      	mov	r3, r0
 8001008:	73fb      	strb	r3, [r7, #15]

	if (resolution == DS18B20_Resolution_9bits) // Bits setting
 800100a:	79bb      	ldrb	r3, [r7, #6]
 800100c:	2b09      	cmp	r3, #9
 800100e:	d108      	bne.n	8001022 <DS18B20_SetResolution+0x96>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8001010:	7bfb      	ldrb	r3, [r7, #15]
 8001012:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001016:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8001018:	7bfb      	ldrb	r3, [r7, #15]
 800101a:	f023 0320 	bic.w	r3, r3, #32
 800101e:	73fb      	strb	r3, [r7, #15]
 8001020:	e022      	b.n	8001068 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_10bits)
 8001022:	79bb      	ldrb	r3, [r7, #6]
 8001024:	2b0a      	cmp	r3, #10
 8001026:	d108      	bne.n	800103a <DS18B20_SetResolution+0xae>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8001028:	7bfb      	ldrb	r3, [r7, #15]
 800102a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800102e:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8001030:	7bfb      	ldrb	r3, [r7, #15]
 8001032:	f043 0320 	orr.w	r3, r3, #32
 8001036:	73fb      	strb	r3, [r7, #15]
 8001038:	e016      	b.n	8001068 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 800103a:	79bb      	ldrb	r3, [r7, #6]
 800103c:	2b0b      	cmp	r3, #11
 800103e:	d108      	bne.n	8001052 <DS18B20_SetResolution+0xc6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001046:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	f023 0320 	bic.w	r3, r3, #32
 800104e:	73fb      	strb	r3, [r7, #15]
 8001050:	e00a      	b.n	8001068 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 8001052:	79bb      	ldrb	r3, [r7, #6]
 8001054:	2b0c      	cmp	r3, #12
 8001056:	d107      	bne.n	8001068 <DS18B20_SetResolution+0xdc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800105e:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	f043 0320 	orr.w	r3, r3, #32
 8001066:	73fb      	strb	r3, [r7, #15]
	}

	OneWire_Reset(&OneWire); // Reset the bus
 8001068:	481a      	ldr	r0, [pc, #104]	; (80010d4 <DS18B20_SetResolution+0x148>)
 800106a:	f000 fb00 	bl	800166e <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	011b      	lsls	r3, r3, #4
 8001072:	4a17      	ldr	r2, [pc, #92]	; (80010d0 <DS18B20_SetResolution+0x144>)
 8001074:	4413      	add	r3, r2
 8001076:	4619      	mov	r1, r3
 8001078:	4816      	ldr	r0, [pc, #88]	; (80010d4 <DS18B20_SetResolution+0x148>)
 800107a:	f000 fca9 	bl	80019d0 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_WSCRATCHPAD); // Write scratchpad command
 800107e:	214e      	movs	r1, #78	; 0x4e
 8001080:	4814      	ldr	r0, [pc, #80]	; (80010d4 <DS18B20_SetResolution+0x148>)
 8001082:	f000 fb71 	bl	8001768 <OneWire_WriteByte>

	OneWire_WriteByte(&OneWire, th); // Write 3 bytes to scratchpad
 8001086:	7bbb      	ldrb	r3, [r7, #14]
 8001088:	4619      	mov	r1, r3
 800108a:	4812      	ldr	r0, [pc, #72]	; (80010d4 <DS18B20_SetResolution+0x148>)
 800108c:	f000 fb6c 	bl	8001768 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, tl);
 8001090:	7b7b      	ldrb	r3, [r7, #13]
 8001092:	4619      	mov	r1, r3
 8001094:	480f      	ldr	r0, [pc, #60]	; (80010d4 <DS18B20_SetResolution+0x148>)
 8001096:	f000 fb67 	bl	8001768 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, conf);
 800109a:	7bfb      	ldrb	r3, [r7, #15]
 800109c:	4619      	mov	r1, r3
 800109e:	480d      	ldr	r0, [pc, #52]	; (80010d4 <DS18B20_SetResolution+0x148>)
 80010a0:	f000 fb62 	bl	8001768 <OneWire_WriteByte>

	OneWire_Reset(&OneWire); // Reset the bus
 80010a4:	480b      	ldr	r0, [pc, #44]	; (80010d4 <DS18B20_SetResolution+0x148>)
 80010a6:	f000 fae2 	bl	800166e <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	011b      	lsls	r3, r3, #4
 80010ae:	4a08      	ldr	r2, [pc, #32]	; (80010d0 <DS18B20_SetResolution+0x144>)
 80010b0:	4413      	add	r3, r2
 80010b2:	4619      	mov	r1, r3
 80010b4:	4807      	ldr	r0, [pc, #28]	; (80010d4 <DS18B20_SetResolution+0x148>)
 80010b6:	f000 fc8b 	bl	80019d0 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_CPYSCRATCHPAD); // Copy scratchpad to EEPROM
 80010ba:	2148      	movs	r1, #72	; 0x48
 80010bc:	4805      	ldr	r0, [pc, #20]	; (80010d4 <DS18B20_SetResolution+0x148>)
 80010be:	f000 fb53 	bl	8001768 <OneWire_WriteByte>

	return 1;
 80010c2:	2301      	movs	r3, #1
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000208 	.word	0x20000208
 80010d0:	20000624 	.word	0x20000624
 80010d4:	20000664 	.word	0x20000664

080010d8 <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t* ROM)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	if (*ROM == DS18B20_FAMILY_CODE) // Check family code
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b28      	cmp	r3, #40	; 0x28
 80010e6:	d101      	bne.n	80010ec <DS18B20_Is+0x14>
		return 1;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e000      	b.n	80010ee <DS18B20_Is+0x16>
	return 0;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr

080010f8 <DS18B20_AllDone>:

uint8_t DS18B20_AllDone(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	return OneWire_ReadBit(&OneWire); // Bus is down - busy
 80010fc:	4802      	ldr	r0, [pc, #8]	; (8001108 <DS18B20_AllDone+0x10>)
 80010fe:	f000 fb09 	bl	8001714 <OneWire_ReadBit>
 8001102:	4603      	mov	r3, r0
}
 8001104:	4618      	mov	r0, r3
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000664 	.word	0x20000664

0800110c <DS18B20_ReadAll>:

void DS18B20_ReadAll(void)
{
 800110c:	b590      	push	{r4, r7, lr}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
	uint8_t i;

	if (DS18B20_AllDone())
 8001112:	f7ff fff1 	bl	80010f8 <DS18B20_AllDone>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d02e      	beq.n	800117a <DS18B20_ReadAll+0x6e>
	{
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 800111c:	2300      	movs	r3, #0
 800111e:	71fb      	strb	r3, [r7, #7]
 8001120:	e026      	b.n	8001170 <DS18B20_ReadAll+0x64>
		{
			ds18b20[i].ValidDataFlag = 0;
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	4a17      	ldr	r2, [pc, #92]	; (8001184 <DS18B20_ReadAll+0x78>)
 8001126:	011b      	lsls	r3, r3, #4
 8001128:	4413      	add	r3, r2
 800112a:	330c      	adds	r3, #12
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]

			if (DS18B20_Is((uint8_t*)&ds18b20[i].Address))
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	011b      	lsls	r3, r3, #4
 8001134:	4a13      	ldr	r2, [pc, #76]	; (8001184 <DS18B20_ReadAll+0x78>)
 8001136:	4413      	add	r3, r2
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ffcd 	bl	80010d8 <DS18B20_Is>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d012      	beq.n	800116a <DS18B20_ReadAll+0x5e>
			{
				ds18b20[i].ValidDataFlag = DS18B20_Read(i, &ds18b20[i].Temperature); // Read single sensor
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	011b      	lsls	r3, r3, #4
 8001148:	3308      	adds	r3, #8
 800114a:	4a0e      	ldr	r2, [pc, #56]	; (8001184 <DS18B20_ReadAll+0x78>)
 800114c:	441a      	add	r2, r3
 800114e:	79fc      	ldrb	r4, [r7, #7]
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	4611      	mov	r1, r2
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff fe6b 	bl	8000e30 <DS18B20_Read>
 800115a:	4603      	mov	r3, r0
 800115c:	4619      	mov	r1, r3
 800115e:	4a09      	ldr	r2, [pc, #36]	; (8001184 <DS18B20_ReadAll+0x78>)
 8001160:	0123      	lsls	r3, r4, #4
 8001162:	4413      	add	r3, r2
 8001164:	330c      	adds	r3, #12
 8001166:	460a      	mov	r2, r1
 8001168:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	3301      	adds	r3, #1
 800116e:	71fb      	strb	r3, [r7, #7]
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <DS18B20_ReadAll+0x7c>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	79fa      	ldrb	r2, [r7, #7]
 8001176:	429a      	cmp	r2, r3
 8001178:	d3d3      	bcc.n	8001122 <DS18B20_ReadAll+0x16>
			}
		}
	}
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	bd90      	pop	{r4, r7, pc}
 8001182:	bf00      	nop
 8001184:	20000624 	.word	0x20000624
 8001188:	20000208 	.word	0x20000208

0800118c <DS18B20_GetROM>:

void DS18B20_GetROM(uint8_t number, uint8_t* ROM)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	6039      	str	r1, [r7, #0]
 8001196:	71fb      	strb	r3, [r7, #7]
	if( number >= TempSensorCount)
 8001198:	4b10      	ldr	r3, [pc, #64]	; (80011dc <DS18B20_GetROM+0x50>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	79fa      	ldrb	r2, [r7, #7]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d302      	bcc.n	80011a8 <DS18B20_GetROM+0x1c>
		number = TempSensorCount;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <DS18B20_GetROM+0x50>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	71fb      	strb	r3, [r7, #7]

	uint8_t i;

	for(i = 0; i < 8; i++)
 80011a8:	2300      	movs	r3, #0
 80011aa:	73fb      	strb	r3, [r7, #15]
 80011ac:	e00d      	b.n	80011ca <DS18B20_GetROM+0x3e>
		ROM[i] = ds18b20[number].Address[i];
 80011ae:	79f9      	ldrb	r1, [r7, #7]
 80011b0:	7bfa      	ldrb	r2, [r7, #15]
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
 80011b4:	6838      	ldr	r0, [r7, #0]
 80011b6:	4403      	add	r3, r0
 80011b8:	4809      	ldr	r0, [pc, #36]	; (80011e0 <DS18B20_GetROM+0x54>)
 80011ba:	0109      	lsls	r1, r1, #4
 80011bc:	4401      	add	r1, r0
 80011be:	440a      	add	r2, r1
 80011c0:	7812      	ldrb	r2, [r2, #0]
 80011c2:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 8; i++)
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	3301      	adds	r3, #1
 80011c8:	73fb      	strb	r3, [r7, #15]
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	2b07      	cmp	r3, #7
 80011ce:	d9ee      	bls.n	80011ae <DS18B20_GetROM+0x22>
}
 80011d0:	bf00      	nop
 80011d2:	bf00      	nop
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr
 80011dc:	20000208 	.word	0x20000208
 80011e0:	20000624 	.word	0x20000624

080011e4 <DS18B20_Quantity>:
	for(i = 0; i < 8; i++)
		ds18b20[number].Address[i] = ROM[i]; // Write ROM into sensor's structure
}

uint8_t DS18B20_Quantity(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
	return TempSensorCount;
 80011e8:	4b02      	ldr	r3, [pc, #8]	; (80011f4 <DS18B20_Quantity+0x10>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr
 80011f4:	20000208 	.word	0x20000208

080011f8 <DS18B20_GetTemperature>:

uint8_t DS18B20_GetTemperature(uint8_t number, float* destination)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	6039      	str	r1, [r7, #0]
 8001202:	71fb      	strb	r3, [r7, #7]
	if(!ds18b20[number].ValidDataFlag)
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	4a0b      	ldr	r2, [pc, #44]	; (8001234 <DS18B20_GetTemperature+0x3c>)
 8001208:	011b      	lsls	r3, r3, #4
 800120a:	4413      	add	r3, r2
 800120c:	330c      	adds	r3, #12
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d101      	bne.n	8001218 <DS18B20_GetTemperature+0x20>
		return 0;
 8001214:	2300      	movs	r3, #0
 8001216:	e008      	b.n	800122a <DS18B20_GetTemperature+0x32>

	*destination = ds18b20[number].Temperature;
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	4a06      	ldr	r2, [pc, #24]	; (8001234 <DS18B20_GetTemperature+0x3c>)
 800121c:	011b      	lsls	r3, r3, #4
 800121e:	4413      	add	r3, r2
 8001220:	3308      	adds	r3, #8
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	601a      	str	r2, [r3, #0]
	return 1;
 8001228:	2301      	movs	r3, #1

}
 800122a:	4618      	mov	r0, r3
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr
 8001234:	20000624 	.word	0x20000624

08001238 <DS18B20_Init>:

void DS18B20_Init(DS18B20_Resolution_t resolution)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
	uint8_t next = 0, i = 0, j;
 8001242:	2300      	movs	r3, #0
 8001244:	73fb      	strb	r3, [r7, #15]
 8001246:	2300      	movs	r3, #0
 8001248:	73bb      	strb	r3, [r7, #14]
	OneWire_Init(&OneWire, DS18B20_Pin_GPIO_Port, DS18B20_Pin_Pin); // Init OneWire bus
 800124a:	2202      	movs	r2, #2
 800124c:	491f      	ldr	r1, [pc, #124]	; (80012cc <DS18B20_Init+0x94>)
 800124e:	4820      	ldr	r0, [pc, #128]	; (80012d0 <DS18B20_Init+0x98>)
 8001250:	f000 fbfa 	bl	8001a48 <OneWire_Init>

	next = OneWire_First(&OneWire); // Search first OneWire device
 8001254:	481e      	ldr	r0, [pc, #120]	; (80012d0 <DS18B20_Init+0x98>)
 8001256:	f000 fb9e 	bl	8001996 <OneWire_First>
 800125a:	4603      	mov	r3, r0
 800125c:	73fb      	strb	r3, [r7, #15]
	while(next)
 800125e:	e018      	b.n	8001292 <DS18B20_Init+0x5a>
	{
		TempSensorCount++;
 8001260:	4b1c      	ldr	r3, [pc, #112]	; (80012d4 <DS18B20_Init+0x9c>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	3301      	adds	r3, #1
 8001266:	b2da      	uxtb	r2, r3
 8001268:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <DS18B20_Init+0x9c>)
 800126a:	701a      	strb	r2, [r3, #0]
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 800126c:	7bbb      	ldrb	r3, [r7, #14]
 800126e:	1c5a      	adds	r2, r3, #1
 8001270:	73ba      	strb	r2, [r7, #14]
 8001272:	011b      	lsls	r3, r3, #4
 8001274:	4a18      	ldr	r2, [pc, #96]	; (80012d8 <DS18B20_Init+0xa0>)
 8001276:	4413      	add	r3, r2
 8001278:	4619      	mov	r1, r3
 800127a:	4815      	ldr	r0, [pc, #84]	; (80012d0 <DS18B20_Init+0x98>)
 800127c:	f000 fbc7 	bl	8001a0e <OneWire_GetFullROM>
		next = OneWire_Next(&OneWire);
 8001280:	4813      	ldr	r0, [pc, #76]	; (80012d0 <DS18B20_Init+0x98>)
 8001282:	f000 fb98 	bl	80019b6 <OneWire_Next>
 8001286:	4603      	mov	r3, r0
 8001288:	73fb      	strb	r3, [r7, #15]
		if(TempSensorCount >= _DS18B20_MAX_SENSORS) // More sensors than set maximum is not allowed
 800128a:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <DS18B20_Init+0x9c>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b03      	cmp	r3, #3
 8001290:	d803      	bhi.n	800129a <DS18B20_Init+0x62>
	while(next)
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1e3      	bne.n	8001260 <DS18B20_Init+0x28>
 8001298:	e000      	b.n	800129c <DS18B20_Init+0x64>
			break;
 800129a:	bf00      	nop
	}

	for(j = 0; j < i; j++)
 800129c:	2300      	movs	r3, #0
 800129e:	737b      	strb	r3, [r7, #13]
 80012a0:	e00a      	b.n	80012b8 <DS18B20_Init+0x80>
	{
		DS18B20_SetResolution(j, resolution); // Set the initial resolution to sensor
 80012a2:	79fa      	ldrb	r2, [r7, #7]
 80012a4:	7b7b      	ldrb	r3, [r7, #13]
 80012a6:	4611      	mov	r1, r2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fe6f 	bl	8000f8c <DS18B20_SetResolution>

		DS18B20_StartAll(); // Start conversion on all sensors
 80012ae:	f7ff fdad 	bl	8000e0c <DS18B20_StartAll>
	for(j = 0; j < i; j++)
 80012b2:	7b7b      	ldrb	r3, [r7, #13]
 80012b4:	3301      	adds	r3, #1
 80012b6:	737b      	strb	r3, [r7, #13]
 80012b8:	7b7a      	ldrb	r2, [r7, #13]
 80012ba:	7bbb      	ldrb	r3, [r7, #14]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d3f0      	bcc.n	80012a2 <DS18B20_Init+0x6a>
	}
}
 80012c0:	bf00      	nop
 80012c2:	bf00      	nop
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40010800 	.word	0x40010800
 80012d0:	20000664 	.word	0x20000664
 80012d4:	20000208 	.word	0x20000208
 80012d8:	20000624 	.word	0x20000624

080012dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b088      	sub	sp, #32
 80012e0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e2:	f107 0310 	add.w	r3, r7, #16
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f0:	4b2d      	ldr	r3, [pc, #180]	; (80013a8 <MX_GPIO_Init+0xcc>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	4a2c      	ldr	r2, [pc, #176]	; (80013a8 <MX_GPIO_Init+0xcc>)
 80012f6:	f043 0310 	orr.w	r3, r3, #16
 80012fa:	6193      	str	r3, [r2, #24]
 80012fc:	4b2a      	ldr	r3, [pc, #168]	; (80013a8 <MX_GPIO_Init+0xcc>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	f003 0310 	and.w	r3, r3, #16
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001308:	4b27      	ldr	r3, [pc, #156]	; (80013a8 <MX_GPIO_Init+0xcc>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	4a26      	ldr	r2, [pc, #152]	; (80013a8 <MX_GPIO_Init+0xcc>)
 800130e:	f043 0320 	orr.w	r3, r3, #32
 8001312:	6193      	str	r3, [r2, #24]
 8001314:	4b24      	ldr	r3, [pc, #144]	; (80013a8 <MX_GPIO_Init+0xcc>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	f003 0320 	and.w	r3, r3, #32
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001320:	4b21      	ldr	r3, [pc, #132]	; (80013a8 <MX_GPIO_Init+0xcc>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	4a20      	ldr	r2, [pc, #128]	; (80013a8 <MX_GPIO_Init+0xcc>)
 8001326:	f043 0304 	orr.w	r3, r3, #4
 800132a:	6193      	str	r3, [r2, #24]
 800132c:	4b1e      	ldr	r3, [pc, #120]	; (80013a8 <MX_GPIO_Init+0xcc>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001338:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <MX_GPIO_Init+0xcc>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	4a1a      	ldr	r2, [pc, #104]	; (80013a8 <MX_GPIO_Init+0xcc>)
 800133e:	f043 0308 	orr.w	r3, r3, #8
 8001342:	6193      	str	r3, [r2, #24]
 8001344:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <MX_GPIO_Init+0xcc>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	f003 0308 	and.w	r3, r3, #8
 800134c:	603b      	str	r3, [r7, #0]
 800134e:	683b      	ldr	r3, [r7, #0]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(LED_Pin_GPIO_Port, LED_Pin_Pin, GPIO_PIN_RESET);
 8001350:	2200      	movs	r2, #0
 8001352:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001356:	4815      	ldr	r0, [pc, #84]	; (80013ac <MX_GPIO_Init+0xd0>)
 8001358:	f001 fb37 	bl	80029ca <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOA, TEST_Pin_Pin|DS18B20_Pin_Pin, GPIO_PIN_RESET);
 800135c:	2200      	movs	r2, #0
 800135e:	2103      	movs	r1, #3
 8001360:	4813      	ldr	r0, [pc, #76]	; (80013b0 <MX_GPIO_Init+0xd4>)
 8001362:	f001 fb32 	bl	80029ca <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : LED_Pin */
	  GPIO_InitStruct.Pin = LED_Pin_Pin;
 8001366:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800136a:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136c:	2301      	movs	r3, #1
 800136e:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001374:	2302      	movs	r3, #2
 8001376:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(LED_Pin_GPIO_Port, &GPIO_InitStruct);
 8001378:	f107 0310 	add.w	r3, r7, #16
 800137c:	4619      	mov	r1, r3
 800137e:	480b      	ldr	r0, [pc, #44]	; (80013ac <MX_GPIO_Init+0xd0>)
 8001380:	f001 f988 	bl	8002694 <HAL_GPIO_Init>

	  /*Configure GPIO pins : TEST_Pin DS18B20_Pin */
	  GPIO_InitStruct.Pin = TEST_Pin_Pin|DS18B20_Pin_Pin;
 8001384:	2303      	movs	r3, #3
 8001386:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001388:	2301      	movs	r3, #1
 800138a:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	2302      	movs	r3, #2
 8001392:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001394:	f107 0310 	add.w	r3, r7, #16
 8001398:	4619      	mov	r1, r3
 800139a:	4805      	ldr	r0, [pc, #20]	; (80013b0 <MX_GPIO_Init+0xd4>)
 800139c:	f001 f97a 	bl	8002694 <HAL_GPIO_Init>



}
 80013a0:	bf00      	nop
 80013a2:	3720      	adds	r7, #32
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40011000 	.word	0x40011000
 80013b0:	40010800 	.word	0x40010800

080013b4 <main>:

float temperature;
char string[64];

int main(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
  HAL_Init();
 80013ba:	f001 f801 	bl	80023c0 <HAL_Init>
  SystemClock_Config();
 80013be:	f000 f877 	bl	80014b0 <SystemClock_Config>
  MX_GPIO_Init();
 80013c2:	f7ff ff8b 	bl	80012dc <MX_GPIO_Init>
  MX_TIM1_Init();
 80013c6:	f000 ff67 	bl	8002298 <MX_TIM1_Init>
  MX_I2C1_Init();
 80013ca:	f000 f8b7 	bl	800153c <MX_I2C1_Init>

  SSD1306_Init();
 80013ce:	f000 fb67 	bl	8001aa0 <SSD1306_Init>

  DS18B20_Init(DS18B20_Resolution_12bits);
 80013d2:	200c      	movs	r0, #12
 80013d4:	f7ff ff30 	bl	8001238 <DS18B20_Init>
  HAL_GPIO_WritePin(TEST_Pin_GPIO_Port, TEST_Pin_Pin, 0);
 80013d8:	2200      	movs	r2, #0
 80013da:	2101      	movs	r1, #1
 80013dc:	482c      	ldr	r0, [pc, #176]	; (8001490 <main+0xdc>)
 80013de:	f001 faf4 	bl	80029ca <HAL_GPIO_WritePin>

  while (1)
  {
	  DS18B20_ReadAll();
 80013e2:	f7ff fe93 	bl	800110c <DS18B20_ReadAll>
	  HAL_GPIO_WritePin(TEST_Pin_GPIO_Port, TEST_Pin_Pin, 1);
 80013e6:	2201      	movs	r2, #1
 80013e8:	2101      	movs	r1, #1
 80013ea:	4829      	ldr	r0, [pc, #164]	; (8001490 <main+0xdc>)
 80013ec:	f001 faed 	bl	80029ca <HAL_GPIO_WritePin>
      DS18B20_StartAll();
 80013f0:	f7ff fd0c 	bl	8000e0c <DS18B20_StartAll>
      HAL_GPIO_WritePin(TEST_Pin_GPIO_Port, TEST_Pin_Pin, 0);
 80013f4:	2200      	movs	r2, #0
 80013f6:	2101      	movs	r1, #1
 80013f8:	4825      	ldr	r0, [pc, #148]	; (8001490 <main+0xdc>)
 80013fa:	f001 fae6 	bl	80029ca <HAL_GPIO_WritePin>
		uint8_t ROM_tmp[8];
		uint8_t i;

	for(i = 0; i < DS18B20_Quantity(); i++)
 80013fe:	2300      	movs	r3, #0
 8001400:	73fb      	strb	r3, [r7, #15]
 8001402:	e034      	b.n	800146e <main+0xba>
		{
			if(DS18B20_GetTemperature(i, &temperature))
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	4923      	ldr	r1, [pc, #140]	; (8001494 <main+0xe0>)
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff fef5 	bl	80011f8 <DS18B20_GetTemperature>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d029      	beq.n	8001468 <main+0xb4>
			{
				DS18B20_GetROM(i, ROM_tmp);
 8001414:	1d3a      	adds	r2, r7, #4
 8001416:	7bfb      	ldrb	r3, [r7, #15]
 8001418:	4611      	mov	r1, r2
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff feb6 	bl	800118c <DS18B20_GetROM>
				memset(string, 0, sizeof(string));
 8001420:	2240      	movs	r2, #64	; 0x40
 8001422:	2100      	movs	r1, #0
 8001424:	481c      	ldr	r0, [pc, #112]	; (8001498 <main+0xe4>)
 8001426:	f002 ff5d 	bl	80042e4 <memset>
				sprintf(string, "%.2f C", temperature);
 800142a:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <main+0xe0>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff f8ae 	bl	8000590 <__aeabi_f2d>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	4918      	ldr	r1, [pc, #96]	; (800149c <main+0xe8>)
 800143a:	4817      	ldr	r0, [pc, #92]	; (8001498 <main+0xe4>)
 800143c:	f003 fbba 	bl	8004bb4 <siprintf>
				SSD1306_GotoXY (20, 0);
 8001440:	2100      	movs	r1, #0
 8001442:	2014      	movs	r0, #20
 8001444:	f000 fc94 	bl	8001d70 <SSD1306_GotoXY>
				SSD1306_Puts ("Temperature", &Font_7x10, 1);
 8001448:	2201      	movs	r2, #1
 800144a:	4915      	ldr	r1, [pc, #84]	; (80014a0 <main+0xec>)
 800144c:	4815      	ldr	r0, [pc, #84]	; (80014a4 <main+0xf0>)
 800144e:	f000 fd25 	bl	8001e9c <SSD1306_Puts>
				SSD1306_GotoXY (25, 30);
 8001452:	211e      	movs	r1, #30
 8001454:	2019      	movs	r0, #25
 8001456:	f000 fc8b 	bl	8001d70 <SSD1306_GotoXY>
				SSD1306_Puts (string, &Font_11x18, 1);
 800145a:	2201      	movs	r2, #1
 800145c:	4912      	ldr	r1, [pc, #72]	; (80014a8 <main+0xf4>)
 800145e:	480e      	ldr	r0, [pc, #56]	; (8001498 <main+0xe4>)
 8001460:	f000 fd1c 	bl	8001e9c <SSD1306_Puts>
				SSD1306_UpdateScreen();
 8001464:	f000 fbe0 	bl	8001c28 <SSD1306_UpdateScreen>
	for(i = 0; i < DS18B20_Quantity(); i++)
 8001468:	7bfb      	ldrb	r3, [r7, #15]
 800146a:	3301      	adds	r3, #1
 800146c:	73fb      	strb	r3, [r7, #15]
 800146e:	f7ff feb9 	bl	80011e4 <DS18B20_Quantity>
 8001472:	4603      	mov	r3, r0
 8001474:	461a      	mov	r2, r3
 8001476:	7bfb      	ldrb	r3, [r7, #15]
 8001478:	4293      	cmp	r3, r2
 800147a:	d3c3      	bcc.n	8001404 <main+0x50>
			}
		}
		HAL_Delay(1000);
 800147c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001480:	f001 f800 	bl	8002484 <HAL_Delay>
		HAL_GPIO_TogglePin(LED_Pin_GPIO_Port, LED_Pin_Pin);
 8001484:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001488:	4808      	ldr	r0, [pc, #32]	; (80014ac <main+0xf8>)
 800148a:	f001 fab6 	bl	80029fa <HAL_GPIO_TogglePin>
  {
 800148e:	e7a8      	b.n	80013e2 <main+0x2e>
 8001490:	40010800 	.word	0x40010800
 8001494:	2000070c 	.word	0x2000070c
 8001498:	200006cc 	.word	0x200006cc
 800149c:	08007040 	.word	0x08007040
 80014a0:	20000000 	.word	0x20000000
 80014a4:	08007048 	.word	0x08007048
 80014a8:	20000008 	.word	0x20000008
 80014ac:	40011000 	.word	0x40011000

080014b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b090      	sub	sp, #64	; 0x40
 80014b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b6:	f107 0318 	add.w	r3, r7, #24
 80014ba:	2228      	movs	r2, #40	; 0x28
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f002 ff10 	bl	80042e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
 80014d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014d2:	2301      	movs	r3, #1
 80014d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014dc:	2300      	movs	r3, #0
 80014de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014e0:	2301      	movs	r3, #1
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e4:	2302      	movs	r3, #2
 80014e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80014ee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014f4:	f107 0318 	add.w	r3, r7, #24
 80014f8:	4618      	mov	r0, r3
 80014fa:	f002 f80f 	bl	800351c <HAL_RCC_OscConfig>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001504:	f000 f848 	bl	8001598 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001508:	230f      	movs	r3, #15
 800150a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800150c:	2302      	movs	r3, #2
 800150e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001510:	2300      	movs	r3, #0
 8001512:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001514:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001518:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	2101      	movs	r1, #1
 8001522:	4618      	mov	r0, r3
 8001524:	f002 fa7a 	bl	8003a1c <HAL_RCC_ClockConfig>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800152e:	f000 f833 	bl	8001598 <Error_Handler>
  }
}
 8001532:	bf00      	nop
 8001534:	3740      	adds	r7, #64	; 0x40
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001540:	4b12      	ldr	r3, [pc, #72]	; (800158c <MX_I2C1_Init+0x50>)
 8001542:	4a13      	ldr	r2, [pc, #76]	; (8001590 <MX_I2C1_Init+0x54>)
 8001544:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001546:	4b11      	ldr	r3, [pc, #68]	; (800158c <MX_I2C1_Init+0x50>)
 8001548:	4a12      	ldr	r2, [pc, #72]	; (8001594 <MX_I2C1_Init+0x58>)
 800154a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800154c:	4b0f      	ldr	r3, [pc, #60]	; (800158c <MX_I2C1_Init+0x50>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <MX_I2C1_Init+0x50>)
 8001554:	2200      	movs	r2, #0
 8001556:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001558:	4b0c      	ldr	r3, [pc, #48]	; (800158c <MX_I2C1_Init+0x50>)
 800155a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800155e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001560:	4b0a      	ldr	r3, [pc, #40]	; (800158c <MX_I2C1_Init+0x50>)
 8001562:	2200      	movs	r2, #0
 8001564:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001566:	4b09      	ldr	r3, [pc, #36]	; (800158c <MX_I2C1_Init+0x50>)
 8001568:	2200      	movs	r2, #0
 800156a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800156c:	4b07      	ldr	r3, [pc, #28]	; (800158c <MX_I2C1_Init+0x50>)
 800156e:	2200      	movs	r2, #0
 8001570:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001572:	4b06      	ldr	r3, [pc, #24]	; (800158c <MX_I2C1_Init+0x50>)
 8001574:	2200      	movs	r2, #0
 8001576:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001578:	4804      	ldr	r0, [pc, #16]	; (800158c <MX_I2C1_Init+0x50>)
 800157a:	f001 fa57 	bl	8002a2c <HAL_I2C_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001584:	f000 f808 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000678 	.word	0x20000678
 8001590:	40005400 	.word	0x40005400
 8001594:	00061a80 	.word	0x00061a80

08001598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 800159c:	e7fe      	b.n	800159c <Error_Handler+0x4>
	...

080015a0 <OneWire_Delay>:

//
//	Delay function for constant 1-Wire timings
//
void OneWire_Delay(uint16_t us)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	80fb      	strh	r3, [r7, #6]
	_DS18B20_TIMER.Instance->CNT = 0;
 80015aa:	4b08      	ldr	r3, [pc, #32]	; (80015cc <OneWire_Delay+0x2c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2200      	movs	r2, #0
 80015b0:	625a      	str	r2, [r3, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= us);
 80015b2:	bf00      	nop
 80015b4:	4b05      	ldr	r3, [pc, #20]	; (80015cc <OneWire_Delay+0x2c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015ba:	88fb      	ldrh	r3, [r7, #6]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d9f9      	bls.n	80015b4 <OneWire_Delay+0x14>
}
 80015c0:	bf00      	nop
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr
 80015cc:	20000710 	.word	0x20000710

080015d0 <OneWire_BusInputDirection>:

//
//	Bus direction control
//
void OneWire_BusInputDirection(OneWire_t *onewire)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Set as input
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 80015dc:	2300      	movs	r3, #0
 80015de:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 80015e0:	2301      	movs	r3, #1
 80015e2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	889b      	ldrh	r3, [r3, #4]
 80015e8:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f107 0208 	add.w	r2, r7, #8
 80015f2:	4611      	mov	r1, r2
 80015f4:	4618      	mov	r0, r3
 80015f6:	f001 f84d 	bl	8002694 <HAL_GPIO_Init>
}
 80015fa:	bf00      	nop
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <OneWire_BusOutputDirection>:

void OneWire_BusOutputDirection(OneWire_t *onewire)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b086      	sub	sp, #24
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; // Set as open-drain output
 800160a:	2311      	movs	r3, #17
 800160c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 800160e:	2300      	movs	r3, #0
 8001610:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8001612:	2301      	movs	r3, #1
 8001614:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	889b      	ldrh	r3, [r3, #4]
 800161a:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f107 0208 	add.w	r2, r7, #8
 8001624:	4611      	mov	r1, r2
 8001626:	4618      	mov	r0, r3
 8001628:	f001 f834 	bl	8002694 <HAL_GPIO_Init>
}
 800162c:	bf00      	nop
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <OneWire_OutputLow>:

//
//	Bus pin output state control
//
void OneWire_OutputLow(OneWire_t *onewire)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin<<16; // Reset the 1-Wire pin
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	889b      	ldrh	r3, [r3, #4]
 8001640:	041a      	lsls	r2, r3, #16
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	611a      	str	r2, [r3, #16]
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	bc80      	pop	{r7}
 8001650:	4770      	bx	lr

08001652 <OneWire_OutputHigh>:

void OneWire_OutputHigh(OneWire_t *onewire)
{
 8001652:	b480      	push	{r7}
 8001654:	b083      	sub	sp, #12
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin; // Set the 1-Wire pin
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	889a      	ldrh	r2, [r3, #4]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	611a      	str	r2, [r3, #16]
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	bc80      	pop	{r7}
 800166c:	4770      	bx	lr

0800166e <OneWire_Reset>:
//	Returns:
//	0 - Reset ok
//	1 - Error
//
uint8_t OneWire_Reset(OneWire_t* onewire)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b084      	sub	sp, #16
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
	uint8_t i;

	OneWire_OutputLow(onewire);  // Write bus output low
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff ffdc 	bl	8001634 <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f7ff ffc0 	bl	8001602 <OneWire_BusOutputDirection>
	OneWire_Delay(480); // Wait 480 us for reset
 8001682:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001686:	f7ff ff8b 	bl	80015a0 <OneWire_Delay>

	OneWire_BusInputDirection(onewire); // Release the bus by switching to input
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff ffa0 	bl	80015d0 <OneWire_BusInputDirection>
	OneWire_Delay(70);
 8001690:	2046      	movs	r0, #70	; 0x46
 8001692:	f7ff ff85 	bl	80015a0 <OneWire_Delay>

	i = HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin); // Check if bus is low
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	889b      	ldrh	r3, [r3, #4]
 800169e:	4619      	mov	r1, r3
 80016a0:	4610      	mov	r0, r2
 80016a2:	f001 f97b 	bl	800299c <HAL_GPIO_ReadPin>
 80016a6:	4603      	mov	r3, r0
 80016a8:	73fb      	strb	r3, [r7, #15]
															 // if it's high - no device is presence on the bus
	OneWire_Delay(410);
 80016aa:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 80016ae:	f7ff ff77 	bl	80015a0 <OneWire_Delay>

	return i;
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <OneWire_WriteBit>:

//
//	Writing/Reading operations
//
void OneWire_WriteBit(OneWire_t* onewire, uint8_t bit)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	70fb      	strb	r3, [r7, #3]
	if (bit) // Send '1',
 80016c8:	78fb      	ldrb	r3, [r7, #3]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d00f      	beq.n	80016ee <OneWire_WriteBit+0x32>
	{
		OneWire_OutputLow(onewire);	// Set the bus low
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff ffb0 	bl	8001634 <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff ff94 	bl	8001602 <OneWire_BusOutputDirection>
		OneWire_Delay(6);
 80016da:	2006      	movs	r0, #6
 80016dc:	f7ff ff60 	bl	80015a0 <OneWire_Delay>

		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff ff75 	bl	80015d0 <OneWire_BusInputDirection>
		OneWire_Delay(64);
 80016e6:	2040      	movs	r0, #64	; 0x40
 80016e8:	f7ff ff5a 	bl	80015a0 <OneWire_Delay>
		OneWire_Delay(60);

		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
		OneWire_Delay(10);
	}
}
 80016ec:	e00e      	b.n	800170c <OneWire_WriteBit+0x50>
		OneWire_OutputLow(onewire); // Set the bus low
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff ffa0 	bl	8001634 <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff ff84 	bl	8001602 <OneWire_BusOutputDirection>
		OneWire_Delay(60);
 80016fa:	203c      	movs	r0, #60	; 0x3c
 80016fc:	f7ff ff50 	bl	80015a0 <OneWire_Delay>
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff ff65 	bl	80015d0 <OneWire_BusInputDirection>
		OneWire_Delay(10);
 8001706:	200a      	movs	r0, #10
 8001708:	f7ff ff4a 	bl	80015a0 <OneWire_Delay>
}
 800170c:	bf00      	nop
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <OneWire_ReadBit>:

uint8_t OneWire_ReadBit(OneWire_t* onewire)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0; // Default read bit state is low
 800171c:	2300      	movs	r3, #0
 800171e:	73fb      	strb	r3, [r7, #15]

	OneWire_OutputLow(onewire); // Set low to initiate reading
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff ff87 	bl	8001634 <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff ff6b 	bl	8001602 <OneWire_BusOutputDirection>
	OneWire_Delay(2);
 800172c:	2002      	movs	r0, #2
 800172e:	f7ff ff37 	bl	80015a0 <OneWire_Delay>

	OneWire_BusInputDirection(onewire); // Release bus for Slave response
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7ff ff4c 	bl	80015d0 <OneWire_BusInputDirection>
	OneWire_Delay(10);
 8001738:	200a      	movs	r0, #10
 800173a:	f7ff ff31 	bl	80015a0 <OneWire_Delay>

	if (HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin)) // Read the bus state
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	889b      	ldrh	r3, [r3, #4]
 8001746:	4619      	mov	r1, r3
 8001748:	4610      	mov	r0, r2
 800174a:	f001 f927 	bl	800299c <HAL_GPIO_ReadPin>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <OneWire_ReadBit+0x44>
		bit = 1;
 8001754:	2301      	movs	r3, #1
 8001756:	73fb      	strb	r3, [r7, #15]

	OneWire_Delay(50); // Wait for end of read cycle
 8001758:	2032      	movs	r0, #50	; 0x32
 800175a:	f7ff ff21 	bl	80015a0 <OneWire_Delay>

	return bit;
 800175e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001760:	4618      	mov	r0, r3
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* onewire, uint8_t byte)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 8001774:	2308      	movs	r3, #8
 8001776:	73fb      	strb	r3, [r7, #15]

	do
	{
		OneWire_WriteBit(onewire, byte & 1); // LSB first
 8001778:	78fb      	ldrb	r3, [r7, #3]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	b2db      	uxtb	r3, r3
 8001780:	4619      	mov	r1, r3
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7ff ff9a 	bl	80016bc <OneWire_WriteBit>
		byte >>= 1;
 8001788:	78fb      	ldrb	r3, [r7, #3]
 800178a:	085b      	lsrs	r3, r3, #1
 800178c:	70fb      	strb	r3, [r7, #3]
	} while(--i);
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	3b01      	subs	r3, #1
 8001792:	73fb      	strb	r3, [r7, #15]
 8001794:	7bfb      	ldrb	r3, [r7, #15]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1ee      	bne.n	8001778 <OneWire_WriteByte+0x10>
}
 800179a:	bf00      	nop
 800179c:	bf00      	nop
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* onewire)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 80017ac:	2308      	movs	r3, #8
 80017ae:	73fb      	strb	r3, [r7, #15]
 80017b0:	2300      	movs	r3, #0
 80017b2:	73bb      	strb	r3, [r7, #14]

	do{
		byte >>= 1;
 80017b4:	7bbb      	ldrb	r3, [r7, #14]
 80017b6:	085b      	lsrs	r3, r3, #1
 80017b8:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(onewire) << 7); // LSB first
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7ff ffaa 	bl	8001714 <OneWire_ReadBit>
 80017c0:	4603      	mov	r3, r0
 80017c2:	01db      	lsls	r3, r3, #7
 80017c4:	b25a      	sxtb	r2, r3
 80017c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	b25b      	sxtb	r3, r3
 80017ce:	73bb      	strb	r3, [r7, #14]
	} while(--i);
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	73fb      	strb	r3, [r7, #15]
 80017d6:	7bfb      	ldrb	r3, [r7, #15]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1eb      	bne.n	80017b4 <OneWire_ReadByte+0x10>

	return byte;
 80017dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <OneWire_ResetSearch>:

//
// 1-Wire search operations
//
void OneWire_ResetSearch(OneWire_t* onewire)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
	// Clear the search results
	onewire->LastDiscrepancy = 0;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	719a      	strb	r2, [r3, #6]
	onewire->LastDeviceFlag = 0;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	721a      	strb	r2, [r3, #8]
	onewire->LastFamilyDiscrepancy = 0;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	71da      	strb	r2, [r3, #7]
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr

0800180a <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* onewire, uint8_t command)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b084      	sub	sp, #16
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
 8001812:	460b      	mov	r3, r1
 8001814:	70fb      	strb	r3, [r7, #3]
	uint8_t id_bit_number;
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	id_bit_number = 1;
 8001816:	2301      	movs	r3, #1
 8001818:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 800181a:	2300      	movs	r3, #0
 800181c:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 8001822:	2301      	movs	r3, #1
 8001824:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 8001826:	2300      	movs	r3, #0
 8001828:	733b      	strb	r3, [r7, #12]

	if (!onewire->LastDeviceFlag) // If last device flag is not set
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	7a1b      	ldrb	r3, [r3, #8]
 800182e:	2b00      	cmp	r3, #0
 8001830:	f040 809a 	bne.w	8001968 <OneWire_Search+0x15e>
	{
		if (OneWire_Reset(onewire)) // Reset bus
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff ff1a 	bl	800166e <OneWire_Reset>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d00a      	beq.n	8001856 <OneWire_Search+0x4c>
		{
			// If error while reset - reset search results
			onewire->LastDiscrepancy = 0;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	719a      	strb	r2, [r3, #6]
			onewire->LastDeviceFlag = 0;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	721a      	strb	r2, [r3, #8]
			onewire->LastFamilyDiscrepancy = 0;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	71da      	strb	r2, [r3, #7]
			return 0;
 8001852:	2300      	movs	r3, #0
 8001854:	e09b      	b.n	800198e <OneWire_Search+0x184>
		}

		OneWire_WriteByte(onewire, command); // Send searching command
 8001856:	78fb      	ldrb	r3, [r7, #3]
 8001858:	4619      	mov	r1, r3
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7ff ff84 	bl	8001768 <OneWire_WriteByte>

		// Searching loop, Maxim APPLICATION NOTE 187
		do
		{
			id_bit = OneWire_ReadBit(onewire); // Read a bit 1
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff ff57 	bl	8001714 <OneWire_ReadBit>
 8001866:	4603      	mov	r3, r0
 8001868:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(onewire); // Read the complement of bit 1
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff ff52 	bl	8001714 <OneWire_ReadBit>
 8001870:	4603      	mov	r3, r0
 8001872:	723b      	strb	r3, [r7, #8]

			if ((id_bit == 1) && (cmp_id_bit == 1)) // 11 - data error
 8001874:	7a7b      	ldrb	r3, [r7, #9]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d102      	bne.n	8001880 <OneWire_Search+0x76>
 800187a:	7a3b      	ldrb	r3, [r7, #8]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d064      	beq.n	800194a <OneWire_Search+0x140>
			{
				break;
			}
			else
			{
				if (id_bit != cmp_id_bit)
 8001880:	7a7a      	ldrb	r2, [r7, #9]
 8001882:	7a3b      	ldrb	r3, [r7, #8]
 8001884:	429a      	cmp	r2, r3
 8001886:	d002      	beq.n	800188e <OneWire_Search+0x84>
				{
					search_direction = id_bit;  // Bit write value for search
 8001888:	7a7b      	ldrb	r3, [r7, #9]
 800188a:	72bb      	strb	r3, [r7, #10]
 800188c:	e026      	b.n	80018dc <OneWire_Search+0xd2>
				}
				else // 00 - 2 devices
				{
					// Table 3. Search Path Direction
					if (id_bit_number < onewire->LastDiscrepancy)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	799b      	ldrb	r3, [r3, #6]
 8001892:	7bfa      	ldrb	r2, [r7, #15]
 8001894:	429a      	cmp	r2, r3
 8001896:	d20d      	bcs.n	80018b4 <OneWire_Search+0xaa>
					{
						search_direction = ((onewire->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8001898:	7b7b      	ldrb	r3, [r7, #13]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	7a5a      	ldrb	r2, [r3, #9]
 80018a0:	7afb      	ldrb	r3, [r7, #11]
 80018a2:	4013      	ands	r3, r2
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	bf14      	ite	ne
 80018aa:	2301      	movne	r3, #1
 80018ac:	2300      	moveq	r3, #0
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	72bb      	strb	r3, [r7, #10]
 80018b2:	e008      	b.n	80018c6 <OneWire_Search+0xbc>
					}
					else
					{
						// If bit is equal to last - pick 1
						// If not - then pick 0
						search_direction = (id_bit_number == onewire->LastDiscrepancy);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	799b      	ldrb	r3, [r3, #6]
 80018b8:	7bfa      	ldrb	r2, [r7, #15]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	bf0c      	ite	eq
 80018be:	2301      	moveq	r3, #1
 80018c0:	2300      	movne	r3, #0
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	72bb      	strb	r3, [r7, #10]
					}

					if (search_direction == 0) // If 0 was picked, write it to LastZero
 80018c6:	7abb      	ldrb	r3, [r7, #10]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d107      	bne.n	80018dc <OneWire_Search+0xd2>
					{
						last_zero = id_bit_number;
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
 80018ce:	73bb      	strb	r3, [r7, #14]

						if (last_zero < 9) // Check for last discrepancy in family
 80018d0:	7bbb      	ldrb	r3, [r7, #14]
 80018d2:	2b08      	cmp	r3, #8
 80018d4:	d802      	bhi.n	80018dc <OneWire_Search+0xd2>
						{
							onewire->LastFamilyDiscrepancy = last_zero;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	7bba      	ldrb	r2, [r7, #14]
 80018da:	71da      	strb	r2, [r3, #7]
						}
					}
				}

				if (search_direction == 1)
 80018dc:	7abb      	ldrb	r3, [r7, #10]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d10c      	bne.n	80018fc <OneWire_Search+0xf2>
				{
					onewire->ROM_NO[rom_byte_number] |= rom_byte_mask; // Set the bit in the ROM byte rom_byte_number
 80018e2:	7b7b      	ldrb	r3, [r7, #13]
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	4413      	add	r3, r2
 80018e8:	7a59      	ldrb	r1, [r3, #9]
 80018ea:	7b7b      	ldrb	r3, [r7, #13]
 80018ec:	7afa      	ldrb	r2, [r7, #11]
 80018ee:	430a      	orrs	r2, r1
 80018f0:	b2d1      	uxtb	r1, r2
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	460a      	mov	r2, r1
 80018f8:	725a      	strb	r2, [r3, #9]
 80018fa:	e010      	b.n	800191e <OneWire_Search+0x114>
				}
				else
				{
					onewire->ROM_NO[rom_byte_number] &= ~rom_byte_mask; // Clear the bit in the ROM byte rom_byte_number
 80018fc:	7b7b      	ldrb	r3, [r7, #13]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	4413      	add	r3, r2
 8001902:	7a5b      	ldrb	r3, [r3, #9]
 8001904:	b25a      	sxtb	r2, r3
 8001906:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800190a:	43db      	mvns	r3, r3
 800190c:	b25b      	sxtb	r3, r3
 800190e:	4013      	ands	r3, r2
 8001910:	b25a      	sxtb	r2, r3
 8001912:	7b7b      	ldrb	r3, [r7, #13]
 8001914:	b2d1      	uxtb	r1, r2
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	460a      	mov	r2, r1
 800191c:	725a      	strb	r2, [r3, #9]
				}

				OneWire_WriteBit(onewire, search_direction); // Search direction write bit
 800191e:	7abb      	ldrb	r3, [r7, #10]
 8001920:	4619      	mov	r1, r3
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff feca 	bl	80016bc <OneWire_WriteBit>

				id_bit_number++; // Next bit search - increase the id
 8001928:	7bfb      	ldrb	r3, [r7, #15]
 800192a:	3301      	adds	r3, #1
 800192c:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1; // Shoft the mask for next bit
 800192e:	7afb      	ldrb	r3, [r7, #11]
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	72fb      	strb	r3, [r7, #11]

				if (rom_byte_mask == 0) // If the mask is 0, it says the whole byte is read
 8001934:	7afb      	ldrb	r3, [r7, #11]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d104      	bne.n	8001944 <OneWire_Search+0x13a>
				{
					rom_byte_number++; // Next byte number
 800193a:	7b7b      	ldrb	r3, [r7, #13]
 800193c:	3301      	adds	r3, #1
 800193e:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1; // Reset the mask - first bit
 8001940:	2301      	movs	r3, #1
 8001942:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while(rom_byte_number < 8);  // Read 8 bytes
 8001944:	7b7b      	ldrb	r3, [r7, #13]
 8001946:	2b07      	cmp	r3, #7
 8001948:	d98a      	bls.n	8001860 <OneWire_Search+0x56>

		if (!(id_bit_number < 65)) // If all read bits number is below 65 (8 bytes)
 800194a:	7bfb      	ldrb	r3, [r7, #15]
 800194c:	2b40      	cmp	r3, #64	; 0x40
 800194e:	d90b      	bls.n	8001968 <OneWire_Search+0x15e>
		{
			onewire->LastDiscrepancy = last_zero;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	7bba      	ldrb	r2, [r7, #14]
 8001954:	719a      	strb	r2, [r3, #6]

			if (onewire->LastDiscrepancy == 0) // If last discrepancy is 0 - last device found
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	799b      	ldrb	r3, [r3, #6]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d102      	bne.n	8001964 <OneWire_Search+0x15a>
			{
				onewire->LastDeviceFlag = 1; // Set the flag
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1; // Searching successful
 8001964:	2301      	movs	r3, #1
 8001966:	733b      	strb	r3, [r7, #12]
		}
	}

	// If no device is found - reset search data and return 0
	if (!search_result || !onewire->ROM_NO[0])
 8001968:	7b3b      	ldrb	r3, [r7, #12]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <OneWire_Search+0x16c>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	7a5b      	ldrb	r3, [r3, #9]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10a      	bne.n	800198c <OneWire_Search+0x182>
	{
		onewire->LastDiscrepancy = 0;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	719a      	strb	r2, [r3, #6]
		onewire->LastDeviceFlag = 0;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	721a      	strb	r2, [r3, #8]
		onewire->LastFamilyDiscrepancy = 0;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 800198c:	7b3b      	ldrb	r3, [r7, #12]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <OneWire_First>:

//
//	Return first device on 1-Wire bus
//
uint8_t OneWire_First(OneWire_t* onewire)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
	OneWire_ResetSearch(onewire);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff ff21 	bl	80017e6 <OneWire_ResetSearch>

	return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 80019a4:	21f0      	movs	r1, #240	; 0xf0
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff ff2f 	bl	800180a <OneWire_Search>
 80019ac:	4603      	mov	r3, r0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <OneWire_Next>:

//
//	Return next device on 1-Wire bus
//
uint8_t OneWire_Next(OneWire_t* onewire)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 80019be:	21f0      	movs	r1, #240	; 0xf0
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff ff22 	bl	800180a <OneWire_Search>
 80019c6:	4603      	mov	r3, r0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <OneWire_SelectWithPointer>:

//
//	Select a device on bus by pointer to ROM address
//
void OneWire_SelectWithPointer(OneWire_t* onewire, uint8_t *ROM)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(onewire, ONEWIRE_CMD_MATCHROM); // Match ROM command
 80019da:	2155      	movs	r1, #85	; 0x55
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff fec3 	bl	8001768 <OneWire_WriteByte>

	for (i = 0; i < 8; i++)
 80019e2:	2300      	movs	r3, #0
 80019e4:	73fb      	strb	r3, [r7, #15]
 80019e6:	e00a      	b.n	80019fe <OneWire_SelectWithPointer+0x2e>
	{
		OneWire_WriteByte(onewire, *(ROM + i));
 80019e8:	7bfb      	ldrb	r3, [r7, #15]
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	4413      	add	r3, r2
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	4619      	mov	r1, r3
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff feb8 	bl	8001768 <OneWire_WriteByte>
	for (i = 0; i < 8; i++)
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
 80019fa:	3301      	adds	r3, #1
 80019fc:	73fb      	strb	r3, [r7, #15]
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
 8001a00:	2b07      	cmp	r3, #7
 8001a02:	d9f1      	bls.n	80019e8 <OneWire_SelectWithPointer+0x18>
	}
}
 8001a04:	bf00      	nop
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <OneWire_GetFullROM>:

//
//	Get the ROM of found device
//
void OneWire_GetFullROM(OneWire_t* onewire, uint8_t *firstIndex)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b085      	sub	sp, #20
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
 8001a16:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 8001a18:	2300      	movs	r3, #0
 8001a1a:	73fb      	strb	r3, [r7, #15]
 8001a1c:	e00a      	b.n	8001a34 <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = onewire->ROM_NO[i];
 8001a1e:	7bfa      	ldrb	r2, [r7, #15]
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
 8001a22:	6839      	ldr	r1, [r7, #0]
 8001a24:	440b      	add	r3, r1
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	440a      	add	r2, r1
 8001a2a:	7a52      	ldrb	r2, [r2, #9]
 8001a2c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
 8001a30:	3301      	adds	r3, #1
 8001a32:	73fb      	strb	r3, [r7, #15]
 8001a34:	7bfb      	ldrb	r3, [r7, #15]
 8001a36:	2b07      	cmp	r3, #7
 8001a38:	d9f1      	bls.n	8001a1e <OneWire_GetFullROM+0x10>
	}
}
 8001a3a:	bf00      	nop
 8001a3c:	bf00      	nop
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bc80      	pop	{r7}
 8001a44:	4770      	bx	lr
	...

08001a48 <OneWire_Init>:

//
//	1-Wire initialization
//
void OneWire_Init(OneWire_t* onewire, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	4613      	mov	r3, r2
 8001a54:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start(&_DS18B20_TIMER); // Start the delay timer
 8001a56:	4811      	ldr	r0, [pc, #68]	; (8001a9c <OneWire_Init+0x54>)
 8001a58:	f002 f9b6 	bl	8003dc8 <HAL_TIM_Base_Start>

	onewire->GPIOx = GPIOx; // Save 1-wire bus pin
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	68ba      	ldr	r2, [r7, #8]
 8001a60:	601a      	str	r2, [r3, #0]
	onewire->GPIO_Pin = GPIO_Pin;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	88fa      	ldrh	r2, [r7, #6]
 8001a66:	809a      	strh	r2, [r3, #4]

	// 1-Wire bit bang initialization
	OneWire_BusOutputDirection(onewire);
 8001a68:	68f8      	ldr	r0, [r7, #12]
 8001a6a:	f7ff fdca 	bl	8001602 <OneWire_BusOutputDirection>
	OneWire_OutputHigh(onewire);
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	f7ff fdef 	bl	8001652 <OneWire_OutputHigh>
	HAL_Delay(100);
 8001a74:	2064      	movs	r0, #100	; 0x64
 8001a76:	f000 fd05 	bl	8002484 <HAL_Delay>
	OneWire_OutputLow(onewire);
 8001a7a:	68f8      	ldr	r0, [r7, #12]
 8001a7c:	f7ff fdda 	bl	8001634 <OneWire_OutputLow>
	HAL_Delay(100);
 8001a80:	2064      	movs	r0, #100	; 0x64
 8001a82:	f000 fcff 	bl	8002484 <HAL_Delay>
	OneWire_OutputHigh(onewire);
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f7ff fde3 	bl	8001652 <OneWire_OutputHigh>
	HAL_Delay(200);
 8001a8c:	20c8      	movs	r0, #200	; 0xc8
 8001a8e:	f000 fcf9 	bl	8002484 <HAL_Delay>
}
 8001a92:	bf00      	nop
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000710 	.word	0x20000710

08001aa0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001aa6:	f000 fa1f 	bl	8001ee8 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001aaa:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001aae:	2201      	movs	r2, #1
 8001ab0:	2178      	movs	r1, #120	; 0x78
 8001ab2:	485b      	ldr	r0, [pc, #364]	; (8001c20 <SSD1306_Init+0x180>)
 8001ab4:	f001 f9fc 	bl	8002eb0 <HAL_I2C_IsDeviceReady>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	e0a9      	b.n	8001c16 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001ac2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001ac6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001ac8:	e002      	b.n	8001ad0 <SSD1306_Init+0x30>
		p--;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	3b01      	subs	r3, #1
 8001ace:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1f9      	bne.n	8001aca <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001ad6:	22ae      	movs	r2, #174	; 0xae
 8001ad8:	2100      	movs	r1, #0
 8001ada:	2078      	movs	r0, #120	; 0x78
 8001adc:	f000 fa60 	bl	8001fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001ae0:	2220      	movs	r2, #32
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	2078      	movs	r0, #120	; 0x78
 8001ae6:	f000 fa5b 	bl	8001fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001aea:	2210      	movs	r2, #16
 8001aec:	2100      	movs	r1, #0
 8001aee:	2078      	movs	r0, #120	; 0x78
 8001af0:	f000 fa56 	bl	8001fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001af4:	22b0      	movs	r2, #176	; 0xb0
 8001af6:	2100      	movs	r1, #0
 8001af8:	2078      	movs	r0, #120	; 0x78
 8001afa:	f000 fa51 	bl	8001fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001afe:	22c8      	movs	r2, #200	; 0xc8
 8001b00:	2100      	movs	r1, #0
 8001b02:	2078      	movs	r0, #120	; 0x78
 8001b04:	f000 fa4c 	bl	8001fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	2078      	movs	r0, #120	; 0x78
 8001b0e:	f000 fa47 	bl	8001fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001b12:	2210      	movs	r2, #16
 8001b14:	2100      	movs	r1, #0
 8001b16:	2078      	movs	r0, #120	; 0x78
 8001b18:	f000 fa42 	bl	8001fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001b1c:	2240      	movs	r2, #64	; 0x40
 8001b1e:	2100      	movs	r1, #0
 8001b20:	2078      	movs	r0, #120	; 0x78
 8001b22:	f000 fa3d 	bl	8001fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001b26:	2281      	movs	r2, #129	; 0x81
 8001b28:	2100      	movs	r1, #0
 8001b2a:	2078      	movs	r0, #120	; 0x78
 8001b2c:	f000 fa38 	bl	8001fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001b30:	22ff      	movs	r2, #255	; 0xff
 8001b32:	2100      	movs	r1, #0
 8001b34:	2078      	movs	r0, #120	; 0x78
 8001b36:	f000 fa33 	bl	8001fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001b3a:	22a1      	movs	r2, #161	; 0xa1
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	2078      	movs	r0, #120	; 0x78
 8001b40:	f000 fa2e 	bl	8001fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001b44:	22a6      	movs	r2, #166	; 0xa6
 8001b46:	2100      	movs	r1, #0
 8001b48:	2078      	movs	r0, #120	; 0x78
 8001b4a:	f000 fa29 	bl	8001fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001b4e:	22a8      	movs	r2, #168	; 0xa8
 8001b50:	2100      	movs	r1, #0
 8001b52:	2078      	movs	r0, #120	; 0x78
 8001b54:	f000 fa24 	bl	8001fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001b58:	223f      	movs	r2, #63	; 0x3f
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	2078      	movs	r0, #120	; 0x78
 8001b5e:	f000 fa1f 	bl	8001fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001b62:	22a4      	movs	r2, #164	; 0xa4
 8001b64:	2100      	movs	r1, #0
 8001b66:	2078      	movs	r0, #120	; 0x78
 8001b68:	f000 fa1a 	bl	8001fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001b6c:	22d3      	movs	r2, #211	; 0xd3
 8001b6e:	2100      	movs	r1, #0
 8001b70:	2078      	movs	r0, #120	; 0x78
 8001b72:	f000 fa15 	bl	8001fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001b76:	2200      	movs	r2, #0
 8001b78:	2100      	movs	r1, #0
 8001b7a:	2078      	movs	r0, #120	; 0x78
 8001b7c:	f000 fa10 	bl	8001fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001b80:	22d5      	movs	r2, #213	; 0xd5
 8001b82:	2100      	movs	r1, #0
 8001b84:	2078      	movs	r0, #120	; 0x78
 8001b86:	f000 fa0b 	bl	8001fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001b8a:	22f0      	movs	r2, #240	; 0xf0
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	2078      	movs	r0, #120	; 0x78
 8001b90:	f000 fa06 	bl	8001fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001b94:	22d9      	movs	r2, #217	; 0xd9
 8001b96:	2100      	movs	r1, #0
 8001b98:	2078      	movs	r0, #120	; 0x78
 8001b9a:	f000 fa01 	bl	8001fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001b9e:	2222      	movs	r2, #34	; 0x22
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	2078      	movs	r0, #120	; 0x78
 8001ba4:	f000 f9fc 	bl	8001fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001ba8:	22da      	movs	r2, #218	; 0xda
 8001baa:	2100      	movs	r1, #0
 8001bac:	2078      	movs	r0, #120	; 0x78
 8001bae:	f000 f9f7 	bl	8001fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001bb2:	2212      	movs	r2, #18
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	2078      	movs	r0, #120	; 0x78
 8001bb8:	f000 f9f2 	bl	8001fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001bbc:	22db      	movs	r2, #219	; 0xdb
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	2078      	movs	r0, #120	; 0x78
 8001bc2:	f000 f9ed 	bl	8001fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001bc6:	2220      	movs	r2, #32
 8001bc8:	2100      	movs	r1, #0
 8001bca:	2078      	movs	r0, #120	; 0x78
 8001bcc:	f000 f9e8 	bl	8001fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001bd0:	228d      	movs	r2, #141	; 0x8d
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	2078      	movs	r0, #120	; 0x78
 8001bd6:	f000 f9e3 	bl	8001fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001bda:	2214      	movs	r2, #20
 8001bdc:	2100      	movs	r1, #0
 8001bde:	2078      	movs	r0, #120	; 0x78
 8001be0:	f000 f9de 	bl	8001fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001be4:	22af      	movs	r2, #175	; 0xaf
 8001be6:	2100      	movs	r1, #0
 8001be8:	2078      	movs	r0, #120	; 0x78
 8001bea:	f000 f9d9 	bl	8001fa0 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001bee:	222e      	movs	r2, #46	; 0x2e
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	2078      	movs	r0, #120	; 0x78
 8001bf4:	f000 f9d4 	bl	8001fa0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	f000 f843 	bl	8001c84 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001bfe:	f000 f813 	bl	8001c28 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001c02:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <SSD1306_Init+0x184>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001c08:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <SSD1306_Init+0x184>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001c0e:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <SSD1306_Init+0x184>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001c14:	2301      	movs	r3, #1
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000678 	.word	0x20000678
 8001c24:	2000060c 	.word	0x2000060c

08001c28 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001c2e:	2300      	movs	r3, #0
 8001c30:	71fb      	strb	r3, [r7, #7]
 8001c32:	e01d      	b.n	8001c70 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	3b50      	subs	r3, #80	; 0x50
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	2078      	movs	r0, #120	; 0x78
 8001c40:	f000 f9ae 	bl	8001fa0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001c44:	2200      	movs	r2, #0
 8001c46:	2100      	movs	r1, #0
 8001c48:	2078      	movs	r0, #120	; 0x78
 8001c4a:	f000 f9a9 	bl	8001fa0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001c4e:	2210      	movs	r2, #16
 8001c50:	2100      	movs	r1, #0
 8001c52:	2078      	movs	r0, #120	; 0x78
 8001c54:	f000 f9a4 	bl	8001fa0 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	01db      	lsls	r3, r3, #7
 8001c5c:	4a08      	ldr	r2, [pc, #32]	; (8001c80 <SSD1306_UpdateScreen+0x58>)
 8001c5e:	441a      	add	r2, r3
 8001c60:	2380      	movs	r3, #128	; 0x80
 8001c62:	2140      	movs	r1, #64	; 0x40
 8001c64:	2078      	movs	r0, #120	; 0x78
 8001c66:	f000 f953 	bl	8001f10 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	71fb      	strb	r3, [r7, #7]
 8001c70:	79fb      	ldrb	r3, [r7, #7]
 8001c72:	2b07      	cmp	r3, #7
 8001c74:	d9de      	bls.n	8001c34 <SSD1306_UpdateScreen+0xc>
	}
}
 8001c76:	bf00      	nop
 8001c78:	bf00      	nop
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	2000020c 	.word	0x2000020c

08001c84 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <SSD1306_Fill+0x14>
 8001c94:	2300      	movs	r3, #0
 8001c96:	e000      	b.n	8001c9a <SSD1306_Fill+0x16>
 8001c98:	23ff      	movs	r3, #255	; 0xff
 8001c9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4803      	ldr	r0, [pc, #12]	; (8001cb0 <SSD1306_Fill+0x2c>)
 8001ca2:	f002 fb1f 	bl	80042e4 <memset>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	2000020c 	.word	0x2000020c

08001cb4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	80fb      	strh	r3, [r7, #6]
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	80bb      	strh	r3, [r7, #4]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	70fb      	strb	r3, [r7, #3]
	if (
 8001cc6:	88fb      	ldrh	r3, [r7, #6]
 8001cc8:	2b7f      	cmp	r3, #127	; 0x7f
 8001cca:	d848      	bhi.n	8001d5e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001ccc:	88bb      	ldrh	r3, [r7, #4]
 8001cce:	2b3f      	cmp	r3, #63	; 0x3f
 8001cd0:	d845      	bhi.n	8001d5e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001cd2:	4b25      	ldr	r3, [pc, #148]	; (8001d68 <SSD1306_DrawPixel+0xb4>)
 8001cd4:	791b      	ldrb	r3, [r3, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d006      	beq.n	8001ce8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001cda:	78fb      	ldrb	r3, [r7, #3]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	bf0c      	ite	eq
 8001ce0:	2301      	moveq	r3, #1
 8001ce2:	2300      	movne	r3, #0
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001ce8:	78fb      	ldrb	r3, [r7, #3]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d11a      	bne.n	8001d24 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001cee:	88fa      	ldrh	r2, [r7, #6]
 8001cf0:	88bb      	ldrh	r3, [r7, #4]
 8001cf2:	08db      	lsrs	r3, r3, #3
 8001cf4:	b298      	uxth	r0, r3
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	01db      	lsls	r3, r3, #7
 8001cfa:	4413      	add	r3, r2
 8001cfc:	4a1b      	ldr	r2, [pc, #108]	; (8001d6c <SSD1306_DrawPixel+0xb8>)
 8001cfe:	5cd3      	ldrb	r3, [r2, r3]
 8001d00:	b25a      	sxtb	r2, r3
 8001d02:	88bb      	ldrh	r3, [r7, #4]
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	2101      	movs	r1, #1
 8001d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0e:	b25b      	sxtb	r3, r3
 8001d10:	4313      	orrs	r3, r2
 8001d12:	b259      	sxtb	r1, r3
 8001d14:	88fa      	ldrh	r2, [r7, #6]
 8001d16:	4603      	mov	r3, r0
 8001d18:	01db      	lsls	r3, r3, #7
 8001d1a:	4413      	add	r3, r2
 8001d1c:	b2c9      	uxtb	r1, r1
 8001d1e:	4a13      	ldr	r2, [pc, #76]	; (8001d6c <SSD1306_DrawPixel+0xb8>)
 8001d20:	54d1      	strb	r1, [r2, r3]
 8001d22:	e01d      	b.n	8001d60 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001d24:	88fa      	ldrh	r2, [r7, #6]
 8001d26:	88bb      	ldrh	r3, [r7, #4]
 8001d28:	08db      	lsrs	r3, r3, #3
 8001d2a:	b298      	uxth	r0, r3
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	01db      	lsls	r3, r3, #7
 8001d30:	4413      	add	r3, r2
 8001d32:	4a0e      	ldr	r2, [pc, #56]	; (8001d6c <SSD1306_DrawPixel+0xb8>)
 8001d34:	5cd3      	ldrb	r3, [r2, r3]
 8001d36:	b25a      	sxtb	r2, r3
 8001d38:	88bb      	ldrh	r3, [r7, #4]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	2101      	movs	r1, #1
 8001d40:	fa01 f303 	lsl.w	r3, r1, r3
 8001d44:	b25b      	sxtb	r3, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	b25b      	sxtb	r3, r3
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	b259      	sxtb	r1, r3
 8001d4e:	88fa      	ldrh	r2, [r7, #6]
 8001d50:	4603      	mov	r3, r0
 8001d52:	01db      	lsls	r3, r3, #7
 8001d54:	4413      	add	r3, r2
 8001d56:	b2c9      	uxtb	r1, r1
 8001d58:	4a04      	ldr	r2, [pc, #16]	; (8001d6c <SSD1306_DrawPixel+0xb8>)
 8001d5a:	54d1      	strb	r1, [r2, r3]
 8001d5c:	e000      	b.n	8001d60 <SSD1306_DrawPixel+0xac>
		return;
 8001d5e:	bf00      	nop
	}
}
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr
 8001d68:	2000060c 	.word	0x2000060c
 8001d6c:	2000020c 	.word	0x2000020c

08001d70 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	460a      	mov	r2, r1
 8001d7a:	80fb      	strh	r3, [r7, #6]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001d80:	4a05      	ldr	r2, [pc, #20]	; (8001d98 <SSD1306_GotoXY+0x28>)
 8001d82:	88fb      	ldrh	r3, [r7, #6]
 8001d84:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001d86:	4a04      	ldr	r2, [pc, #16]	; (8001d98 <SSD1306_GotoXY+0x28>)
 8001d88:	88bb      	ldrh	r3, [r7, #4]
 8001d8a:	8053      	strh	r3, [r2, #2]
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	2000060c 	.word	0x2000060c

08001d9c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	6039      	str	r1, [r7, #0]
 8001da6:	71fb      	strb	r3, [r7, #7]
 8001da8:	4613      	mov	r3, r2
 8001daa:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001dac:	4b3a      	ldr	r3, [pc, #232]	; (8001e98 <SSD1306_Putc+0xfc>)
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	461a      	mov	r2, r3
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	4413      	add	r3, r2
	if (
 8001db8:	2b7f      	cmp	r3, #127	; 0x7f
 8001dba:	dc07      	bgt.n	8001dcc <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001dbc:	4b36      	ldr	r3, [pc, #216]	; (8001e98 <SSD1306_Putc+0xfc>)
 8001dbe:	885b      	ldrh	r3, [r3, #2]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	785b      	ldrb	r3, [r3, #1]
 8001dc6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001dc8:	2b3f      	cmp	r3, #63	; 0x3f
 8001dca:	dd01      	ble.n	8001dd0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	e05e      	b.n	8001e8e <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]
 8001dd4:	e04b      	b.n	8001e6e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685a      	ldr	r2, [r3, #4]
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	3b20      	subs	r3, #32
 8001dde:	6839      	ldr	r1, [r7, #0]
 8001de0:	7849      	ldrb	r1, [r1, #1]
 8001de2:	fb01 f303 	mul.w	r3, r1, r3
 8001de6:	4619      	mov	r1, r3
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	440b      	add	r3, r1
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	4413      	add	r3, r2
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001df4:	2300      	movs	r3, #0
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	e030      	b.n	8001e5c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d010      	beq.n	8001e2c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001e0a:	4b23      	ldr	r3, [pc, #140]	; (8001e98 <SSD1306_Putc+0xfc>)
 8001e0c:	881a      	ldrh	r2, [r3, #0]
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	4413      	add	r3, r2
 8001e14:	b298      	uxth	r0, r3
 8001e16:	4b20      	ldr	r3, [pc, #128]	; (8001e98 <SSD1306_Putc+0xfc>)
 8001e18:	885a      	ldrh	r2, [r3, #2]
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	4413      	add	r3, r2
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	79ba      	ldrb	r2, [r7, #6]
 8001e24:	4619      	mov	r1, r3
 8001e26:	f7ff ff45 	bl	8001cb4 <SSD1306_DrawPixel>
 8001e2a:	e014      	b.n	8001e56 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001e2c:	4b1a      	ldr	r3, [pc, #104]	; (8001e98 <SSD1306_Putc+0xfc>)
 8001e2e:	881a      	ldrh	r2, [r3, #0]
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	4413      	add	r3, r2
 8001e36:	b298      	uxth	r0, r3
 8001e38:	4b17      	ldr	r3, [pc, #92]	; (8001e98 <SSD1306_Putc+0xfc>)
 8001e3a:	885a      	ldrh	r2, [r3, #2]
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	4413      	add	r3, r2
 8001e42:	b299      	uxth	r1, r3
 8001e44:	79bb      	ldrb	r3, [r7, #6]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	bf0c      	ite	eq
 8001e4a:	2301      	moveq	r3, #1
 8001e4c:	2300      	movne	r3, #0
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	461a      	mov	r2, r3
 8001e52:	f7ff ff2f 	bl	8001cb4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	461a      	mov	r2, r3
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d3c8      	bcc.n	8001dfa <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	617b      	str	r3, [r7, #20]
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	785b      	ldrb	r3, [r3, #1]
 8001e72:	461a      	mov	r2, r3
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d3ad      	bcc.n	8001dd6 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001e7a:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <SSD1306_Putc+0xfc>)
 8001e7c:	881a      	ldrh	r2, [r3, #0]
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	4413      	add	r3, r2
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	4b03      	ldr	r3, [pc, #12]	; (8001e98 <SSD1306_Putc+0xfc>)
 8001e8a:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	2000060c 	.word	0x2000060c

08001e9c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001eaa:	e012      	b.n	8001ed2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	79fa      	ldrb	r2, [r7, #7]
 8001eb2:	68b9      	ldr	r1, [r7, #8]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff ff71 	bl	8001d9c <SSD1306_Putc>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d002      	beq.n	8001ecc <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	e008      	b.n	8001ede <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1e8      	bne.n	8001eac <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	781b      	ldrb	r3, [r3, #0]
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
	...

08001ee8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001eee:	4b07      	ldr	r3, [pc, #28]	; (8001f0c <ssd1306_I2C_Init+0x24>)
 8001ef0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001ef2:	e002      	b.n	8001efa <ssd1306_I2C_Init+0x12>
		p--;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1f9      	bne.n	8001ef4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001f00:	bf00      	nop
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr
 8001f0c:	0003d090 	.word	0x0003d090

08001f10 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001f10:	b590      	push	{r4, r7, lr}
 8001f12:	b0c7      	sub	sp, #284	; 0x11c
 8001f14:	af02      	add	r7, sp, #8
 8001f16:	4604      	mov	r4, r0
 8001f18:	4608      	mov	r0, r1
 8001f1a:	4639      	mov	r1, r7
 8001f1c:	600a      	str	r2, [r1, #0]
 8001f1e:	4619      	mov	r1, r3
 8001f20:	1dfb      	adds	r3, r7, #7
 8001f22:	4622      	mov	r2, r4
 8001f24:	701a      	strb	r2, [r3, #0]
 8001f26:	1dbb      	adds	r3, r7, #6
 8001f28:	4602      	mov	r2, r0
 8001f2a:	701a      	strb	r2, [r3, #0]
 8001f2c:	1d3b      	adds	r3, r7, #4
 8001f2e:	460a      	mov	r2, r1
 8001f30:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001f32:	f107 030c 	add.w	r3, r7, #12
 8001f36:	1dba      	adds	r2, r7, #6
 8001f38:	7812      	ldrb	r2, [r2, #0]
 8001f3a:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001f42:	e010      	b.n	8001f66 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001f44:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001f48:	463a      	mov	r2, r7
 8001f4a:	6812      	ldr	r2, [r2, #0]
 8001f4c:	441a      	add	r2, r3
 8001f4e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001f52:	3301      	adds	r3, #1
 8001f54:	7811      	ldrb	r1, [r2, #0]
 8001f56:	f107 020c 	add.w	r2, r7, #12
 8001f5a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001f5c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001f60:	3301      	adds	r3, #1
 8001f62:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001f66:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	1d3a      	adds	r2, r7, #4
 8001f6e:	8812      	ldrh	r2, [r2, #0]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d8e7      	bhi.n	8001f44 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001f74:	1dfb      	adds	r3, r7, #7
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	b299      	uxth	r1, r3
 8001f7a:	1d3b      	adds	r3, r7, #4
 8001f7c:	881b      	ldrh	r3, [r3, #0]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	f107 020c 	add.w	r2, r7, #12
 8001f86:	200a      	movs	r0, #10
 8001f88:	9000      	str	r0, [sp, #0]
 8001f8a:	4804      	ldr	r0, [pc, #16]	; (8001f9c <ssd1306_I2C_WriteMulti+0x8c>)
 8001f8c:	f000 fe92 	bl	8002cb4 <HAL_I2C_Master_Transmit>
}
 8001f90:	bf00      	nop
 8001f92:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd90      	pop	{r4, r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20000678 	.word	0x20000678

08001fa0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af02      	add	r7, sp, #8
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]
 8001faa:	460b      	mov	r3, r1
 8001fac:	71bb      	strb	r3, [r7, #6]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001fb2:	79bb      	ldrb	r3, [r7, #6]
 8001fb4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001fb6:	797b      	ldrb	r3, [r7, #5]
 8001fb8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001fba:	79fb      	ldrb	r3, [r7, #7]
 8001fbc:	b299      	uxth	r1, r3
 8001fbe:	f107 020c 	add.w	r2, r7, #12
 8001fc2:	230a      	movs	r3, #10
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	4803      	ldr	r0, [pc, #12]	; (8001fd8 <ssd1306_I2C_Write+0x38>)
 8001fca:	f000 fe73 	bl	8002cb4 <HAL_I2C_Master_Transmit>
}
 8001fce:	bf00      	nop
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000678 	.word	0x20000678

08001fdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fe2:	4b15      	ldr	r3, [pc, #84]	; (8002038 <HAL_MspInit+0x5c>)
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	4a14      	ldr	r2, [pc, #80]	; (8002038 <HAL_MspInit+0x5c>)
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	6193      	str	r3, [r2, #24]
 8001fee:	4b12      	ldr	r3, [pc, #72]	; (8002038 <HAL_MspInit+0x5c>)
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	60bb      	str	r3, [r7, #8]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ffa:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <HAL_MspInit+0x5c>)
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	4a0e      	ldr	r2, [pc, #56]	; (8002038 <HAL_MspInit+0x5c>)
 8002000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002004:	61d3      	str	r3, [r2, #28]
 8002006:	4b0c      	ldr	r3, [pc, #48]	; (8002038 <HAL_MspInit+0x5c>)
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200e:	607b      	str	r3, [r7, #4]
 8002010:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8002012:	4b0a      	ldr	r3, [pc, #40]	; (800203c <HAL_MspInit+0x60>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	4a04      	ldr	r2, [pc, #16]	; (800203c <HAL_MspInit+0x60>)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800202e:	bf00      	nop
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr
 8002038:	40021000 	.word	0x40021000
 800203c:	40010000 	.word	0x40010000

08002040 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b088      	sub	sp, #32
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002048:	f107 0310 	add.w	r3, r7, #16
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a15      	ldr	r2, [pc, #84]	; (80020b0 <HAL_I2C_MspInit+0x70>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d123      	bne.n	80020a8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002060:	4b14      	ldr	r3, [pc, #80]	; (80020b4 <HAL_I2C_MspInit+0x74>)
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	4a13      	ldr	r2, [pc, #76]	; (80020b4 <HAL_I2C_MspInit+0x74>)
 8002066:	f043 0308 	orr.w	r3, r3, #8
 800206a:	6193      	str	r3, [r2, #24]
 800206c:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <HAL_I2C_MspInit+0x74>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	f003 0308 	and.w	r3, r3, #8
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002078:	23c0      	movs	r3, #192	; 0xc0
 800207a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800207c:	2312      	movs	r3, #18
 800207e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002080:	2303      	movs	r3, #3
 8002082:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002084:	f107 0310 	add.w	r3, r7, #16
 8002088:	4619      	mov	r1, r3
 800208a:	480b      	ldr	r0, [pc, #44]	; (80020b8 <HAL_I2C_MspInit+0x78>)
 800208c:	f000 fb02 	bl	8002694 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002090:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <HAL_I2C_MspInit+0x74>)
 8002092:	69db      	ldr	r3, [r3, #28]
 8002094:	4a07      	ldr	r2, [pc, #28]	; (80020b4 <HAL_I2C_MspInit+0x74>)
 8002096:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800209a:	61d3      	str	r3, [r2, #28]
 800209c:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <HAL_I2C_MspInit+0x74>)
 800209e:	69db      	ldr	r3, [r3, #28]
 80020a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020a4:	60bb      	str	r3, [r7, #8]
 80020a6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020a8:	bf00      	nop
 80020aa:	3720      	adds	r7, #32
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40005400 	.word	0x40005400
 80020b4:	40021000 	.word	0x40021000
 80020b8:	40010c00 	.word	0x40010c00

080020bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020c0:	e7fe      	b.n	80020c0 <NMI_Handler+0x4>

080020c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020c2:	b480      	push	{r7}
 80020c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020c6:	e7fe      	b.n	80020c6 <HardFault_Handler+0x4>

080020c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020cc:	e7fe      	b.n	80020cc <MemManage_Handler+0x4>

080020ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020ce:	b480      	push	{r7}
 80020d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020d2:	e7fe      	b.n	80020d2 <BusFault_Handler+0x4>

080020d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020d8:	e7fe      	b.n	80020d8 <UsageFault_Handler+0x4>

080020da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020da:	b480      	push	{r7}
 80020dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bc80      	pop	{r7}
 80020e4:	4770      	bx	lr

080020e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020e6:	b480      	push	{r7}
 80020e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr

080020f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020f2:	b480      	push	{r7}
 80020f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bc80      	pop	{r7}
 80020fc:	4770      	bx	lr

080020fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002102:	f000 f9a3 	bl	800244c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}

0800210a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800210a:	b480      	push	{r7}
 800210c:	af00      	add	r7, sp, #0
	return 1;
 800210e:	2301      	movs	r3, #1
}
 8002110:	4618      	mov	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr

08002118 <_kill>:

int _kill(int pid, int sig)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002122:	f002 f8b5 	bl	8004290 <__errno>
 8002126:	4603      	mov	r3, r0
 8002128:	2216      	movs	r2, #22
 800212a:	601a      	str	r2, [r3, #0]
	return -1;
 800212c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002130:	4618      	mov	r0, r3
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <_exit>:

void _exit (int status)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002140:	f04f 31ff 	mov.w	r1, #4294967295
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff ffe7 	bl	8002118 <_kill>
	while (1) {}		/* Make sure we hang here */
 800214a:	e7fe      	b.n	800214a <_exit+0x12>

0800214c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	e00a      	b.n	8002174 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800215e:	f3af 8000 	nop.w
 8002162:	4601      	mov	r1, r0
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	1c5a      	adds	r2, r3, #1
 8002168:	60ba      	str	r2, [r7, #8]
 800216a:	b2ca      	uxtb	r2, r1
 800216c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	3301      	adds	r3, #1
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	429a      	cmp	r2, r3
 800217a:	dbf0      	blt.n	800215e <_read+0x12>
	}

return len;
 800217c:	687b      	ldr	r3, [r7, #4]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b086      	sub	sp, #24
 800218a:	af00      	add	r7, sp, #0
 800218c:	60f8      	str	r0, [r7, #12]
 800218e:	60b9      	str	r1, [r7, #8]
 8002190:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
 8002196:	e009      	b.n	80021ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	1c5a      	adds	r2, r3, #1
 800219c:	60ba      	str	r2, [r7, #8]
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	3301      	adds	r3, #1
 80021aa:	617b      	str	r3, [r7, #20]
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	dbf1      	blt.n	8002198 <_write+0x12>
	}
	return len;
 80021b4:	687b      	ldr	r3, [r7, #4]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <_close>:

int _close(int file)
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
	return -1;
 80021c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr

080021d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021e4:	605a      	str	r2, [r3, #4]
	return 0;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bc80      	pop	{r7}
 80021f0:	4770      	bx	lr

080021f2 <_isatty>:

int _isatty(int file)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
	return 1;
 80021fa:	2301      	movs	r3, #1
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	4770      	bx	lr

08002206 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002206:	b480      	push	{r7}
 8002208:	b085      	sub	sp, #20
 800220a:	af00      	add	r7, sp, #0
 800220c:	60f8      	str	r0, [r7, #12]
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	607a      	str	r2, [r7, #4]
	return 0;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr
	...

08002220 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002228:	4a14      	ldr	r2, [pc, #80]	; (800227c <_sbrk+0x5c>)
 800222a:	4b15      	ldr	r3, [pc, #84]	; (8002280 <_sbrk+0x60>)
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002234:	4b13      	ldr	r3, [pc, #76]	; (8002284 <_sbrk+0x64>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d102      	bne.n	8002242 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800223c:	4b11      	ldr	r3, [pc, #68]	; (8002284 <_sbrk+0x64>)
 800223e:	4a12      	ldr	r2, [pc, #72]	; (8002288 <_sbrk+0x68>)
 8002240:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002242:	4b10      	ldr	r3, [pc, #64]	; (8002284 <_sbrk+0x64>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4413      	add	r3, r2
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	429a      	cmp	r2, r3
 800224e:	d207      	bcs.n	8002260 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002250:	f002 f81e 	bl	8004290 <__errno>
 8002254:	4603      	mov	r3, r0
 8002256:	220c      	movs	r2, #12
 8002258:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800225a:	f04f 33ff 	mov.w	r3, #4294967295
 800225e:	e009      	b.n	8002274 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002260:	4b08      	ldr	r3, [pc, #32]	; (8002284 <_sbrk+0x64>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002266:	4b07      	ldr	r3, [pc, #28]	; (8002284 <_sbrk+0x64>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4413      	add	r3, r2
 800226e:	4a05      	ldr	r2, [pc, #20]	; (8002284 <_sbrk+0x64>)
 8002270:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002272:	68fb      	ldr	r3, [r7, #12]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	20005000 	.word	0x20005000
 8002280:	00000400 	.word	0x00000400
 8002284:	20000614 	.word	0x20000614
 8002288:	20000770 	.word	0x20000770

0800228c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	bc80      	pop	{r7}
 8002296:	4770      	bx	lr

08002298 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800229e:	f107 0308 	add.w	r3, r7, #8
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	605a      	str	r2, [r3, #4]
 80022a8:	609a      	str	r2, [r3, #8]
 80022aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ac:	463b      	mov	r3, r7
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80022b4:	4b1e      	ldr	r3, [pc, #120]	; (8002330 <MX_TIM1_Init+0x98>)
 80022b6:	4a1f      	ldr	r2, [pc, #124]	; (8002334 <MX_TIM1_Init+0x9c>)
 80022b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 80022ba:	4b1d      	ldr	r3, [pc, #116]	; (8002330 <MX_TIM1_Init+0x98>)
 80022bc:	223f      	movs	r2, #63	; 0x3f
 80022be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c0:	4b1b      	ldr	r3, [pc, #108]	; (8002330 <MX_TIM1_Init+0x98>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80022c6:	4b1a      	ldr	r3, [pc, #104]	; (8002330 <MX_TIM1_Init+0x98>)
 80022c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ce:	4b18      	ldr	r3, [pc, #96]	; (8002330 <MX_TIM1_Init+0x98>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80022d4:	4b16      	ldr	r3, [pc, #88]	; (8002330 <MX_TIM1_Init+0x98>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022da:	4b15      	ldr	r3, [pc, #84]	; (8002330 <MX_TIM1_Init+0x98>)
 80022dc:	2200      	movs	r2, #0
 80022de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80022e0:	4813      	ldr	r0, [pc, #76]	; (8002330 <MX_TIM1_Init+0x98>)
 80022e2:	f001 fd21 	bl	8003d28 <HAL_TIM_Base_Init>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80022ec:	f7ff f954 	bl	8001598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80022f6:	f107 0308 	add.w	r3, r7, #8
 80022fa:	4619      	mov	r1, r3
 80022fc:	480c      	ldr	r0, [pc, #48]	; (8002330 <MX_TIM1_Init+0x98>)
 80022fe:	f001 fdad 	bl	8003e5c <HAL_TIM_ConfigClockSource>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002308:	f7ff f946 	bl	8001598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800230c:	2300      	movs	r3, #0
 800230e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002310:	2300      	movs	r3, #0
 8002312:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002314:	463b      	mov	r3, r7
 8002316:	4619      	mov	r1, r3
 8002318:	4805      	ldr	r0, [pc, #20]	; (8002330 <MX_TIM1_Init+0x98>)
 800231a:	f001 ff5b 	bl	80041d4 <HAL_TIMEx_MasterConfigSynchronization>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002324:	f7ff f938 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002328:	bf00      	nop
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20000710 	.word	0x20000710
 8002334:	40012c00 	.word	0x40012c00

08002338 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a09      	ldr	r2, [pc, #36]	; (800236c <HAL_TIM_Base_MspInit+0x34>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d10b      	bne.n	8002362 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800234a:	4b09      	ldr	r3, [pc, #36]	; (8002370 <HAL_TIM_Base_MspInit+0x38>)
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	4a08      	ldr	r2, [pc, #32]	; (8002370 <HAL_TIM_Base_MspInit+0x38>)
 8002350:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002354:	6193      	str	r3, [r2, #24]
 8002356:	4b06      	ldr	r3, [pc, #24]	; (8002370 <HAL_TIM_Base_MspInit+0x38>)
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002362:	bf00      	nop
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr
 800236c:	40012c00 	.word	0x40012c00
 8002370:	40021000 	.word	0x40021000

08002374 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002374:	480c      	ldr	r0, [pc, #48]	; (80023a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002376:	490d      	ldr	r1, [pc, #52]	; (80023ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002378:	4a0d      	ldr	r2, [pc, #52]	; (80023b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800237a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800237c:	e002      	b.n	8002384 <LoopCopyDataInit>

0800237e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800237e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002382:	3304      	adds	r3, #4

08002384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002388:	d3f9      	bcc.n	800237e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800238a:	4a0a      	ldr	r2, [pc, #40]	; (80023b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800238c:	4c0a      	ldr	r4, [pc, #40]	; (80023b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800238e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002390:	e001      	b.n	8002396 <LoopFillZerobss>

08002392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002394:	3204      	adds	r2, #4

08002396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002398:	d3fb      	bcc.n	8002392 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800239a:	f7ff ff77 	bl	800228c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800239e:	f001 ff7d 	bl	800429c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023a2:	f7ff f807 	bl	80013b4 <main>
  bx lr
 80023a6:	4770      	bx	lr
  ldr r0, =_sdata
 80023a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023ac:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80023b0:	0800892c 	.word	0x0800892c
  ldr r2, =_sbss
 80023b4:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80023b8:	2000076c 	.word	0x2000076c

080023bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023bc:	e7fe      	b.n	80023bc <ADC1_2_IRQHandler>
	...

080023c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023c4:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <HAL_Init+0x28>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a07      	ldr	r2, [pc, #28]	; (80023e8 <HAL_Init+0x28>)
 80023ca:	f043 0310 	orr.w	r3, r3, #16
 80023ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023d0:	2003      	movs	r0, #3
 80023d2:	f000 f92b 	bl	800262c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023d6:	200f      	movs	r0, #15
 80023d8:	f000 f808 	bl	80023ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023dc:	f7ff fdfe 	bl	8001fdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40022000 	.word	0x40022000

080023ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023f4:	4b12      	ldr	r3, [pc, #72]	; (8002440 <HAL_InitTick+0x54>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4b12      	ldr	r3, [pc, #72]	; (8002444 <HAL_InitTick+0x58>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	4619      	mov	r1, r3
 80023fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002402:	fbb3 f3f1 	udiv	r3, r3, r1
 8002406:	fbb2 f3f3 	udiv	r3, r2, r3
 800240a:	4618      	mov	r0, r3
 800240c:	f000 f935 	bl	800267a <HAL_SYSTICK_Config>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e00e      	b.n	8002438 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b0f      	cmp	r3, #15
 800241e:	d80a      	bhi.n	8002436 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002420:	2200      	movs	r2, #0
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	f04f 30ff 	mov.w	r0, #4294967295
 8002428:	f000 f90b 	bl	8002642 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800242c:	4a06      	ldr	r2, [pc, #24]	; (8002448 <HAL_InitTick+0x5c>)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002432:	2300      	movs	r3, #0
 8002434:	e000      	b.n	8002438 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
}
 8002438:	4618      	mov	r0, r3
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20000010 	.word	0x20000010
 8002444:	20000018 	.word	0x20000018
 8002448:	20000014 	.word	0x20000014

0800244c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002450:	4b05      	ldr	r3, [pc, #20]	; (8002468 <HAL_IncTick+0x1c>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	461a      	mov	r2, r3
 8002456:	4b05      	ldr	r3, [pc, #20]	; (800246c <HAL_IncTick+0x20>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4413      	add	r3, r2
 800245c:	4a03      	ldr	r2, [pc, #12]	; (800246c <HAL_IncTick+0x20>)
 800245e:	6013      	str	r3, [r2, #0]
}
 8002460:	bf00      	nop
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr
 8002468:	20000018 	.word	0x20000018
 800246c:	20000758 	.word	0x20000758

08002470 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  return uwTick;
 8002474:	4b02      	ldr	r3, [pc, #8]	; (8002480 <HAL_GetTick+0x10>)
 8002476:	681b      	ldr	r3, [r3, #0]
}
 8002478:	4618      	mov	r0, r3
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr
 8002480:	20000758 	.word	0x20000758

08002484 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800248c:	f7ff fff0 	bl	8002470 <HAL_GetTick>
 8002490:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800249c:	d005      	beq.n	80024aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800249e:	4b0a      	ldr	r3, [pc, #40]	; (80024c8 <HAL_Delay+0x44>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	461a      	mov	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4413      	add	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024aa:	bf00      	nop
 80024ac:	f7ff ffe0 	bl	8002470 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d8f7      	bhi.n	80024ac <HAL_Delay+0x28>
  {
  }
}
 80024bc:	bf00      	nop
 80024be:	bf00      	nop
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000018 	.word	0x20000018

080024cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024dc:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <__NVIC_SetPriorityGrouping+0x44>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024e2:	68ba      	ldr	r2, [r7, #8]
 80024e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024e8:	4013      	ands	r3, r2
 80024ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024fe:	4a04      	ldr	r2, [pc, #16]	; (8002510 <__NVIC_SetPriorityGrouping+0x44>)
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	60d3      	str	r3, [r2, #12]
}
 8002504:	bf00      	nop
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	bc80      	pop	{r7}
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	e000ed00 	.word	0xe000ed00

08002514 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002518:	4b04      	ldr	r3, [pc, #16]	; (800252c <__NVIC_GetPriorityGrouping+0x18>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	0a1b      	lsrs	r3, r3, #8
 800251e:	f003 0307 	and.w	r3, r3, #7
}
 8002522:	4618      	mov	r0, r3
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	e000ed00 	.word	0xe000ed00

08002530 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	4603      	mov	r3, r0
 8002538:	6039      	str	r1, [r7, #0]
 800253a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800253c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002540:	2b00      	cmp	r3, #0
 8002542:	db0a      	blt.n	800255a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	b2da      	uxtb	r2, r3
 8002548:	490c      	ldr	r1, [pc, #48]	; (800257c <__NVIC_SetPriority+0x4c>)
 800254a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254e:	0112      	lsls	r2, r2, #4
 8002550:	b2d2      	uxtb	r2, r2
 8002552:	440b      	add	r3, r1
 8002554:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002558:	e00a      	b.n	8002570 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	b2da      	uxtb	r2, r3
 800255e:	4908      	ldr	r1, [pc, #32]	; (8002580 <__NVIC_SetPriority+0x50>)
 8002560:	79fb      	ldrb	r3, [r7, #7]
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	3b04      	subs	r3, #4
 8002568:	0112      	lsls	r2, r2, #4
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	440b      	add	r3, r1
 800256e:	761a      	strb	r2, [r3, #24]
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	bc80      	pop	{r7}
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	e000e100 	.word	0xe000e100
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002584:	b480      	push	{r7}
 8002586:	b089      	sub	sp, #36	; 0x24
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	f1c3 0307 	rsb	r3, r3, #7
 800259e:	2b04      	cmp	r3, #4
 80025a0:	bf28      	it	cs
 80025a2:	2304      	movcs	r3, #4
 80025a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	3304      	adds	r3, #4
 80025aa:	2b06      	cmp	r3, #6
 80025ac:	d902      	bls.n	80025b4 <NVIC_EncodePriority+0x30>
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	3b03      	subs	r3, #3
 80025b2:	e000      	b.n	80025b6 <NVIC_EncodePriority+0x32>
 80025b4:	2300      	movs	r3, #0
 80025b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b8:	f04f 32ff 	mov.w	r2, #4294967295
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43da      	mvns	r2, r3
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	401a      	ands	r2, r3
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025cc:	f04f 31ff 	mov.w	r1, #4294967295
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	fa01 f303 	lsl.w	r3, r1, r3
 80025d6:	43d9      	mvns	r1, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025dc:	4313      	orrs	r3, r2
         );
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3724      	adds	r7, #36	; 0x24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr

080025e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3b01      	subs	r3, #1
 80025f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025f8:	d301      	bcc.n	80025fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025fa:	2301      	movs	r3, #1
 80025fc:	e00f      	b.n	800261e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025fe:	4a0a      	ldr	r2, [pc, #40]	; (8002628 <SysTick_Config+0x40>)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3b01      	subs	r3, #1
 8002604:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002606:	210f      	movs	r1, #15
 8002608:	f04f 30ff 	mov.w	r0, #4294967295
 800260c:	f7ff ff90 	bl	8002530 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002610:	4b05      	ldr	r3, [pc, #20]	; (8002628 <SysTick_Config+0x40>)
 8002612:	2200      	movs	r2, #0
 8002614:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002616:	4b04      	ldr	r3, [pc, #16]	; (8002628 <SysTick_Config+0x40>)
 8002618:	2207      	movs	r2, #7
 800261a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	e000e010 	.word	0xe000e010

0800262c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f7ff ff49 	bl	80024cc <__NVIC_SetPriorityGrouping>
}
 800263a:	bf00      	nop
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002642:	b580      	push	{r7, lr}
 8002644:	b086      	sub	sp, #24
 8002646:	af00      	add	r7, sp, #0
 8002648:	4603      	mov	r3, r0
 800264a:	60b9      	str	r1, [r7, #8]
 800264c:	607a      	str	r2, [r7, #4]
 800264e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002650:	2300      	movs	r3, #0
 8002652:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002654:	f7ff ff5e 	bl	8002514 <__NVIC_GetPriorityGrouping>
 8002658:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	68b9      	ldr	r1, [r7, #8]
 800265e:	6978      	ldr	r0, [r7, #20]
 8002660:	f7ff ff90 	bl	8002584 <NVIC_EncodePriority>
 8002664:	4602      	mov	r2, r0
 8002666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800266a:	4611      	mov	r1, r2
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff ff5f 	bl	8002530 <__NVIC_SetPriority>
}
 8002672:	bf00      	nop
 8002674:	3718      	adds	r7, #24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b082      	sub	sp, #8
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7ff ffb0 	bl	80025e8 <SysTick_Config>
 8002688:	4603      	mov	r3, r0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
	...

08002694 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002694:	b480      	push	{r7}
 8002696:	b08b      	sub	sp, #44	; 0x2c
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800269e:	2300      	movs	r3, #0
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80026a2:	2300      	movs	r3, #0
 80026a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026a6:	e169      	b.n	800297c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026a8:	2201      	movs	r2, #1
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	69fa      	ldr	r2, [r7, #28]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	f040 8158 	bne.w	8002976 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	4a9a      	ldr	r2, [pc, #616]	; (8002934 <HAL_GPIO_Init+0x2a0>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d05e      	beq.n	800278e <HAL_GPIO_Init+0xfa>
 80026d0:	4a98      	ldr	r2, [pc, #608]	; (8002934 <HAL_GPIO_Init+0x2a0>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d875      	bhi.n	80027c2 <HAL_GPIO_Init+0x12e>
 80026d6:	4a98      	ldr	r2, [pc, #608]	; (8002938 <HAL_GPIO_Init+0x2a4>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d058      	beq.n	800278e <HAL_GPIO_Init+0xfa>
 80026dc:	4a96      	ldr	r2, [pc, #600]	; (8002938 <HAL_GPIO_Init+0x2a4>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d86f      	bhi.n	80027c2 <HAL_GPIO_Init+0x12e>
 80026e2:	4a96      	ldr	r2, [pc, #600]	; (800293c <HAL_GPIO_Init+0x2a8>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d052      	beq.n	800278e <HAL_GPIO_Init+0xfa>
 80026e8:	4a94      	ldr	r2, [pc, #592]	; (800293c <HAL_GPIO_Init+0x2a8>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d869      	bhi.n	80027c2 <HAL_GPIO_Init+0x12e>
 80026ee:	4a94      	ldr	r2, [pc, #592]	; (8002940 <HAL_GPIO_Init+0x2ac>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d04c      	beq.n	800278e <HAL_GPIO_Init+0xfa>
 80026f4:	4a92      	ldr	r2, [pc, #584]	; (8002940 <HAL_GPIO_Init+0x2ac>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d863      	bhi.n	80027c2 <HAL_GPIO_Init+0x12e>
 80026fa:	4a92      	ldr	r2, [pc, #584]	; (8002944 <HAL_GPIO_Init+0x2b0>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d046      	beq.n	800278e <HAL_GPIO_Init+0xfa>
 8002700:	4a90      	ldr	r2, [pc, #576]	; (8002944 <HAL_GPIO_Init+0x2b0>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d85d      	bhi.n	80027c2 <HAL_GPIO_Init+0x12e>
 8002706:	2b12      	cmp	r3, #18
 8002708:	d82a      	bhi.n	8002760 <HAL_GPIO_Init+0xcc>
 800270a:	2b12      	cmp	r3, #18
 800270c:	d859      	bhi.n	80027c2 <HAL_GPIO_Init+0x12e>
 800270e:	a201      	add	r2, pc, #4	; (adr r2, 8002714 <HAL_GPIO_Init+0x80>)
 8002710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002714:	0800278f 	.word	0x0800278f
 8002718:	08002769 	.word	0x08002769
 800271c:	0800277b 	.word	0x0800277b
 8002720:	080027bd 	.word	0x080027bd
 8002724:	080027c3 	.word	0x080027c3
 8002728:	080027c3 	.word	0x080027c3
 800272c:	080027c3 	.word	0x080027c3
 8002730:	080027c3 	.word	0x080027c3
 8002734:	080027c3 	.word	0x080027c3
 8002738:	080027c3 	.word	0x080027c3
 800273c:	080027c3 	.word	0x080027c3
 8002740:	080027c3 	.word	0x080027c3
 8002744:	080027c3 	.word	0x080027c3
 8002748:	080027c3 	.word	0x080027c3
 800274c:	080027c3 	.word	0x080027c3
 8002750:	080027c3 	.word	0x080027c3
 8002754:	080027c3 	.word	0x080027c3
 8002758:	08002771 	.word	0x08002771
 800275c:	08002785 	.word	0x08002785
 8002760:	4a79      	ldr	r2, [pc, #484]	; (8002948 <HAL_GPIO_Init+0x2b4>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d013      	beq.n	800278e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002766:	e02c      	b.n	80027c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	623b      	str	r3, [r7, #32]
          break;
 800276e:	e029      	b.n	80027c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	3304      	adds	r3, #4
 8002776:	623b      	str	r3, [r7, #32]
          break;
 8002778:	e024      	b.n	80027c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	3308      	adds	r3, #8
 8002780:	623b      	str	r3, [r7, #32]
          break;
 8002782:	e01f      	b.n	80027c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	330c      	adds	r3, #12
 800278a:	623b      	str	r3, [r7, #32]
          break;
 800278c:	e01a      	b.n	80027c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d102      	bne.n	800279c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002796:	2304      	movs	r3, #4
 8002798:	623b      	str	r3, [r7, #32]
          break;
 800279a:	e013      	b.n	80027c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d105      	bne.n	80027b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027a4:	2308      	movs	r3, #8
 80027a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	69fa      	ldr	r2, [r7, #28]
 80027ac:	611a      	str	r2, [r3, #16]
          break;
 80027ae:	e009      	b.n	80027c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027b0:	2308      	movs	r3, #8
 80027b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	69fa      	ldr	r2, [r7, #28]
 80027b8:	615a      	str	r2, [r3, #20]
          break;
 80027ba:	e003      	b.n	80027c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027bc:	2300      	movs	r3, #0
 80027be:	623b      	str	r3, [r7, #32]
          break;
 80027c0:	e000      	b.n	80027c4 <HAL_GPIO_Init+0x130>
          break;
 80027c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	2bff      	cmp	r3, #255	; 0xff
 80027c8:	d801      	bhi.n	80027ce <HAL_GPIO_Init+0x13a>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	e001      	b.n	80027d2 <HAL_GPIO_Init+0x13e>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	3304      	adds	r3, #4
 80027d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	2bff      	cmp	r3, #255	; 0xff
 80027d8:	d802      	bhi.n	80027e0 <HAL_GPIO_Init+0x14c>
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	e002      	b.n	80027e6 <HAL_GPIO_Init+0x152>
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	3b08      	subs	r3, #8
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	210f      	movs	r1, #15
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	fa01 f303 	lsl.w	r3, r1, r3
 80027f4:	43db      	mvns	r3, r3
 80027f6:	401a      	ands	r2, r3
 80027f8:	6a39      	ldr	r1, [r7, #32]
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002800:	431a      	orrs	r2, r3
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 80b1 	beq.w	8002976 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002814:	4b4d      	ldr	r3, [pc, #308]	; (800294c <HAL_GPIO_Init+0x2b8>)
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	4a4c      	ldr	r2, [pc, #304]	; (800294c <HAL_GPIO_Init+0x2b8>)
 800281a:	f043 0301 	orr.w	r3, r3, #1
 800281e:	6193      	str	r3, [r2, #24]
 8002820:	4b4a      	ldr	r3, [pc, #296]	; (800294c <HAL_GPIO_Init+0x2b8>)
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	60bb      	str	r3, [r7, #8]
 800282a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800282c:	4a48      	ldr	r2, [pc, #288]	; (8002950 <HAL_GPIO_Init+0x2bc>)
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	089b      	lsrs	r3, r3, #2
 8002832:	3302      	adds	r3, #2
 8002834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002838:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	f003 0303 	and.w	r3, r3, #3
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	220f      	movs	r2, #15
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	43db      	mvns	r3, r3
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	4013      	ands	r3, r2
 800284e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a40      	ldr	r2, [pc, #256]	; (8002954 <HAL_GPIO_Init+0x2c0>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d013      	beq.n	8002880 <HAL_GPIO_Init+0x1ec>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a3f      	ldr	r2, [pc, #252]	; (8002958 <HAL_GPIO_Init+0x2c4>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d00d      	beq.n	800287c <HAL_GPIO_Init+0x1e8>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a3e      	ldr	r2, [pc, #248]	; (800295c <HAL_GPIO_Init+0x2c8>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d007      	beq.n	8002878 <HAL_GPIO_Init+0x1e4>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a3d      	ldr	r2, [pc, #244]	; (8002960 <HAL_GPIO_Init+0x2cc>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d101      	bne.n	8002874 <HAL_GPIO_Init+0x1e0>
 8002870:	2303      	movs	r3, #3
 8002872:	e006      	b.n	8002882 <HAL_GPIO_Init+0x1ee>
 8002874:	2304      	movs	r3, #4
 8002876:	e004      	b.n	8002882 <HAL_GPIO_Init+0x1ee>
 8002878:	2302      	movs	r3, #2
 800287a:	e002      	b.n	8002882 <HAL_GPIO_Init+0x1ee>
 800287c:	2301      	movs	r3, #1
 800287e:	e000      	b.n	8002882 <HAL_GPIO_Init+0x1ee>
 8002880:	2300      	movs	r3, #0
 8002882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002884:	f002 0203 	and.w	r2, r2, #3
 8002888:	0092      	lsls	r2, r2, #2
 800288a:	4093      	lsls	r3, r2
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	4313      	orrs	r3, r2
 8002890:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002892:	492f      	ldr	r1, [pc, #188]	; (8002950 <HAL_GPIO_Init+0x2bc>)
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	089b      	lsrs	r3, r3, #2
 8002898:	3302      	adds	r3, #2
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d006      	beq.n	80028ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028ac:	4b2d      	ldr	r3, [pc, #180]	; (8002964 <HAL_GPIO_Init+0x2d0>)
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	492c      	ldr	r1, [pc, #176]	; (8002964 <HAL_GPIO_Init+0x2d0>)
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	600b      	str	r3, [r1, #0]
 80028b8:	e006      	b.n	80028c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028ba:	4b2a      	ldr	r3, [pc, #168]	; (8002964 <HAL_GPIO_Init+0x2d0>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	43db      	mvns	r3, r3
 80028c2:	4928      	ldr	r1, [pc, #160]	; (8002964 <HAL_GPIO_Init+0x2d0>)
 80028c4:	4013      	ands	r3, r2
 80028c6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d006      	beq.n	80028e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028d4:	4b23      	ldr	r3, [pc, #140]	; (8002964 <HAL_GPIO_Init+0x2d0>)
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	4922      	ldr	r1, [pc, #136]	; (8002964 <HAL_GPIO_Init+0x2d0>)
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	4313      	orrs	r3, r2
 80028de:	604b      	str	r3, [r1, #4]
 80028e0:	e006      	b.n	80028f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028e2:	4b20      	ldr	r3, [pc, #128]	; (8002964 <HAL_GPIO_Init+0x2d0>)
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	43db      	mvns	r3, r3
 80028ea:	491e      	ldr	r1, [pc, #120]	; (8002964 <HAL_GPIO_Init+0x2d0>)
 80028ec:	4013      	ands	r3, r2
 80028ee:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d006      	beq.n	800290a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028fc:	4b19      	ldr	r3, [pc, #100]	; (8002964 <HAL_GPIO_Init+0x2d0>)
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	4918      	ldr	r1, [pc, #96]	; (8002964 <HAL_GPIO_Init+0x2d0>)
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	4313      	orrs	r3, r2
 8002906:	608b      	str	r3, [r1, #8]
 8002908:	e006      	b.n	8002918 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800290a:	4b16      	ldr	r3, [pc, #88]	; (8002964 <HAL_GPIO_Init+0x2d0>)
 800290c:	689a      	ldr	r2, [r3, #8]
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	43db      	mvns	r3, r3
 8002912:	4914      	ldr	r1, [pc, #80]	; (8002964 <HAL_GPIO_Init+0x2d0>)
 8002914:	4013      	ands	r3, r2
 8002916:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d021      	beq.n	8002968 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002924:	4b0f      	ldr	r3, [pc, #60]	; (8002964 <HAL_GPIO_Init+0x2d0>)
 8002926:	68da      	ldr	r2, [r3, #12]
 8002928:	490e      	ldr	r1, [pc, #56]	; (8002964 <HAL_GPIO_Init+0x2d0>)
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	4313      	orrs	r3, r2
 800292e:	60cb      	str	r3, [r1, #12]
 8002930:	e021      	b.n	8002976 <HAL_GPIO_Init+0x2e2>
 8002932:	bf00      	nop
 8002934:	10320000 	.word	0x10320000
 8002938:	10310000 	.word	0x10310000
 800293c:	10220000 	.word	0x10220000
 8002940:	10210000 	.word	0x10210000
 8002944:	10120000 	.word	0x10120000
 8002948:	10110000 	.word	0x10110000
 800294c:	40021000 	.word	0x40021000
 8002950:	40010000 	.word	0x40010000
 8002954:	40010800 	.word	0x40010800
 8002958:	40010c00 	.word	0x40010c00
 800295c:	40011000 	.word	0x40011000
 8002960:	40011400 	.word	0x40011400
 8002964:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002968:	4b0b      	ldr	r3, [pc, #44]	; (8002998 <HAL_GPIO_Init+0x304>)
 800296a:	68da      	ldr	r2, [r3, #12]
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	43db      	mvns	r3, r3
 8002970:	4909      	ldr	r1, [pc, #36]	; (8002998 <HAL_GPIO_Init+0x304>)
 8002972:	4013      	ands	r3, r2
 8002974:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	3301      	adds	r3, #1
 800297a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	fa22 f303 	lsr.w	r3, r2, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	f47f ae8e 	bne.w	80026a8 <HAL_GPIO_Init+0x14>
  }
}
 800298c:	bf00      	nop
 800298e:	bf00      	nop
 8002990:	372c      	adds	r7, #44	; 0x2c
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr
 8002998:	40010400 	.word	0x40010400

0800299c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	460b      	mov	r3, r1
 80029a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	887b      	ldrh	r3, [r7, #2]
 80029ae:	4013      	ands	r3, r2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d002      	beq.n	80029ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029b4:	2301      	movs	r3, #1
 80029b6:	73fb      	strb	r3, [r7, #15]
 80029b8:	e001      	b.n	80029be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029ba:	2300      	movs	r3, #0
 80029bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029be:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr

080029ca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
 80029d2:	460b      	mov	r3, r1
 80029d4:	807b      	strh	r3, [r7, #2]
 80029d6:	4613      	mov	r3, r2
 80029d8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029da:	787b      	ldrb	r3, [r7, #1]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029e0:	887a      	ldrh	r2, [r7, #2]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029e6:	e003      	b.n	80029f0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029e8:	887b      	ldrh	r3, [r7, #2]
 80029ea:	041a      	lsls	r2, r3, #16
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	611a      	str	r2, [r3, #16]
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr

080029fa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b085      	sub	sp, #20
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	460b      	mov	r3, r1
 8002a04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a0c:	887a      	ldrh	r2, [r7, #2]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	4013      	ands	r3, r2
 8002a12:	041a      	lsls	r2, r3, #16
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	43d9      	mvns	r1, r3
 8002a18:	887b      	ldrh	r3, [r7, #2]
 8002a1a:	400b      	ands	r3, r1
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	611a      	str	r2, [r3, #16]
}
 8002a22:	bf00      	nop
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr

08002a2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e12b      	b.n	8002c96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d106      	bne.n	8002a58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7ff faf4 	bl	8002040 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2224      	movs	r2, #36	; 0x24
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0201 	bic.w	r2, r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a90:	f001 f918 	bl	8003cc4 <HAL_RCC_GetPCLK1Freq>
 8002a94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	4a81      	ldr	r2, [pc, #516]	; (8002ca0 <HAL_I2C_Init+0x274>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d807      	bhi.n	8002ab0 <HAL_I2C_Init+0x84>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4a80      	ldr	r2, [pc, #512]	; (8002ca4 <HAL_I2C_Init+0x278>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	bf94      	ite	ls
 8002aa8:	2301      	movls	r3, #1
 8002aaa:	2300      	movhi	r3, #0
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	e006      	b.n	8002abe <HAL_I2C_Init+0x92>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4a7d      	ldr	r2, [pc, #500]	; (8002ca8 <HAL_I2C_Init+0x27c>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	bf94      	ite	ls
 8002ab8:	2301      	movls	r3, #1
 8002aba:	2300      	movhi	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e0e7      	b.n	8002c96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	4a78      	ldr	r2, [pc, #480]	; (8002cac <HAL_I2C_Init+0x280>)
 8002aca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ace:	0c9b      	lsrs	r3, r3, #18
 8002ad0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	4a6a      	ldr	r2, [pc, #424]	; (8002ca0 <HAL_I2C_Init+0x274>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d802      	bhi.n	8002b00 <HAL_I2C_Init+0xd4>
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	3301      	adds	r3, #1
 8002afe:	e009      	b.n	8002b14 <HAL_I2C_Init+0xe8>
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b06:	fb02 f303 	mul.w	r3, r2, r3
 8002b0a:	4a69      	ldr	r2, [pc, #420]	; (8002cb0 <HAL_I2C_Init+0x284>)
 8002b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b10:	099b      	lsrs	r3, r3, #6
 8002b12:	3301      	adds	r3, #1
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6812      	ldr	r2, [r2, #0]
 8002b18:	430b      	orrs	r3, r1
 8002b1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	495c      	ldr	r1, [pc, #368]	; (8002ca0 <HAL_I2C_Init+0x274>)
 8002b30:	428b      	cmp	r3, r1
 8002b32:	d819      	bhi.n	8002b68 <HAL_I2C_Init+0x13c>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	1e59      	subs	r1, r3, #1
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b42:	1c59      	adds	r1, r3, #1
 8002b44:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b48:	400b      	ands	r3, r1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00a      	beq.n	8002b64 <HAL_I2C_Init+0x138>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	1e59      	subs	r1, r3, #1
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b62:	e051      	b.n	8002c08 <HAL_I2C_Init+0x1dc>
 8002b64:	2304      	movs	r3, #4
 8002b66:	e04f      	b.n	8002c08 <HAL_I2C_Init+0x1dc>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d111      	bne.n	8002b94 <HAL_I2C_Init+0x168>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	1e58      	subs	r0, r3, #1
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6859      	ldr	r1, [r3, #4]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	440b      	add	r3, r1
 8002b7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b82:	3301      	adds	r3, #1
 8002b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	bf0c      	ite	eq
 8002b8c:	2301      	moveq	r3, #1
 8002b8e:	2300      	movne	r3, #0
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	e012      	b.n	8002bba <HAL_I2C_Init+0x18e>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	1e58      	subs	r0, r3, #1
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6859      	ldr	r1, [r3, #4]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	0099      	lsls	r1, r3, #2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002baa:	3301      	adds	r3, #1
 8002bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	bf0c      	ite	eq
 8002bb4:	2301      	moveq	r3, #1
 8002bb6:	2300      	movne	r3, #0
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <HAL_I2C_Init+0x196>
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e022      	b.n	8002c08 <HAL_I2C_Init+0x1dc>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10e      	bne.n	8002be8 <HAL_I2C_Init+0x1bc>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	1e58      	subs	r0, r3, #1
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6859      	ldr	r1, [r3, #4]
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	440b      	add	r3, r1
 8002bd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bdc:	3301      	adds	r3, #1
 8002bde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002be6:	e00f      	b.n	8002c08 <HAL_I2C_Init+0x1dc>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	1e58      	subs	r0, r3, #1
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6859      	ldr	r1, [r3, #4]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	0099      	lsls	r1, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bfe:	3301      	adds	r3, #1
 8002c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c08:	6879      	ldr	r1, [r7, #4]
 8002c0a:	6809      	ldr	r1, [r1, #0]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69da      	ldr	r2, [r3, #28]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	431a      	orrs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	6911      	ldr	r1, [r2, #16]
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	68d2      	ldr	r2, [r2, #12]
 8002c42:	4311      	orrs	r1, r2
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6812      	ldr	r2, [r2, #0]
 8002c48:	430b      	orrs	r3, r1
 8002c4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	695a      	ldr	r2, [r3, #20]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	430a      	orrs	r2, r1
 8002c66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f042 0201 	orr.w	r2, r2, #1
 8002c76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2220      	movs	r2, #32
 8002c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	000186a0 	.word	0x000186a0
 8002ca4:	001e847f 	.word	0x001e847f
 8002ca8:	003d08ff 	.word	0x003d08ff
 8002cac:	431bde83 	.word	0x431bde83
 8002cb0:	10624dd3 	.word	0x10624dd3

08002cb4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b088      	sub	sp, #32
 8002cb8:	af02      	add	r7, sp, #8
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	607a      	str	r2, [r7, #4]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	817b      	strh	r3, [r7, #10]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cc8:	f7ff fbd2 	bl	8002470 <HAL_GetTick>
 8002ccc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b20      	cmp	r3, #32
 8002cd8:	f040 80e0 	bne.w	8002e9c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	2319      	movs	r3, #25
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	4970      	ldr	r1, [pc, #448]	; (8002ea8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f000 fa92 	bl	8003210 <I2C_WaitOnFlagUntilTimeout>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	e0d3      	b.n	8002e9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d101      	bne.n	8002d04 <HAL_I2C_Master_Transmit+0x50>
 8002d00:	2302      	movs	r3, #2
 8002d02:	e0cc      	b.n	8002e9e <HAL_I2C_Master_Transmit+0x1ea>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d007      	beq.n	8002d2a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f042 0201 	orr.w	r2, r2, #1
 8002d28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d38:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2221      	movs	r2, #33	; 0x21
 8002d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2210      	movs	r2, #16
 8002d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	893a      	ldrh	r2, [r7, #8]
 8002d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	4a50      	ldr	r2, [pc, #320]	; (8002eac <HAL_I2C_Master_Transmit+0x1f8>)
 8002d6a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d6c:	8979      	ldrh	r1, [r7, #10]
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	6a3a      	ldr	r2, [r7, #32]
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f000 f9ca 	bl	800310c <I2C_MasterRequestWrite>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e08d      	b.n	8002e9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d82:	2300      	movs	r3, #0
 8002d84:	613b      	str	r3, [r7, #16]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	613b      	str	r3, [r7, #16]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	613b      	str	r3, [r7, #16]
 8002d96:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d98:	e066      	b.n	8002e68 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	6a39      	ldr	r1, [r7, #32]
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f000 fb0c 	bl	80033bc <I2C_WaitOnTXEFlagUntilTimeout>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00d      	beq.n	8002dc6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	d107      	bne.n	8002dc2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dc0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e06b      	b.n	8002e9e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	781a      	ldrb	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd6:	1c5a      	adds	r2, r3, #1
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	3b01      	subs	r3, #1
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dee:	3b01      	subs	r3, #1
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b04      	cmp	r3, #4
 8002e02:	d11b      	bne.n	8002e3c <HAL_I2C_Master_Transmit+0x188>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d017      	beq.n	8002e3c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e10:	781a      	ldrb	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	1c5a      	adds	r2, r3, #1
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e34:	3b01      	subs	r3, #1
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	6a39      	ldr	r1, [r7, #32]
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f000 fafc 	bl	800343e <I2C_WaitOnBTFFlagUntilTimeout>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00d      	beq.n	8002e68 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	2b04      	cmp	r3, #4
 8002e52:	d107      	bne.n	8002e64 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e62:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e01a      	b.n	8002e9e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d194      	bne.n	8002d9a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2220      	movs	r2, #32
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	e000      	b.n	8002e9e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e9c:	2302      	movs	r3, #2
  }
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	00100002 	.word	0x00100002
 8002eac:	ffff0000 	.word	0xffff0000

08002eb0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b08a      	sub	sp, #40	; 0x28
 8002eb4:	af02      	add	r7, sp, #8
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	607a      	str	r2, [r7, #4]
 8002eba:	603b      	str	r3, [r7, #0]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002ec0:	f7ff fad6 	bl	8002470 <HAL_GetTick>
 8002ec4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b20      	cmp	r3, #32
 8002ed4:	f040 8111 	bne.w	80030fa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	2319      	movs	r3, #25
 8002ede:	2201      	movs	r2, #1
 8002ee0:	4988      	ldr	r1, [pc, #544]	; (8003104 <HAL_I2C_IsDeviceReady+0x254>)
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 f994 	bl	8003210 <I2C_WaitOnFlagUntilTimeout>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002eee:	2302      	movs	r3, #2
 8002ef0:	e104      	b.n	80030fc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d101      	bne.n	8002f00 <HAL_I2C_IsDeviceReady+0x50>
 8002efc:	2302      	movs	r3, #2
 8002efe:	e0fd      	b.n	80030fc <HAL_I2C_IsDeviceReady+0x24c>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d007      	beq.n	8002f26 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f042 0201 	orr.w	r2, r2, #1
 8002f24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2224      	movs	r2, #36	; 0x24
 8002f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4a70      	ldr	r2, [pc, #448]	; (8003108 <HAL_I2C_IsDeviceReady+0x258>)
 8002f48:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f58:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 f952 	bl	8003210 <I2C_WaitOnFlagUntilTimeout>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00d      	beq.n	8002f8e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f80:	d103      	bne.n	8002f8a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f88:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e0b6      	b.n	80030fc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f8e:	897b      	ldrh	r3, [r7, #10]
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	461a      	mov	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f9c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002f9e:	f7ff fa67 	bl	8002470 <HAL_GetTick>
 8002fa2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	bf0c      	ite	eq
 8002fb2:	2301      	moveq	r3, #1
 8002fb4:	2300      	movne	r3, #0
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fc8:	bf0c      	ite	eq
 8002fca:	2301      	moveq	r3, #1
 8002fcc:	2300      	movne	r3, #0
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002fd2:	e025      	b.n	8003020 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002fd4:	f7ff fa4c 	bl	8002470 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d302      	bcc.n	8002fea <HAL_I2C_IsDeviceReady+0x13a>
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d103      	bne.n	8002ff2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	22a0      	movs	r2, #160	; 0xa0
 8002fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	bf0c      	ite	eq
 8003000:	2301      	moveq	r3, #1
 8003002:	2300      	movne	r3, #0
 8003004:	b2db      	uxtb	r3, r3
 8003006:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003016:	bf0c      	ite	eq
 8003018:	2301      	moveq	r3, #1
 800301a:	2300      	movne	r3, #0
 800301c:	b2db      	uxtb	r3, r3
 800301e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2ba0      	cmp	r3, #160	; 0xa0
 800302a:	d005      	beq.n	8003038 <HAL_I2C_IsDeviceReady+0x188>
 800302c:	7dfb      	ldrb	r3, [r7, #23]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d102      	bne.n	8003038 <HAL_I2C_IsDeviceReady+0x188>
 8003032:	7dbb      	ldrb	r3, [r7, #22]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d0cd      	beq.n	8002fd4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2220      	movs	r2, #32
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b02      	cmp	r3, #2
 800304c:	d129      	bne.n	80030a2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800305c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800305e:	2300      	movs	r3, #0
 8003060:	613b      	str	r3, [r7, #16]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	613b      	str	r3, [r7, #16]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	613b      	str	r3, [r7, #16]
 8003072:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	2319      	movs	r3, #25
 800307a:	2201      	movs	r2, #1
 800307c:	4921      	ldr	r1, [pc, #132]	; (8003104 <HAL_I2C_IsDeviceReady+0x254>)
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 f8c6 	bl	8003210 <I2C_WaitOnFlagUntilTimeout>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e036      	b.n	80030fc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2220      	movs	r2, #32
 8003092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800309e:	2300      	movs	r3, #0
 80030a0:	e02c      	b.n	80030fc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030b0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030ba:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	2319      	movs	r3, #25
 80030c2:	2201      	movs	r2, #1
 80030c4:	490f      	ldr	r1, [pc, #60]	; (8003104 <HAL_I2C_IsDeviceReady+0x254>)
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f000 f8a2 	bl	8003210 <I2C_WaitOnFlagUntilTimeout>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e012      	b.n	80030fc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	3301      	adds	r3, #1
 80030da:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	f4ff af32 	bcc.w	8002f4a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2220      	movs	r2, #32
 80030ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e000      	b.n	80030fc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80030fa:	2302      	movs	r3, #2
  }
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3720      	adds	r7, #32
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	00100002 	.word	0x00100002
 8003108:	ffff0000 	.word	0xffff0000

0800310c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b088      	sub	sp, #32
 8003110:	af02      	add	r7, sp, #8
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	607a      	str	r2, [r7, #4]
 8003116:	603b      	str	r3, [r7, #0]
 8003118:	460b      	mov	r3, r1
 800311a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003120:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	2b08      	cmp	r3, #8
 8003126:	d006      	beq.n	8003136 <I2C_MasterRequestWrite+0x2a>
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d003      	beq.n	8003136 <I2C_MasterRequestWrite+0x2a>
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003134:	d108      	bne.n	8003148 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	e00b      	b.n	8003160 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314c:	2b12      	cmp	r3, #18
 800314e:	d107      	bne.n	8003160 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800315e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f000 f84f 	bl	8003210 <I2C_WaitOnFlagUntilTimeout>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00d      	beq.n	8003194 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003186:	d103      	bne.n	8003190 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800318e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e035      	b.n	8003200 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800319c:	d108      	bne.n	80031b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800319e:	897b      	ldrh	r3, [r7, #10]
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	461a      	mov	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031ac:	611a      	str	r2, [r3, #16]
 80031ae:	e01b      	b.n	80031e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80031b0:	897b      	ldrh	r3, [r7, #10]
 80031b2:	11db      	asrs	r3, r3, #7
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	f003 0306 	and.w	r3, r3, #6
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	f063 030f 	orn	r3, r3, #15
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	490e      	ldr	r1, [pc, #56]	; (8003208 <I2C_MasterRequestWrite+0xfc>)
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 f875 	bl	80032be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e010      	b.n	8003200 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80031de:	897b      	ldrh	r3, [r7, #10]
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	4907      	ldr	r1, [pc, #28]	; (800320c <I2C_MasterRequestWrite+0x100>)
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 f865 	bl	80032be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e000      	b.n	8003200 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3718      	adds	r7, #24
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	00010008 	.word	0x00010008
 800320c:	00010002 	.word	0x00010002

08003210 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	603b      	str	r3, [r7, #0]
 800321c:	4613      	mov	r3, r2
 800321e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003220:	e025      	b.n	800326e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003228:	d021      	beq.n	800326e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800322a:	f7ff f921 	bl	8002470 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	429a      	cmp	r2, r3
 8003238:	d302      	bcc.n	8003240 <I2C_WaitOnFlagUntilTimeout+0x30>
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d116      	bne.n	800326e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2220      	movs	r2, #32
 800324a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	f043 0220 	orr.w	r2, r3, #32
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e023      	b.n	80032b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	0c1b      	lsrs	r3, r3, #16
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b01      	cmp	r3, #1
 8003276:	d10d      	bne.n	8003294 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	43da      	mvns	r2, r3
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	4013      	ands	r3, r2
 8003284:	b29b      	uxth	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	bf0c      	ite	eq
 800328a:	2301      	moveq	r3, #1
 800328c:	2300      	movne	r3, #0
 800328e:	b2db      	uxtb	r3, r3
 8003290:	461a      	mov	r2, r3
 8003292:	e00c      	b.n	80032ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	43da      	mvns	r2, r3
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	4013      	ands	r3, r2
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	bf0c      	ite	eq
 80032a6:	2301      	moveq	r3, #1
 80032a8:	2300      	movne	r3, #0
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	461a      	mov	r2, r3
 80032ae:	79fb      	ldrb	r3, [r7, #7]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d0b6      	beq.n	8003222 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b084      	sub	sp, #16
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	60f8      	str	r0, [r7, #12]
 80032c6:	60b9      	str	r1, [r7, #8]
 80032c8:	607a      	str	r2, [r7, #4]
 80032ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032cc:	e051      	b.n	8003372 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032dc:	d123      	bne.n	8003326 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2220      	movs	r2, #32
 8003302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	f043 0204 	orr.w	r2, r3, #4
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e046      	b.n	80033b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332c:	d021      	beq.n	8003372 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800332e:	f7ff f89f 	bl	8002470 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	429a      	cmp	r2, r3
 800333c:	d302      	bcc.n	8003344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d116      	bne.n	8003372 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2220      	movs	r2, #32
 800334e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	f043 0220 	orr.w	r2, r3, #32
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e020      	b.n	80033b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	0c1b      	lsrs	r3, r3, #16
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b01      	cmp	r3, #1
 800337a:	d10c      	bne.n	8003396 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	43da      	mvns	r2, r3
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	4013      	ands	r3, r2
 8003388:	b29b      	uxth	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	bf14      	ite	ne
 800338e:	2301      	movne	r3, #1
 8003390:	2300      	moveq	r3, #0
 8003392:	b2db      	uxtb	r3, r3
 8003394:	e00b      	b.n	80033ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	43da      	mvns	r2, r3
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	4013      	ands	r3, r2
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	bf14      	ite	ne
 80033a8:	2301      	movne	r3, #1
 80033aa:	2300      	moveq	r3, #0
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d18d      	bne.n	80032ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033c8:	e02d      	b.n	8003426 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f000 f878 	bl	80034c0 <I2C_IsAcknowledgeFailed>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e02d      	b.n	8003436 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e0:	d021      	beq.n	8003426 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033e2:	f7ff f845 	bl	8002470 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d302      	bcc.n	80033f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d116      	bne.n	8003426 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2220      	movs	r2, #32
 8003402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	f043 0220 	orr.w	r2, r3, #32
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e007      	b.n	8003436 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003430:	2b80      	cmp	r3, #128	; 0x80
 8003432:	d1ca      	bne.n	80033ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b084      	sub	sp, #16
 8003442:	af00      	add	r7, sp, #0
 8003444:	60f8      	str	r0, [r7, #12]
 8003446:	60b9      	str	r1, [r7, #8]
 8003448:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800344a:	e02d      	b.n	80034a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f000 f837 	bl	80034c0 <I2C_IsAcknowledgeFailed>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e02d      	b.n	80034b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003462:	d021      	beq.n	80034a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003464:	f7ff f804 	bl	8002470 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	429a      	cmp	r2, r3
 8003472:	d302      	bcc.n	800347a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d116      	bne.n	80034a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2220      	movs	r2, #32
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	f043 0220 	orr.w	r2, r3, #32
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e007      	b.n	80034b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	f003 0304 	and.w	r3, r3, #4
 80034b2:	2b04      	cmp	r3, #4
 80034b4:	d1ca      	bne.n	800344c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034d6:	d11b      	bne.n	8003510 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2220      	movs	r2, #32
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	f043 0204 	orr.w	r2, r3, #4
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e000      	b.n	8003512 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	bc80      	pop	{r7}
 800351a:	4770      	bx	lr

0800351c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e26c      	b.n	8003a08 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	f000 8087 	beq.w	800364a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800353c:	4b92      	ldr	r3, [pc, #584]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f003 030c 	and.w	r3, r3, #12
 8003544:	2b04      	cmp	r3, #4
 8003546:	d00c      	beq.n	8003562 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003548:	4b8f      	ldr	r3, [pc, #572]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f003 030c 	and.w	r3, r3, #12
 8003550:	2b08      	cmp	r3, #8
 8003552:	d112      	bne.n	800357a <HAL_RCC_OscConfig+0x5e>
 8003554:	4b8c      	ldr	r3, [pc, #560]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800355c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003560:	d10b      	bne.n	800357a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003562:	4b89      	ldr	r3, [pc, #548]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d06c      	beq.n	8003648 <HAL_RCC_OscConfig+0x12c>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d168      	bne.n	8003648 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e246      	b.n	8003a08 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003582:	d106      	bne.n	8003592 <HAL_RCC_OscConfig+0x76>
 8003584:	4b80      	ldr	r3, [pc, #512]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a7f      	ldr	r2, [pc, #508]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 800358a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800358e:	6013      	str	r3, [r2, #0]
 8003590:	e02e      	b.n	80035f0 <HAL_RCC_OscConfig+0xd4>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10c      	bne.n	80035b4 <HAL_RCC_OscConfig+0x98>
 800359a:	4b7b      	ldr	r3, [pc, #492]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a7a      	ldr	r2, [pc, #488]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 80035a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	4b78      	ldr	r3, [pc, #480]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a77      	ldr	r2, [pc, #476]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 80035ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035b0:	6013      	str	r3, [r2, #0]
 80035b2:	e01d      	b.n	80035f0 <HAL_RCC_OscConfig+0xd4>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035bc:	d10c      	bne.n	80035d8 <HAL_RCC_OscConfig+0xbc>
 80035be:	4b72      	ldr	r3, [pc, #456]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a71      	ldr	r2, [pc, #452]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 80035c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035c8:	6013      	str	r3, [r2, #0]
 80035ca:	4b6f      	ldr	r3, [pc, #444]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a6e      	ldr	r2, [pc, #440]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 80035d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	e00b      	b.n	80035f0 <HAL_RCC_OscConfig+0xd4>
 80035d8:	4b6b      	ldr	r3, [pc, #428]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a6a      	ldr	r2, [pc, #424]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 80035de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035e2:	6013      	str	r3, [r2, #0]
 80035e4:	4b68      	ldr	r3, [pc, #416]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a67      	ldr	r2, [pc, #412]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 80035ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d013      	beq.n	8003620 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f8:	f7fe ff3a 	bl	8002470 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003600:	f7fe ff36 	bl	8002470 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b64      	cmp	r3, #100	; 0x64
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e1fa      	b.n	8003a08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003612:	4b5d      	ldr	r3, [pc, #372]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0f0      	beq.n	8003600 <HAL_RCC_OscConfig+0xe4>
 800361e:	e014      	b.n	800364a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003620:	f7fe ff26 	bl	8002470 <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003628:	f7fe ff22 	bl	8002470 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b64      	cmp	r3, #100	; 0x64
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e1e6      	b.n	8003a08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800363a:	4b53      	ldr	r3, [pc, #332]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1f0      	bne.n	8003628 <HAL_RCC_OscConfig+0x10c>
 8003646:	e000      	b.n	800364a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d063      	beq.n	800371e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003656:	4b4c      	ldr	r3, [pc, #304]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f003 030c 	and.w	r3, r3, #12
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00b      	beq.n	800367a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003662:	4b49      	ldr	r3, [pc, #292]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f003 030c 	and.w	r3, r3, #12
 800366a:	2b08      	cmp	r3, #8
 800366c:	d11c      	bne.n	80036a8 <HAL_RCC_OscConfig+0x18c>
 800366e:	4b46      	ldr	r3, [pc, #280]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d116      	bne.n	80036a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800367a:	4b43      	ldr	r3, [pc, #268]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d005      	beq.n	8003692 <HAL_RCC_OscConfig+0x176>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d001      	beq.n	8003692 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e1ba      	b.n	8003a08 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003692:	4b3d      	ldr	r3, [pc, #244]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	4939      	ldr	r1, [pc, #228]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036a6:	e03a      	b.n	800371e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d020      	beq.n	80036f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036b0:	4b36      	ldr	r3, [pc, #216]	; (800378c <HAL_RCC_OscConfig+0x270>)
 80036b2:	2201      	movs	r2, #1
 80036b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b6:	f7fe fedb 	bl	8002470 <HAL_GetTick>
 80036ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036bc:	e008      	b.n	80036d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036be:	f7fe fed7 	bl	8002470 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d901      	bls.n	80036d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e19b      	b.n	8003a08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d0:	4b2d      	ldr	r3, [pc, #180]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0f0      	beq.n	80036be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036dc:	4b2a      	ldr	r3, [pc, #168]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	4927      	ldr	r1, [pc, #156]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	600b      	str	r3, [r1, #0]
 80036f0:	e015      	b.n	800371e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036f2:	4b26      	ldr	r3, [pc, #152]	; (800378c <HAL_RCC_OscConfig+0x270>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f8:	f7fe feba 	bl	8002470 <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003700:	f7fe feb6 	bl	8002470 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e17a      	b.n	8003a08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003712:	4b1d      	ldr	r3, [pc, #116]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1f0      	bne.n	8003700 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0308 	and.w	r3, r3, #8
 8003726:	2b00      	cmp	r3, #0
 8003728:	d03a      	beq.n	80037a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d019      	beq.n	8003766 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003732:	4b17      	ldr	r3, [pc, #92]	; (8003790 <HAL_RCC_OscConfig+0x274>)
 8003734:	2201      	movs	r2, #1
 8003736:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003738:	f7fe fe9a 	bl	8002470 <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003740:	f7fe fe96 	bl	8002470 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e15a      	b.n	8003a08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003752:	4b0d      	ldr	r3, [pc, #52]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 8003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d0f0      	beq.n	8003740 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800375e:	2001      	movs	r0, #1
 8003760:	f000 fac4 	bl	8003cec <RCC_Delay>
 8003764:	e01c      	b.n	80037a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003766:	4b0a      	ldr	r3, [pc, #40]	; (8003790 <HAL_RCC_OscConfig+0x274>)
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800376c:	f7fe fe80 	bl	8002470 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003772:	e00f      	b.n	8003794 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003774:	f7fe fe7c 	bl	8002470 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d908      	bls.n	8003794 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e140      	b.n	8003a08 <HAL_RCC_OscConfig+0x4ec>
 8003786:	bf00      	nop
 8003788:	40021000 	.word	0x40021000
 800378c:	42420000 	.word	0x42420000
 8003790:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003794:	4b9e      	ldr	r3, [pc, #632]	; (8003a10 <HAL_RCC_OscConfig+0x4f4>)
 8003796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1e9      	bne.n	8003774 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 80a6 	beq.w	80038fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ae:	2300      	movs	r3, #0
 80037b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037b2:	4b97      	ldr	r3, [pc, #604]	; (8003a10 <HAL_RCC_OscConfig+0x4f4>)
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10d      	bne.n	80037da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037be:	4b94      	ldr	r3, [pc, #592]	; (8003a10 <HAL_RCC_OscConfig+0x4f4>)
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	4a93      	ldr	r2, [pc, #588]	; (8003a10 <HAL_RCC_OscConfig+0x4f4>)
 80037c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c8:	61d3      	str	r3, [r2, #28]
 80037ca:	4b91      	ldr	r3, [pc, #580]	; (8003a10 <HAL_RCC_OscConfig+0x4f4>)
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d2:	60bb      	str	r3, [r7, #8]
 80037d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037d6:	2301      	movs	r3, #1
 80037d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037da:	4b8e      	ldr	r3, [pc, #568]	; (8003a14 <HAL_RCC_OscConfig+0x4f8>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d118      	bne.n	8003818 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037e6:	4b8b      	ldr	r3, [pc, #556]	; (8003a14 <HAL_RCC_OscConfig+0x4f8>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a8a      	ldr	r2, [pc, #552]	; (8003a14 <HAL_RCC_OscConfig+0x4f8>)
 80037ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037f2:	f7fe fe3d 	bl	8002470 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037fa:	f7fe fe39 	bl	8002470 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b64      	cmp	r3, #100	; 0x64
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e0fd      	b.n	8003a08 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800380c:	4b81      	ldr	r3, [pc, #516]	; (8003a14 <HAL_RCC_OscConfig+0x4f8>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0f0      	beq.n	80037fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d106      	bne.n	800382e <HAL_RCC_OscConfig+0x312>
 8003820:	4b7b      	ldr	r3, [pc, #492]	; (8003a10 <HAL_RCC_OscConfig+0x4f4>)
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	4a7a      	ldr	r2, [pc, #488]	; (8003a10 <HAL_RCC_OscConfig+0x4f4>)
 8003826:	f043 0301 	orr.w	r3, r3, #1
 800382a:	6213      	str	r3, [r2, #32]
 800382c:	e02d      	b.n	800388a <HAL_RCC_OscConfig+0x36e>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10c      	bne.n	8003850 <HAL_RCC_OscConfig+0x334>
 8003836:	4b76      	ldr	r3, [pc, #472]	; (8003a10 <HAL_RCC_OscConfig+0x4f4>)
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	4a75      	ldr	r2, [pc, #468]	; (8003a10 <HAL_RCC_OscConfig+0x4f4>)
 800383c:	f023 0301 	bic.w	r3, r3, #1
 8003840:	6213      	str	r3, [r2, #32]
 8003842:	4b73      	ldr	r3, [pc, #460]	; (8003a10 <HAL_RCC_OscConfig+0x4f4>)
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	4a72      	ldr	r2, [pc, #456]	; (8003a10 <HAL_RCC_OscConfig+0x4f4>)
 8003848:	f023 0304 	bic.w	r3, r3, #4
 800384c:	6213      	str	r3, [r2, #32]
 800384e:	e01c      	b.n	800388a <HAL_RCC_OscConfig+0x36e>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	2b05      	cmp	r3, #5
 8003856:	d10c      	bne.n	8003872 <HAL_RCC_OscConfig+0x356>
 8003858:	4b6d      	ldr	r3, [pc, #436]	; (8003a10 <HAL_RCC_OscConfig+0x4f4>)
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	4a6c      	ldr	r2, [pc, #432]	; (8003a10 <HAL_RCC_OscConfig+0x4f4>)
 800385e:	f043 0304 	orr.w	r3, r3, #4
 8003862:	6213      	str	r3, [r2, #32]
 8003864:	4b6a      	ldr	r3, [pc, #424]	; (8003a10 <HAL_RCC_OscConfig+0x4f4>)
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	4a69      	ldr	r2, [pc, #420]	; (8003a10 <HAL_RCC_OscConfig+0x4f4>)
 800386a:	f043 0301 	orr.w	r3, r3, #1
 800386e:	6213      	str	r3, [r2, #32]
 8003870:	e00b      	b.n	800388a <HAL_RCC_OscConfig+0x36e>
 8003872:	4b67      	ldr	r3, [pc, #412]	; (8003a10 <HAL_RCC_OscConfig+0x4f4>)
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	4a66      	ldr	r2, [pc, #408]	; (8003a10 <HAL_RCC_OscConfig+0x4f4>)
 8003878:	f023 0301 	bic.w	r3, r3, #1
 800387c:	6213      	str	r3, [r2, #32]
 800387e:	4b64      	ldr	r3, [pc, #400]	; (8003a10 <HAL_RCC_OscConfig+0x4f4>)
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	4a63      	ldr	r2, [pc, #396]	; (8003a10 <HAL_RCC_OscConfig+0x4f4>)
 8003884:	f023 0304 	bic.w	r3, r3, #4
 8003888:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d015      	beq.n	80038be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003892:	f7fe fded 	bl	8002470 <HAL_GetTick>
 8003896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003898:	e00a      	b.n	80038b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800389a:	f7fe fde9 	bl	8002470 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e0ab      	b.n	8003a08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b0:	4b57      	ldr	r3, [pc, #348]	; (8003a10 <HAL_RCC_OscConfig+0x4f4>)
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0ee      	beq.n	800389a <HAL_RCC_OscConfig+0x37e>
 80038bc:	e014      	b.n	80038e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038be:	f7fe fdd7 	bl	8002470 <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038c4:	e00a      	b.n	80038dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038c6:	f7fe fdd3 	bl	8002470 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d901      	bls.n	80038dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e095      	b.n	8003a08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038dc:	4b4c      	ldr	r3, [pc, #304]	; (8003a10 <HAL_RCC_OscConfig+0x4f4>)
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1ee      	bne.n	80038c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038e8:	7dfb      	ldrb	r3, [r7, #23]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d105      	bne.n	80038fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038ee:	4b48      	ldr	r3, [pc, #288]	; (8003a10 <HAL_RCC_OscConfig+0x4f4>)
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	4a47      	ldr	r2, [pc, #284]	; (8003a10 <HAL_RCC_OscConfig+0x4f4>)
 80038f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 8081 	beq.w	8003a06 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003904:	4b42      	ldr	r3, [pc, #264]	; (8003a10 <HAL_RCC_OscConfig+0x4f4>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f003 030c 	and.w	r3, r3, #12
 800390c:	2b08      	cmp	r3, #8
 800390e:	d061      	beq.n	80039d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	69db      	ldr	r3, [r3, #28]
 8003914:	2b02      	cmp	r3, #2
 8003916:	d146      	bne.n	80039a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003918:	4b3f      	ldr	r3, [pc, #252]	; (8003a18 <HAL_RCC_OscConfig+0x4fc>)
 800391a:	2200      	movs	r2, #0
 800391c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800391e:	f7fe fda7 	bl	8002470 <HAL_GetTick>
 8003922:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003924:	e008      	b.n	8003938 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003926:	f7fe fda3 	bl	8002470 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d901      	bls.n	8003938 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e067      	b.n	8003a08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003938:	4b35      	ldr	r3, [pc, #212]	; (8003a10 <HAL_RCC_OscConfig+0x4f4>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1f0      	bne.n	8003926 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800394c:	d108      	bne.n	8003960 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800394e:	4b30      	ldr	r3, [pc, #192]	; (8003a10 <HAL_RCC_OscConfig+0x4f4>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	492d      	ldr	r1, [pc, #180]	; (8003a10 <HAL_RCC_OscConfig+0x4f4>)
 800395c:	4313      	orrs	r3, r2
 800395e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003960:	4b2b      	ldr	r3, [pc, #172]	; (8003a10 <HAL_RCC_OscConfig+0x4f4>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a19      	ldr	r1, [r3, #32]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003970:	430b      	orrs	r3, r1
 8003972:	4927      	ldr	r1, [pc, #156]	; (8003a10 <HAL_RCC_OscConfig+0x4f4>)
 8003974:	4313      	orrs	r3, r2
 8003976:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003978:	4b27      	ldr	r3, [pc, #156]	; (8003a18 <HAL_RCC_OscConfig+0x4fc>)
 800397a:	2201      	movs	r2, #1
 800397c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397e:	f7fe fd77 	bl	8002470 <HAL_GetTick>
 8003982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003984:	e008      	b.n	8003998 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003986:	f7fe fd73 	bl	8002470 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e037      	b.n	8003a08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003998:	4b1d      	ldr	r3, [pc, #116]	; (8003a10 <HAL_RCC_OscConfig+0x4f4>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0f0      	beq.n	8003986 <HAL_RCC_OscConfig+0x46a>
 80039a4:	e02f      	b.n	8003a06 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a6:	4b1c      	ldr	r3, [pc, #112]	; (8003a18 <HAL_RCC_OscConfig+0x4fc>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ac:	f7fe fd60 	bl	8002470 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b4:	f7fe fd5c 	bl	8002470 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e020      	b.n	8003a08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039c6:	4b12      	ldr	r3, [pc, #72]	; (8003a10 <HAL_RCC_OscConfig+0x4f4>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1f0      	bne.n	80039b4 <HAL_RCC_OscConfig+0x498>
 80039d2:	e018      	b.n	8003a06 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d101      	bne.n	80039e0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e013      	b.n	8003a08 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039e0:	4b0b      	ldr	r3, [pc, #44]	; (8003a10 <HAL_RCC_OscConfig+0x4f4>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d106      	bne.n	8003a02 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d001      	beq.n	8003a06 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e000      	b.n	8003a08 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3718      	adds	r7, #24
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	40021000 	.word	0x40021000
 8003a14:	40007000 	.word	0x40007000
 8003a18:	42420060 	.word	0x42420060

08003a1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e0d0      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a30:	4b6a      	ldr	r3, [pc, #424]	; (8003bdc <HAL_RCC_ClockConfig+0x1c0>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d910      	bls.n	8003a60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3e:	4b67      	ldr	r3, [pc, #412]	; (8003bdc <HAL_RCC_ClockConfig+0x1c0>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f023 0207 	bic.w	r2, r3, #7
 8003a46:	4965      	ldr	r1, [pc, #404]	; (8003bdc <HAL_RCC_ClockConfig+0x1c0>)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4e:	4b63      	ldr	r3, [pc, #396]	; (8003bdc <HAL_RCC_ClockConfig+0x1c0>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0307 	and.w	r3, r3, #7
 8003a56:	683a      	ldr	r2, [r7, #0]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d001      	beq.n	8003a60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e0b8      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d020      	beq.n	8003aae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d005      	beq.n	8003a84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a78:	4b59      	ldr	r3, [pc, #356]	; (8003be0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	4a58      	ldr	r2, [pc, #352]	; (8003be0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0308 	and.w	r3, r3, #8
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d005      	beq.n	8003a9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a90:	4b53      	ldr	r3, [pc, #332]	; (8003be0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	4a52      	ldr	r2, [pc, #328]	; (8003be0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a96:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a9c:	4b50      	ldr	r3, [pc, #320]	; (8003be0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	494d      	ldr	r1, [pc, #308]	; (8003be0 <HAL_RCC_ClockConfig+0x1c4>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d040      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d107      	bne.n	8003ad2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ac2:	4b47      	ldr	r3, [pc, #284]	; (8003be0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d115      	bne.n	8003afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e07f      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d107      	bne.n	8003aea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ada:	4b41      	ldr	r3, [pc, #260]	; (8003be0 <HAL_RCC_ClockConfig+0x1c4>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d109      	bne.n	8003afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e073      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aea:	4b3d      	ldr	r3, [pc, #244]	; (8003be0 <HAL_RCC_ClockConfig+0x1c4>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e06b      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003afa:	4b39      	ldr	r3, [pc, #228]	; (8003be0 <HAL_RCC_ClockConfig+0x1c4>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f023 0203 	bic.w	r2, r3, #3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	4936      	ldr	r1, [pc, #216]	; (8003be0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b0c:	f7fe fcb0 	bl	8002470 <HAL_GetTick>
 8003b10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b12:	e00a      	b.n	8003b2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b14:	f7fe fcac 	bl	8002470 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e053      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2a:	4b2d      	ldr	r3, [pc, #180]	; (8003be0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f003 020c 	and.w	r2, r3, #12
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d1eb      	bne.n	8003b14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b3c:	4b27      	ldr	r3, [pc, #156]	; (8003bdc <HAL_RCC_ClockConfig+0x1c0>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d210      	bcs.n	8003b6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b4a:	4b24      	ldr	r3, [pc, #144]	; (8003bdc <HAL_RCC_ClockConfig+0x1c0>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f023 0207 	bic.w	r2, r3, #7
 8003b52:	4922      	ldr	r1, [pc, #136]	; (8003bdc <HAL_RCC_ClockConfig+0x1c0>)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b5a:	4b20      	ldr	r3, [pc, #128]	; (8003bdc <HAL_RCC_ClockConfig+0x1c0>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0307 	and.w	r3, r3, #7
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d001      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e032      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0304 	and.w	r3, r3, #4
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d008      	beq.n	8003b8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b78:	4b19      	ldr	r3, [pc, #100]	; (8003be0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	4916      	ldr	r1, [pc, #88]	; (8003be0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0308 	and.w	r3, r3, #8
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d009      	beq.n	8003baa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b96:	4b12      	ldr	r3, [pc, #72]	; (8003be0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	490e      	ldr	r1, [pc, #56]	; (8003be0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003baa:	f000 f821 	bl	8003bf0 <HAL_RCC_GetSysClockFreq>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	4b0b      	ldr	r3, [pc, #44]	; (8003be0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	091b      	lsrs	r3, r3, #4
 8003bb6:	f003 030f 	and.w	r3, r3, #15
 8003bba:	490a      	ldr	r1, [pc, #40]	; (8003be4 <HAL_RCC_ClockConfig+0x1c8>)
 8003bbc:	5ccb      	ldrb	r3, [r1, r3]
 8003bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8003bc2:	4a09      	ldr	r2, [pc, #36]	; (8003be8 <HAL_RCC_ClockConfig+0x1cc>)
 8003bc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003bc6:	4b09      	ldr	r3, [pc, #36]	; (8003bec <HAL_RCC_ClockConfig+0x1d0>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fe fc0e 	bl	80023ec <HAL_InitTick>

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	40022000 	.word	0x40022000
 8003be0:	40021000 	.word	0x40021000
 8003be4:	0800852c 	.word	0x0800852c
 8003be8:	20000010 	.word	0x20000010
 8003bec:	20000014 	.word	0x20000014

08003bf0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bf0:	b490      	push	{r4, r7}
 8003bf2:	b08a      	sub	sp, #40	; 0x28
 8003bf4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003bf6:	4b2a      	ldr	r3, [pc, #168]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003bf8:	1d3c      	adds	r4, r7, #4
 8003bfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003c00:	f240 2301 	movw	r3, #513	; 0x201
 8003c04:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c06:	2300      	movs	r3, #0
 8003c08:	61fb      	str	r3, [r7, #28]
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	61bb      	str	r3, [r7, #24]
 8003c0e:	2300      	movs	r3, #0
 8003c10:	627b      	str	r3, [r7, #36]	; 0x24
 8003c12:	2300      	movs	r3, #0
 8003c14:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003c16:	2300      	movs	r3, #0
 8003c18:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c1a:	4b22      	ldr	r3, [pc, #136]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	f003 030c 	and.w	r3, r3, #12
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d002      	beq.n	8003c30 <HAL_RCC_GetSysClockFreq+0x40>
 8003c2a:	2b08      	cmp	r3, #8
 8003c2c:	d003      	beq.n	8003c36 <HAL_RCC_GetSysClockFreq+0x46>
 8003c2e:	e02d      	b.n	8003c8c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c30:	4b1d      	ldr	r3, [pc, #116]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c32:	623b      	str	r3, [r7, #32]
      break;
 8003c34:	e02d      	b.n	8003c92 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	0c9b      	lsrs	r3, r3, #18
 8003c3a:	f003 030f 	and.w	r3, r3, #15
 8003c3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003c42:	4413      	add	r3, r2
 8003c44:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003c48:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d013      	beq.n	8003c7c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c54:	4b13      	ldr	r3, [pc, #76]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	0c5b      	lsrs	r3, r3, #17
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003c62:	4413      	add	r3, r2
 8003c64:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c68:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	4a0e      	ldr	r2, [pc, #56]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c6e:	fb02 f203 	mul.w	r2, r2, r3
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c78:	627b      	str	r3, [r7, #36]	; 0x24
 8003c7a:	e004      	b.n	8003c86 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	4a0b      	ldr	r2, [pc, #44]	; (8003cac <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c80:	fb02 f303 	mul.w	r3, r2, r3
 8003c84:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	623b      	str	r3, [r7, #32]
      break;
 8003c8a:	e002      	b.n	8003c92 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c8c:	4b06      	ldr	r3, [pc, #24]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c8e:	623b      	str	r3, [r7, #32]
      break;
 8003c90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c92:	6a3b      	ldr	r3, [r7, #32]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3728      	adds	r7, #40	; 0x28
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bc90      	pop	{r4, r7}
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	08007054 	.word	0x08007054
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	007a1200 	.word	0x007a1200
 8003cac:	003d0900 	.word	0x003d0900

08003cb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cb4:	4b02      	ldr	r3, [pc, #8]	; (8003cc0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bc80      	pop	{r7}
 8003cbe:	4770      	bx	lr
 8003cc0:	20000010 	.word	0x20000010

08003cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cc8:	f7ff fff2 	bl	8003cb0 <HAL_RCC_GetHCLKFreq>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	4b05      	ldr	r3, [pc, #20]	; (8003ce4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	0a1b      	lsrs	r3, r3, #8
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	4903      	ldr	r1, [pc, #12]	; (8003ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cda:	5ccb      	ldrb	r3, [r1, r3]
 8003cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	0800853c 	.word	0x0800853c

08003cec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003cf4:	4b0a      	ldr	r3, [pc, #40]	; (8003d20 <RCC_Delay+0x34>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a0a      	ldr	r2, [pc, #40]	; (8003d24 <RCC_Delay+0x38>)
 8003cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfe:	0a5b      	lsrs	r3, r3, #9
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	fb02 f303 	mul.w	r3, r2, r3
 8003d06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d08:	bf00      	nop
  }
  while (Delay --);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	1e5a      	subs	r2, r3, #1
 8003d0e:	60fa      	str	r2, [r7, #12]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1f9      	bne.n	8003d08 <RCC_Delay+0x1c>
}
 8003d14:	bf00      	nop
 8003d16:	bf00      	nop
 8003d18:	3714      	adds	r7, #20
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bc80      	pop	{r7}
 8003d1e:	4770      	bx	lr
 8003d20:	20000010 	.word	0x20000010
 8003d24:	10624dd3 	.word	0x10624dd3

08003d28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e041      	b.n	8003dbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d106      	bne.n	8003d54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7fe faf2 	bl	8002338 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	3304      	adds	r3, #4
 8003d64:	4619      	mov	r1, r3
 8003d66:	4610      	mov	r0, r2
 8003d68:	f000 f93c 	bl	8003fe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
	...

08003dc8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d001      	beq.n	8003de0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e032      	b.n	8003e46 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a18      	ldr	r2, [pc, #96]	; (8003e50 <HAL_TIM_Base_Start+0x88>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d00e      	beq.n	8003e10 <HAL_TIM_Base_Start+0x48>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dfa:	d009      	beq.n	8003e10 <HAL_TIM_Base_Start+0x48>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a14      	ldr	r2, [pc, #80]	; (8003e54 <HAL_TIM_Base_Start+0x8c>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d004      	beq.n	8003e10 <HAL_TIM_Base_Start+0x48>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a13      	ldr	r2, [pc, #76]	; (8003e58 <HAL_TIM_Base_Start+0x90>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d111      	bne.n	8003e34 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 0307 	and.w	r3, r3, #7
 8003e1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2b06      	cmp	r3, #6
 8003e20:	d010      	beq.n	8003e44 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f042 0201 	orr.w	r2, r2, #1
 8003e30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e32:	e007      	b.n	8003e44 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f042 0201 	orr.w	r2, r2, #1
 8003e42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bc80      	pop	{r7}
 8003e4e:	4770      	bx	lr
 8003e50:	40012c00 	.word	0x40012c00
 8003e54:	40000400 	.word	0x40000400
 8003e58:	40000800 	.word	0x40000800

08003e5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d101      	bne.n	8003e74 <HAL_TIM_ConfigClockSource+0x18>
 8003e70:	2302      	movs	r3, #2
 8003e72:	e0b3      	b.n	8003fdc <HAL_TIM_ConfigClockSource+0x180>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e9a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eac:	d03e      	beq.n	8003f2c <HAL_TIM_ConfigClockSource+0xd0>
 8003eae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eb2:	f200 8087 	bhi.w	8003fc4 <HAL_TIM_ConfigClockSource+0x168>
 8003eb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eba:	f000 8085 	beq.w	8003fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec2:	d87f      	bhi.n	8003fc4 <HAL_TIM_ConfigClockSource+0x168>
 8003ec4:	2b70      	cmp	r3, #112	; 0x70
 8003ec6:	d01a      	beq.n	8003efe <HAL_TIM_ConfigClockSource+0xa2>
 8003ec8:	2b70      	cmp	r3, #112	; 0x70
 8003eca:	d87b      	bhi.n	8003fc4 <HAL_TIM_ConfigClockSource+0x168>
 8003ecc:	2b60      	cmp	r3, #96	; 0x60
 8003ece:	d050      	beq.n	8003f72 <HAL_TIM_ConfigClockSource+0x116>
 8003ed0:	2b60      	cmp	r3, #96	; 0x60
 8003ed2:	d877      	bhi.n	8003fc4 <HAL_TIM_ConfigClockSource+0x168>
 8003ed4:	2b50      	cmp	r3, #80	; 0x50
 8003ed6:	d03c      	beq.n	8003f52 <HAL_TIM_ConfigClockSource+0xf6>
 8003ed8:	2b50      	cmp	r3, #80	; 0x50
 8003eda:	d873      	bhi.n	8003fc4 <HAL_TIM_ConfigClockSource+0x168>
 8003edc:	2b40      	cmp	r3, #64	; 0x40
 8003ede:	d058      	beq.n	8003f92 <HAL_TIM_ConfigClockSource+0x136>
 8003ee0:	2b40      	cmp	r3, #64	; 0x40
 8003ee2:	d86f      	bhi.n	8003fc4 <HAL_TIM_ConfigClockSource+0x168>
 8003ee4:	2b30      	cmp	r3, #48	; 0x30
 8003ee6:	d064      	beq.n	8003fb2 <HAL_TIM_ConfigClockSource+0x156>
 8003ee8:	2b30      	cmp	r3, #48	; 0x30
 8003eea:	d86b      	bhi.n	8003fc4 <HAL_TIM_ConfigClockSource+0x168>
 8003eec:	2b20      	cmp	r3, #32
 8003eee:	d060      	beq.n	8003fb2 <HAL_TIM_ConfigClockSource+0x156>
 8003ef0:	2b20      	cmp	r3, #32
 8003ef2:	d867      	bhi.n	8003fc4 <HAL_TIM_ConfigClockSource+0x168>
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d05c      	beq.n	8003fb2 <HAL_TIM_ConfigClockSource+0x156>
 8003ef8:	2b10      	cmp	r3, #16
 8003efa:	d05a      	beq.n	8003fb2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003efc:	e062      	b.n	8003fc4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6818      	ldr	r0, [r3, #0]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	6899      	ldr	r1, [r3, #8]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f000 f942 	bl	8004196 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f20:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	609a      	str	r2, [r3, #8]
      break;
 8003f2a:	e04e      	b.n	8003fca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6818      	ldr	r0, [r3, #0]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	6899      	ldr	r1, [r3, #8]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	f000 f92b 	bl	8004196 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689a      	ldr	r2, [r3, #8]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f4e:	609a      	str	r2, [r3, #8]
      break;
 8003f50:	e03b      	b.n	8003fca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6818      	ldr	r0, [r3, #0]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	6859      	ldr	r1, [r3, #4]
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	f000 f8a2 	bl	80040a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2150      	movs	r1, #80	; 0x50
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 f8f9 	bl	8004162 <TIM_ITRx_SetConfig>
      break;
 8003f70:	e02b      	b.n	8003fca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6818      	ldr	r0, [r3, #0]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	6859      	ldr	r1, [r3, #4]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	f000 f8c0 	bl	8004104 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2160      	movs	r1, #96	; 0x60
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 f8e9 	bl	8004162 <TIM_ITRx_SetConfig>
      break;
 8003f90:	e01b      	b.n	8003fca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6818      	ldr	r0, [r3, #0]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	6859      	ldr	r1, [r3, #4]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	f000 f882 	bl	80040a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2140      	movs	r1, #64	; 0x40
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 f8d9 	bl	8004162 <TIM_ITRx_SetConfig>
      break;
 8003fb0:	e00b      	b.n	8003fca <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4619      	mov	r1, r3
 8003fbc:	4610      	mov	r0, r2
 8003fbe:	f000 f8d0 	bl	8004162 <TIM_ITRx_SetConfig>
        break;
 8003fc2:	e002      	b.n	8003fca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003fc4:	bf00      	nop
 8003fc6:	e000      	b.n	8003fca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003fc8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a29      	ldr	r2, [pc, #164]	; (800409c <TIM_Base_SetConfig+0xb8>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d00b      	beq.n	8004014 <TIM_Base_SetConfig+0x30>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004002:	d007      	beq.n	8004014 <TIM_Base_SetConfig+0x30>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a26      	ldr	r2, [pc, #152]	; (80040a0 <TIM_Base_SetConfig+0xbc>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d003      	beq.n	8004014 <TIM_Base_SetConfig+0x30>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a25      	ldr	r2, [pc, #148]	; (80040a4 <TIM_Base_SetConfig+0xc0>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d108      	bne.n	8004026 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800401a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	4313      	orrs	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a1c      	ldr	r2, [pc, #112]	; (800409c <TIM_Base_SetConfig+0xb8>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d00b      	beq.n	8004046 <TIM_Base_SetConfig+0x62>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004034:	d007      	beq.n	8004046 <TIM_Base_SetConfig+0x62>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a19      	ldr	r2, [pc, #100]	; (80040a0 <TIM_Base_SetConfig+0xbc>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d003      	beq.n	8004046 <TIM_Base_SetConfig+0x62>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a18      	ldr	r2, [pc, #96]	; (80040a4 <TIM_Base_SetConfig+0xc0>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d108      	bne.n	8004058 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800404c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	4313      	orrs	r3, r2
 8004056:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	4313      	orrs	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a07      	ldr	r2, [pc, #28]	; (800409c <TIM_Base_SetConfig+0xb8>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d103      	bne.n	800408c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	691a      	ldr	r2, [r3, #16]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	615a      	str	r2, [r3, #20]
}
 8004092:	bf00      	nop
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	bc80      	pop	{r7}
 800409a:	4770      	bx	lr
 800409c:	40012c00 	.word	0x40012c00
 80040a0:	40000400 	.word	0x40000400
 80040a4:	40000800 	.word	0x40000800

080040a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	f023 0201 	bic.w	r2, r3, #1
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	4313      	orrs	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f023 030a 	bic.w	r3, r3, #10
 80040e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	621a      	str	r2, [r3, #32]
}
 80040fa:	bf00      	nop
 80040fc:	371c      	adds	r7, #28
 80040fe:	46bd      	mov	sp, r7
 8004100:	bc80      	pop	{r7}
 8004102:	4770      	bx	lr

08004104 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004104:	b480      	push	{r7}
 8004106:	b087      	sub	sp, #28
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	f023 0210 	bic.w	r2, r3, #16
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800412e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	031b      	lsls	r3, r3, #12
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	4313      	orrs	r3, r2
 8004138:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004140:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	4313      	orrs	r3, r2
 800414a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	621a      	str	r2, [r3, #32]
}
 8004158:	bf00      	nop
 800415a:	371c      	adds	r7, #28
 800415c:	46bd      	mov	sp, r7
 800415e:	bc80      	pop	{r7}
 8004160:	4770      	bx	lr

08004162 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004162:	b480      	push	{r7}
 8004164:	b085      	sub	sp, #20
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
 800416a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004178:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4313      	orrs	r3, r2
 8004180:	f043 0307 	orr.w	r3, r3, #7
 8004184:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	609a      	str	r2, [r3, #8]
}
 800418c:	bf00      	nop
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	bc80      	pop	{r7}
 8004194:	4770      	bx	lr

08004196 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004196:	b480      	push	{r7}
 8004198:	b087      	sub	sp, #28
 800419a:	af00      	add	r7, sp, #0
 800419c:	60f8      	str	r0, [r7, #12]
 800419e:	60b9      	str	r1, [r7, #8]
 80041a0:	607a      	str	r2, [r7, #4]
 80041a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	021a      	lsls	r2, r3, #8
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	431a      	orrs	r2, r3
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	4313      	orrs	r3, r2
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	609a      	str	r2, [r3, #8]
}
 80041ca:	bf00      	nop
 80041cc:	371c      	adds	r7, #28
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bc80      	pop	{r7}
 80041d2:	4770      	bx	lr

080041d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d101      	bne.n	80041ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041e8:	2302      	movs	r3, #2
 80041ea:	e046      	b.n	800427a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2202      	movs	r2, #2
 80041f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004212:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	4313      	orrs	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a16      	ldr	r2, [pc, #88]	; (8004284 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d00e      	beq.n	800424e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004238:	d009      	beq.n	800424e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a12      	ldr	r2, [pc, #72]	; (8004288 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d004      	beq.n	800424e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a10      	ldr	r2, [pc, #64]	; (800428c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d10c      	bne.n	8004268 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004254:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	4313      	orrs	r3, r2
 800425e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3714      	adds	r7, #20
 800427e:	46bd      	mov	sp, r7
 8004280:	bc80      	pop	{r7}
 8004282:	4770      	bx	lr
 8004284:	40012c00 	.word	0x40012c00
 8004288:	40000400 	.word	0x40000400
 800428c:	40000800 	.word	0x40000800

08004290 <__errno>:
 8004290:	4b01      	ldr	r3, [pc, #4]	; (8004298 <__errno+0x8>)
 8004292:	6818      	ldr	r0, [r3, #0]
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	2000001c 	.word	0x2000001c

0800429c <__libc_init_array>:
 800429c:	b570      	push	{r4, r5, r6, lr}
 800429e:	2600      	movs	r6, #0
 80042a0:	4d0c      	ldr	r5, [pc, #48]	; (80042d4 <__libc_init_array+0x38>)
 80042a2:	4c0d      	ldr	r4, [pc, #52]	; (80042d8 <__libc_init_array+0x3c>)
 80042a4:	1b64      	subs	r4, r4, r5
 80042a6:	10a4      	asrs	r4, r4, #2
 80042a8:	42a6      	cmp	r6, r4
 80042aa:	d109      	bne.n	80042c0 <__libc_init_array+0x24>
 80042ac:	f002 feba 	bl	8007024 <_init>
 80042b0:	2600      	movs	r6, #0
 80042b2:	4d0a      	ldr	r5, [pc, #40]	; (80042dc <__libc_init_array+0x40>)
 80042b4:	4c0a      	ldr	r4, [pc, #40]	; (80042e0 <__libc_init_array+0x44>)
 80042b6:	1b64      	subs	r4, r4, r5
 80042b8:	10a4      	asrs	r4, r4, #2
 80042ba:	42a6      	cmp	r6, r4
 80042bc:	d105      	bne.n	80042ca <__libc_init_array+0x2e>
 80042be:	bd70      	pop	{r4, r5, r6, pc}
 80042c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80042c4:	4798      	blx	r3
 80042c6:	3601      	adds	r6, #1
 80042c8:	e7ee      	b.n	80042a8 <__libc_init_array+0xc>
 80042ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80042ce:	4798      	blx	r3
 80042d0:	3601      	adds	r6, #1
 80042d2:	e7f2      	b.n	80042ba <__libc_init_array+0x1e>
 80042d4:	08008924 	.word	0x08008924
 80042d8:	08008924 	.word	0x08008924
 80042dc:	08008924 	.word	0x08008924
 80042e0:	08008928 	.word	0x08008928

080042e4 <memset>:
 80042e4:	4603      	mov	r3, r0
 80042e6:	4402      	add	r2, r0
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d100      	bne.n	80042ee <memset+0xa>
 80042ec:	4770      	bx	lr
 80042ee:	f803 1b01 	strb.w	r1, [r3], #1
 80042f2:	e7f9      	b.n	80042e8 <memset+0x4>

080042f4 <__cvt>:
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042fa:	461f      	mov	r7, r3
 80042fc:	bfbb      	ittet	lt
 80042fe:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004302:	461f      	movlt	r7, r3
 8004304:	2300      	movge	r3, #0
 8004306:	232d      	movlt	r3, #45	; 0x2d
 8004308:	b088      	sub	sp, #32
 800430a:	4614      	mov	r4, r2
 800430c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800430e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004310:	7013      	strb	r3, [r2, #0]
 8004312:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004314:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004318:	f023 0820 	bic.w	r8, r3, #32
 800431c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004320:	d005      	beq.n	800432e <__cvt+0x3a>
 8004322:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004326:	d100      	bne.n	800432a <__cvt+0x36>
 8004328:	3501      	adds	r5, #1
 800432a:	2302      	movs	r3, #2
 800432c:	e000      	b.n	8004330 <__cvt+0x3c>
 800432e:	2303      	movs	r3, #3
 8004330:	aa07      	add	r2, sp, #28
 8004332:	9204      	str	r2, [sp, #16]
 8004334:	aa06      	add	r2, sp, #24
 8004336:	e9cd a202 	strd	sl, r2, [sp, #8]
 800433a:	e9cd 3500 	strd	r3, r5, [sp]
 800433e:	4622      	mov	r2, r4
 8004340:	463b      	mov	r3, r7
 8004342:	f000 fce5 	bl	8004d10 <_dtoa_r>
 8004346:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800434a:	4606      	mov	r6, r0
 800434c:	d102      	bne.n	8004354 <__cvt+0x60>
 800434e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004350:	07db      	lsls	r3, r3, #31
 8004352:	d522      	bpl.n	800439a <__cvt+0xa6>
 8004354:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004358:	eb06 0905 	add.w	r9, r6, r5
 800435c:	d110      	bne.n	8004380 <__cvt+0x8c>
 800435e:	7833      	ldrb	r3, [r6, #0]
 8004360:	2b30      	cmp	r3, #48	; 0x30
 8004362:	d10a      	bne.n	800437a <__cvt+0x86>
 8004364:	2200      	movs	r2, #0
 8004366:	2300      	movs	r3, #0
 8004368:	4620      	mov	r0, r4
 800436a:	4639      	mov	r1, r7
 800436c:	f7fc fbd0 	bl	8000b10 <__aeabi_dcmpeq>
 8004370:	b918      	cbnz	r0, 800437a <__cvt+0x86>
 8004372:	f1c5 0501 	rsb	r5, r5, #1
 8004376:	f8ca 5000 	str.w	r5, [sl]
 800437a:	f8da 3000 	ldr.w	r3, [sl]
 800437e:	4499      	add	r9, r3
 8004380:	2200      	movs	r2, #0
 8004382:	2300      	movs	r3, #0
 8004384:	4620      	mov	r0, r4
 8004386:	4639      	mov	r1, r7
 8004388:	f7fc fbc2 	bl	8000b10 <__aeabi_dcmpeq>
 800438c:	b108      	cbz	r0, 8004392 <__cvt+0x9e>
 800438e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004392:	2230      	movs	r2, #48	; 0x30
 8004394:	9b07      	ldr	r3, [sp, #28]
 8004396:	454b      	cmp	r3, r9
 8004398:	d307      	bcc.n	80043aa <__cvt+0xb6>
 800439a:	4630      	mov	r0, r6
 800439c:	9b07      	ldr	r3, [sp, #28]
 800439e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80043a0:	1b9b      	subs	r3, r3, r6
 80043a2:	6013      	str	r3, [r2, #0]
 80043a4:	b008      	add	sp, #32
 80043a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043aa:	1c59      	adds	r1, r3, #1
 80043ac:	9107      	str	r1, [sp, #28]
 80043ae:	701a      	strb	r2, [r3, #0]
 80043b0:	e7f0      	b.n	8004394 <__cvt+0xa0>

080043b2 <__exponent>:
 80043b2:	4603      	mov	r3, r0
 80043b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043b6:	2900      	cmp	r1, #0
 80043b8:	f803 2b02 	strb.w	r2, [r3], #2
 80043bc:	bfb6      	itet	lt
 80043be:	222d      	movlt	r2, #45	; 0x2d
 80043c0:	222b      	movge	r2, #43	; 0x2b
 80043c2:	4249      	neglt	r1, r1
 80043c4:	2909      	cmp	r1, #9
 80043c6:	7042      	strb	r2, [r0, #1]
 80043c8:	dd2b      	ble.n	8004422 <__exponent+0x70>
 80043ca:	f10d 0407 	add.w	r4, sp, #7
 80043ce:	46a4      	mov	ip, r4
 80043d0:	270a      	movs	r7, #10
 80043d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80043d6:	460a      	mov	r2, r1
 80043d8:	46a6      	mov	lr, r4
 80043da:	fb07 1516 	mls	r5, r7, r6, r1
 80043de:	2a63      	cmp	r2, #99	; 0x63
 80043e0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80043e4:	4631      	mov	r1, r6
 80043e6:	f104 34ff 	add.w	r4, r4, #4294967295
 80043ea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80043ee:	dcf0      	bgt.n	80043d2 <__exponent+0x20>
 80043f0:	3130      	adds	r1, #48	; 0x30
 80043f2:	f1ae 0502 	sub.w	r5, lr, #2
 80043f6:	f804 1c01 	strb.w	r1, [r4, #-1]
 80043fa:	4629      	mov	r1, r5
 80043fc:	1c44      	adds	r4, r0, #1
 80043fe:	4561      	cmp	r1, ip
 8004400:	d30a      	bcc.n	8004418 <__exponent+0x66>
 8004402:	f10d 0209 	add.w	r2, sp, #9
 8004406:	eba2 020e 	sub.w	r2, r2, lr
 800440a:	4565      	cmp	r5, ip
 800440c:	bf88      	it	hi
 800440e:	2200      	movhi	r2, #0
 8004410:	4413      	add	r3, r2
 8004412:	1a18      	subs	r0, r3, r0
 8004414:	b003      	add	sp, #12
 8004416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004418:	f811 2b01 	ldrb.w	r2, [r1], #1
 800441c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004420:	e7ed      	b.n	80043fe <__exponent+0x4c>
 8004422:	2330      	movs	r3, #48	; 0x30
 8004424:	3130      	adds	r1, #48	; 0x30
 8004426:	7083      	strb	r3, [r0, #2]
 8004428:	70c1      	strb	r1, [r0, #3]
 800442a:	1d03      	adds	r3, r0, #4
 800442c:	e7f1      	b.n	8004412 <__exponent+0x60>
	...

08004430 <_printf_float>:
 8004430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004434:	b091      	sub	sp, #68	; 0x44
 8004436:	460c      	mov	r4, r1
 8004438:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800443c:	4616      	mov	r6, r2
 800443e:	461f      	mov	r7, r3
 8004440:	4605      	mov	r5, r0
 8004442:	f001 fa53 	bl	80058ec <_localeconv_r>
 8004446:	6803      	ldr	r3, [r0, #0]
 8004448:	4618      	mov	r0, r3
 800444a:	9309      	str	r3, [sp, #36]	; 0x24
 800444c:	f7fb fe80 	bl	8000150 <strlen>
 8004450:	2300      	movs	r3, #0
 8004452:	930e      	str	r3, [sp, #56]	; 0x38
 8004454:	f8d8 3000 	ldr.w	r3, [r8]
 8004458:	900a      	str	r0, [sp, #40]	; 0x28
 800445a:	3307      	adds	r3, #7
 800445c:	f023 0307 	bic.w	r3, r3, #7
 8004460:	f103 0208 	add.w	r2, r3, #8
 8004464:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004468:	f8d4 b000 	ldr.w	fp, [r4]
 800446c:	f8c8 2000 	str.w	r2, [r8]
 8004470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004474:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004478:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800447c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004480:	930b      	str	r3, [sp, #44]	; 0x2c
 8004482:	f04f 32ff 	mov.w	r2, #4294967295
 8004486:	4640      	mov	r0, r8
 8004488:	4b9c      	ldr	r3, [pc, #624]	; (80046fc <_printf_float+0x2cc>)
 800448a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800448c:	f7fc fb72 	bl	8000b74 <__aeabi_dcmpun>
 8004490:	bb70      	cbnz	r0, 80044f0 <_printf_float+0xc0>
 8004492:	f04f 32ff 	mov.w	r2, #4294967295
 8004496:	4640      	mov	r0, r8
 8004498:	4b98      	ldr	r3, [pc, #608]	; (80046fc <_printf_float+0x2cc>)
 800449a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800449c:	f7fc fb4c 	bl	8000b38 <__aeabi_dcmple>
 80044a0:	bb30      	cbnz	r0, 80044f0 <_printf_float+0xc0>
 80044a2:	2200      	movs	r2, #0
 80044a4:	2300      	movs	r3, #0
 80044a6:	4640      	mov	r0, r8
 80044a8:	4651      	mov	r1, sl
 80044aa:	f7fc fb3b 	bl	8000b24 <__aeabi_dcmplt>
 80044ae:	b110      	cbz	r0, 80044b6 <_printf_float+0x86>
 80044b0:	232d      	movs	r3, #45	; 0x2d
 80044b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044b6:	4b92      	ldr	r3, [pc, #584]	; (8004700 <_printf_float+0x2d0>)
 80044b8:	4892      	ldr	r0, [pc, #584]	; (8004704 <_printf_float+0x2d4>)
 80044ba:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80044be:	bf94      	ite	ls
 80044c0:	4698      	movls	r8, r3
 80044c2:	4680      	movhi	r8, r0
 80044c4:	2303      	movs	r3, #3
 80044c6:	f04f 0a00 	mov.w	sl, #0
 80044ca:	6123      	str	r3, [r4, #16]
 80044cc:	f02b 0304 	bic.w	r3, fp, #4
 80044d0:	6023      	str	r3, [r4, #0]
 80044d2:	4633      	mov	r3, r6
 80044d4:	4621      	mov	r1, r4
 80044d6:	4628      	mov	r0, r5
 80044d8:	9700      	str	r7, [sp, #0]
 80044da:	aa0f      	add	r2, sp, #60	; 0x3c
 80044dc:	f000 f9d4 	bl	8004888 <_printf_common>
 80044e0:	3001      	adds	r0, #1
 80044e2:	f040 8090 	bne.w	8004606 <_printf_float+0x1d6>
 80044e6:	f04f 30ff 	mov.w	r0, #4294967295
 80044ea:	b011      	add	sp, #68	; 0x44
 80044ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044f0:	4642      	mov	r2, r8
 80044f2:	4653      	mov	r3, sl
 80044f4:	4640      	mov	r0, r8
 80044f6:	4651      	mov	r1, sl
 80044f8:	f7fc fb3c 	bl	8000b74 <__aeabi_dcmpun>
 80044fc:	b148      	cbz	r0, 8004512 <_printf_float+0xe2>
 80044fe:	f1ba 0f00 	cmp.w	sl, #0
 8004502:	bfb8      	it	lt
 8004504:	232d      	movlt	r3, #45	; 0x2d
 8004506:	4880      	ldr	r0, [pc, #512]	; (8004708 <_printf_float+0x2d8>)
 8004508:	bfb8      	it	lt
 800450a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800450e:	4b7f      	ldr	r3, [pc, #508]	; (800470c <_printf_float+0x2dc>)
 8004510:	e7d3      	b.n	80044ba <_printf_float+0x8a>
 8004512:	6863      	ldr	r3, [r4, #4]
 8004514:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004518:	1c5a      	adds	r2, r3, #1
 800451a:	d142      	bne.n	80045a2 <_printf_float+0x172>
 800451c:	2306      	movs	r3, #6
 800451e:	6063      	str	r3, [r4, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	9206      	str	r2, [sp, #24]
 8004524:	aa0e      	add	r2, sp, #56	; 0x38
 8004526:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800452a:	aa0d      	add	r2, sp, #52	; 0x34
 800452c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004530:	9203      	str	r2, [sp, #12]
 8004532:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004536:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800453a:	6023      	str	r3, [r4, #0]
 800453c:	6863      	ldr	r3, [r4, #4]
 800453e:	4642      	mov	r2, r8
 8004540:	9300      	str	r3, [sp, #0]
 8004542:	4628      	mov	r0, r5
 8004544:	4653      	mov	r3, sl
 8004546:	910b      	str	r1, [sp, #44]	; 0x2c
 8004548:	f7ff fed4 	bl	80042f4 <__cvt>
 800454c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800454e:	4680      	mov	r8, r0
 8004550:	2947      	cmp	r1, #71	; 0x47
 8004552:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004554:	d108      	bne.n	8004568 <_printf_float+0x138>
 8004556:	1cc8      	adds	r0, r1, #3
 8004558:	db02      	blt.n	8004560 <_printf_float+0x130>
 800455a:	6863      	ldr	r3, [r4, #4]
 800455c:	4299      	cmp	r1, r3
 800455e:	dd40      	ble.n	80045e2 <_printf_float+0x1b2>
 8004560:	f1a9 0902 	sub.w	r9, r9, #2
 8004564:	fa5f f989 	uxtb.w	r9, r9
 8004568:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800456c:	d81f      	bhi.n	80045ae <_printf_float+0x17e>
 800456e:	464a      	mov	r2, r9
 8004570:	3901      	subs	r1, #1
 8004572:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004576:	910d      	str	r1, [sp, #52]	; 0x34
 8004578:	f7ff ff1b 	bl	80043b2 <__exponent>
 800457c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800457e:	4682      	mov	sl, r0
 8004580:	1813      	adds	r3, r2, r0
 8004582:	2a01      	cmp	r2, #1
 8004584:	6123      	str	r3, [r4, #16]
 8004586:	dc02      	bgt.n	800458e <_printf_float+0x15e>
 8004588:	6822      	ldr	r2, [r4, #0]
 800458a:	07d2      	lsls	r2, r2, #31
 800458c:	d501      	bpl.n	8004592 <_printf_float+0x162>
 800458e:	3301      	adds	r3, #1
 8004590:	6123      	str	r3, [r4, #16]
 8004592:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004596:	2b00      	cmp	r3, #0
 8004598:	d09b      	beq.n	80044d2 <_printf_float+0xa2>
 800459a:	232d      	movs	r3, #45	; 0x2d
 800459c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045a0:	e797      	b.n	80044d2 <_printf_float+0xa2>
 80045a2:	2947      	cmp	r1, #71	; 0x47
 80045a4:	d1bc      	bne.n	8004520 <_printf_float+0xf0>
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1ba      	bne.n	8004520 <_printf_float+0xf0>
 80045aa:	2301      	movs	r3, #1
 80045ac:	e7b7      	b.n	800451e <_printf_float+0xee>
 80045ae:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80045b2:	d118      	bne.n	80045e6 <_printf_float+0x1b6>
 80045b4:	2900      	cmp	r1, #0
 80045b6:	6863      	ldr	r3, [r4, #4]
 80045b8:	dd0b      	ble.n	80045d2 <_printf_float+0x1a2>
 80045ba:	6121      	str	r1, [r4, #16]
 80045bc:	b913      	cbnz	r3, 80045c4 <_printf_float+0x194>
 80045be:	6822      	ldr	r2, [r4, #0]
 80045c0:	07d0      	lsls	r0, r2, #31
 80045c2:	d502      	bpl.n	80045ca <_printf_float+0x19a>
 80045c4:	3301      	adds	r3, #1
 80045c6:	440b      	add	r3, r1
 80045c8:	6123      	str	r3, [r4, #16]
 80045ca:	f04f 0a00 	mov.w	sl, #0
 80045ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80045d0:	e7df      	b.n	8004592 <_printf_float+0x162>
 80045d2:	b913      	cbnz	r3, 80045da <_printf_float+0x1aa>
 80045d4:	6822      	ldr	r2, [r4, #0]
 80045d6:	07d2      	lsls	r2, r2, #31
 80045d8:	d501      	bpl.n	80045de <_printf_float+0x1ae>
 80045da:	3302      	adds	r3, #2
 80045dc:	e7f4      	b.n	80045c8 <_printf_float+0x198>
 80045de:	2301      	movs	r3, #1
 80045e0:	e7f2      	b.n	80045c8 <_printf_float+0x198>
 80045e2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80045e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045e8:	4299      	cmp	r1, r3
 80045ea:	db05      	blt.n	80045f8 <_printf_float+0x1c8>
 80045ec:	6823      	ldr	r3, [r4, #0]
 80045ee:	6121      	str	r1, [r4, #16]
 80045f0:	07d8      	lsls	r0, r3, #31
 80045f2:	d5ea      	bpl.n	80045ca <_printf_float+0x19a>
 80045f4:	1c4b      	adds	r3, r1, #1
 80045f6:	e7e7      	b.n	80045c8 <_printf_float+0x198>
 80045f8:	2900      	cmp	r1, #0
 80045fa:	bfcc      	ite	gt
 80045fc:	2201      	movgt	r2, #1
 80045fe:	f1c1 0202 	rsble	r2, r1, #2
 8004602:	4413      	add	r3, r2
 8004604:	e7e0      	b.n	80045c8 <_printf_float+0x198>
 8004606:	6823      	ldr	r3, [r4, #0]
 8004608:	055a      	lsls	r2, r3, #21
 800460a:	d407      	bmi.n	800461c <_printf_float+0x1ec>
 800460c:	6923      	ldr	r3, [r4, #16]
 800460e:	4642      	mov	r2, r8
 8004610:	4631      	mov	r1, r6
 8004612:	4628      	mov	r0, r5
 8004614:	47b8      	blx	r7
 8004616:	3001      	adds	r0, #1
 8004618:	d12b      	bne.n	8004672 <_printf_float+0x242>
 800461a:	e764      	b.n	80044e6 <_printf_float+0xb6>
 800461c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004620:	f240 80dd 	bls.w	80047de <_printf_float+0x3ae>
 8004624:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004628:	2200      	movs	r2, #0
 800462a:	2300      	movs	r3, #0
 800462c:	f7fc fa70 	bl	8000b10 <__aeabi_dcmpeq>
 8004630:	2800      	cmp	r0, #0
 8004632:	d033      	beq.n	800469c <_printf_float+0x26c>
 8004634:	2301      	movs	r3, #1
 8004636:	4631      	mov	r1, r6
 8004638:	4628      	mov	r0, r5
 800463a:	4a35      	ldr	r2, [pc, #212]	; (8004710 <_printf_float+0x2e0>)
 800463c:	47b8      	blx	r7
 800463e:	3001      	adds	r0, #1
 8004640:	f43f af51 	beq.w	80044e6 <_printf_float+0xb6>
 8004644:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004648:	429a      	cmp	r2, r3
 800464a:	db02      	blt.n	8004652 <_printf_float+0x222>
 800464c:	6823      	ldr	r3, [r4, #0]
 800464e:	07d8      	lsls	r0, r3, #31
 8004650:	d50f      	bpl.n	8004672 <_printf_float+0x242>
 8004652:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004656:	4631      	mov	r1, r6
 8004658:	4628      	mov	r0, r5
 800465a:	47b8      	blx	r7
 800465c:	3001      	adds	r0, #1
 800465e:	f43f af42 	beq.w	80044e6 <_printf_float+0xb6>
 8004662:	f04f 0800 	mov.w	r8, #0
 8004666:	f104 091a 	add.w	r9, r4, #26
 800466a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800466c:	3b01      	subs	r3, #1
 800466e:	4543      	cmp	r3, r8
 8004670:	dc09      	bgt.n	8004686 <_printf_float+0x256>
 8004672:	6823      	ldr	r3, [r4, #0]
 8004674:	079b      	lsls	r3, r3, #30
 8004676:	f100 8102 	bmi.w	800487e <_printf_float+0x44e>
 800467a:	68e0      	ldr	r0, [r4, #12]
 800467c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800467e:	4298      	cmp	r0, r3
 8004680:	bfb8      	it	lt
 8004682:	4618      	movlt	r0, r3
 8004684:	e731      	b.n	80044ea <_printf_float+0xba>
 8004686:	2301      	movs	r3, #1
 8004688:	464a      	mov	r2, r9
 800468a:	4631      	mov	r1, r6
 800468c:	4628      	mov	r0, r5
 800468e:	47b8      	blx	r7
 8004690:	3001      	adds	r0, #1
 8004692:	f43f af28 	beq.w	80044e6 <_printf_float+0xb6>
 8004696:	f108 0801 	add.w	r8, r8, #1
 800469a:	e7e6      	b.n	800466a <_printf_float+0x23a>
 800469c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800469e:	2b00      	cmp	r3, #0
 80046a0:	dc38      	bgt.n	8004714 <_printf_float+0x2e4>
 80046a2:	2301      	movs	r3, #1
 80046a4:	4631      	mov	r1, r6
 80046a6:	4628      	mov	r0, r5
 80046a8:	4a19      	ldr	r2, [pc, #100]	; (8004710 <_printf_float+0x2e0>)
 80046aa:	47b8      	blx	r7
 80046ac:	3001      	adds	r0, #1
 80046ae:	f43f af1a 	beq.w	80044e6 <_printf_float+0xb6>
 80046b2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80046b6:	4313      	orrs	r3, r2
 80046b8:	d102      	bne.n	80046c0 <_printf_float+0x290>
 80046ba:	6823      	ldr	r3, [r4, #0]
 80046bc:	07d9      	lsls	r1, r3, #31
 80046be:	d5d8      	bpl.n	8004672 <_printf_float+0x242>
 80046c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046c4:	4631      	mov	r1, r6
 80046c6:	4628      	mov	r0, r5
 80046c8:	47b8      	blx	r7
 80046ca:	3001      	adds	r0, #1
 80046cc:	f43f af0b 	beq.w	80044e6 <_printf_float+0xb6>
 80046d0:	f04f 0900 	mov.w	r9, #0
 80046d4:	f104 0a1a 	add.w	sl, r4, #26
 80046d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046da:	425b      	negs	r3, r3
 80046dc:	454b      	cmp	r3, r9
 80046de:	dc01      	bgt.n	80046e4 <_printf_float+0x2b4>
 80046e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046e2:	e794      	b.n	800460e <_printf_float+0x1de>
 80046e4:	2301      	movs	r3, #1
 80046e6:	4652      	mov	r2, sl
 80046e8:	4631      	mov	r1, r6
 80046ea:	4628      	mov	r0, r5
 80046ec:	47b8      	blx	r7
 80046ee:	3001      	adds	r0, #1
 80046f0:	f43f aef9 	beq.w	80044e6 <_printf_float+0xb6>
 80046f4:	f109 0901 	add.w	r9, r9, #1
 80046f8:	e7ee      	b.n	80046d8 <_printf_float+0x2a8>
 80046fa:	bf00      	nop
 80046fc:	7fefffff 	.word	0x7fefffff
 8004700:	08008548 	.word	0x08008548
 8004704:	0800854c 	.word	0x0800854c
 8004708:	08008554 	.word	0x08008554
 800470c:	08008550 	.word	0x08008550
 8004710:	08008558 	.word	0x08008558
 8004714:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004716:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004718:	429a      	cmp	r2, r3
 800471a:	bfa8      	it	ge
 800471c:	461a      	movge	r2, r3
 800471e:	2a00      	cmp	r2, #0
 8004720:	4691      	mov	r9, r2
 8004722:	dc37      	bgt.n	8004794 <_printf_float+0x364>
 8004724:	f04f 0b00 	mov.w	fp, #0
 8004728:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800472c:	f104 021a 	add.w	r2, r4, #26
 8004730:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004734:	ebaa 0309 	sub.w	r3, sl, r9
 8004738:	455b      	cmp	r3, fp
 800473a:	dc33      	bgt.n	80047a4 <_printf_float+0x374>
 800473c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004740:	429a      	cmp	r2, r3
 8004742:	db3b      	blt.n	80047bc <_printf_float+0x38c>
 8004744:	6823      	ldr	r3, [r4, #0]
 8004746:	07da      	lsls	r2, r3, #31
 8004748:	d438      	bmi.n	80047bc <_printf_float+0x38c>
 800474a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800474c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800474e:	eba2 030a 	sub.w	r3, r2, sl
 8004752:	eba2 0901 	sub.w	r9, r2, r1
 8004756:	4599      	cmp	r9, r3
 8004758:	bfa8      	it	ge
 800475a:	4699      	movge	r9, r3
 800475c:	f1b9 0f00 	cmp.w	r9, #0
 8004760:	dc34      	bgt.n	80047cc <_printf_float+0x39c>
 8004762:	f04f 0800 	mov.w	r8, #0
 8004766:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800476a:	f104 0a1a 	add.w	sl, r4, #26
 800476e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004772:	1a9b      	subs	r3, r3, r2
 8004774:	eba3 0309 	sub.w	r3, r3, r9
 8004778:	4543      	cmp	r3, r8
 800477a:	f77f af7a 	ble.w	8004672 <_printf_float+0x242>
 800477e:	2301      	movs	r3, #1
 8004780:	4652      	mov	r2, sl
 8004782:	4631      	mov	r1, r6
 8004784:	4628      	mov	r0, r5
 8004786:	47b8      	blx	r7
 8004788:	3001      	adds	r0, #1
 800478a:	f43f aeac 	beq.w	80044e6 <_printf_float+0xb6>
 800478e:	f108 0801 	add.w	r8, r8, #1
 8004792:	e7ec      	b.n	800476e <_printf_float+0x33e>
 8004794:	4613      	mov	r3, r2
 8004796:	4631      	mov	r1, r6
 8004798:	4642      	mov	r2, r8
 800479a:	4628      	mov	r0, r5
 800479c:	47b8      	blx	r7
 800479e:	3001      	adds	r0, #1
 80047a0:	d1c0      	bne.n	8004724 <_printf_float+0x2f4>
 80047a2:	e6a0      	b.n	80044e6 <_printf_float+0xb6>
 80047a4:	2301      	movs	r3, #1
 80047a6:	4631      	mov	r1, r6
 80047a8:	4628      	mov	r0, r5
 80047aa:	920b      	str	r2, [sp, #44]	; 0x2c
 80047ac:	47b8      	blx	r7
 80047ae:	3001      	adds	r0, #1
 80047b0:	f43f ae99 	beq.w	80044e6 <_printf_float+0xb6>
 80047b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80047b6:	f10b 0b01 	add.w	fp, fp, #1
 80047ba:	e7b9      	b.n	8004730 <_printf_float+0x300>
 80047bc:	4631      	mov	r1, r6
 80047be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047c2:	4628      	mov	r0, r5
 80047c4:	47b8      	blx	r7
 80047c6:	3001      	adds	r0, #1
 80047c8:	d1bf      	bne.n	800474a <_printf_float+0x31a>
 80047ca:	e68c      	b.n	80044e6 <_printf_float+0xb6>
 80047cc:	464b      	mov	r3, r9
 80047ce:	4631      	mov	r1, r6
 80047d0:	4628      	mov	r0, r5
 80047d2:	eb08 020a 	add.w	r2, r8, sl
 80047d6:	47b8      	blx	r7
 80047d8:	3001      	adds	r0, #1
 80047da:	d1c2      	bne.n	8004762 <_printf_float+0x332>
 80047dc:	e683      	b.n	80044e6 <_printf_float+0xb6>
 80047de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80047e0:	2a01      	cmp	r2, #1
 80047e2:	dc01      	bgt.n	80047e8 <_printf_float+0x3b8>
 80047e4:	07db      	lsls	r3, r3, #31
 80047e6:	d537      	bpl.n	8004858 <_printf_float+0x428>
 80047e8:	2301      	movs	r3, #1
 80047ea:	4642      	mov	r2, r8
 80047ec:	4631      	mov	r1, r6
 80047ee:	4628      	mov	r0, r5
 80047f0:	47b8      	blx	r7
 80047f2:	3001      	adds	r0, #1
 80047f4:	f43f ae77 	beq.w	80044e6 <_printf_float+0xb6>
 80047f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047fc:	4631      	mov	r1, r6
 80047fe:	4628      	mov	r0, r5
 8004800:	47b8      	blx	r7
 8004802:	3001      	adds	r0, #1
 8004804:	f43f ae6f 	beq.w	80044e6 <_printf_float+0xb6>
 8004808:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800480c:	2200      	movs	r2, #0
 800480e:	2300      	movs	r3, #0
 8004810:	f7fc f97e 	bl	8000b10 <__aeabi_dcmpeq>
 8004814:	b9d8      	cbnz	r0, 800484e <_printf_float+0x41e>
 8004816:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004818:	f108 0201 	add.w	r2, r8, #1
 800481c:	3b01      	subs	r3, #1
 800481e:	4631      	mov	r1, r6
 8004820:	4628      	mov	r0, r5
 8004822:	47b8      	blx	r7
 8004824:	3001      	adds	r0, #1
 8004826:	d10e      	bne.n	8004846 <_printf_float+0x416>
 8004828:	e65d      	b.n	80044e6 <_printf_float+0xb6>
 800482a:	2301      	movs	r3, #1
 800482c:	464a      	mov	r2, r9
 800482e:	4631      	mov	r1, r6
 8004830:	4628      	mov	r0, r5
 8004832:	47b8      	blx	r7
 8004834:	3001      	adds	r0, #1
 8004836:	f43f ae56 	beq.w	80044e6 <_printf_float+0xb6>
 800483a:	f108 0801 	add.w	r8, r8, #1
 800483e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004840:	3b01      	subs	r3, #1
 8004842:	4543      	cmp	r3, r8
 8004844:	dcf1      	bgt.n	800482a <_printf_float+0x3fa>
 8004846:	4653      	mov	r3, sl
 8004848:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800484c:	e6e0      	b.n	8004610 <_printf_float+0x1e0>
 800484e:	f04f 0800 	mov.w	r8, #0
 8004852:	f104 091a 	add.w	r9, r4, #26
 8004856:	e7f2      	b.n	800483e <_printf_float+0x40e>
 8004858:	2301      	movs	r3, #1
 800485a:	4642      	mov	r2, r8
 800485c:	e7df      	b.n	800481e <_printf_float+0x3ee>
 800485e:	2301      	movs	r3, #1
 8004860:	464a      	mov	r2, r9
 8004862:	4631      	mov	r1, r6
 8004864:	4628      	mov	r0, r5
 8004866:	47b8      	blx	r7
 8004868:	3001      	adds	r0, #1
 800486a:	f43f ae3c 	beq.w	80044e6 <_printf_float+0xb6>
 800486e:	f108 0801 	add.w	r8, r8, #1
 8004872:	68e3      	ldr	r3, [r4, #12]
 8004874:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004876:	1a5b      	subs	r3, r3, r1
 8004878:	4543      	cmp	r3, r8
 800487a:	dcf0      	bgt.n	800485e <_printf_float+0x42e>
 800487c:	e6fd      	b.n	800467a <_printf_float+0x24a>
 800487e:	f04f 0800 	mov.w	r8, #0
 8004882:	f104 0919 	add.w	r9, r4, #25
 8004886:	e7f4      	b.n	8004872 <_printf_float+0x442>

08004888 <_printf_common>:
 8004888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800488c:	4616      	mov	r6, r2
 800488e:	4699      	mov	r9, r3
 8004890:	688a      	ldr	r2, [r1, #8]
 8004892:	690b      	ldr	r3, [r1, #16]
 8004894:	4607      	mov	r7, r0
 8004896:	4293      	cmp	r3, r2
 8004898:	bfb8      	it	lt
 800489a:	4613      	movlt	r3, r2
 800489c:	6033      	str	r3, [r6, #0]
 800489e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048a2:	460c      	mov	r4, r1
 80048a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048a8:	b10a      	cbz	r2, 80048ae <_printf_common+0x26>
 80048aa:	3301      	adds	r3, #1
 80048ac:	6033      	str	r3, [r6, #0]
 80048ae:	6823      	ldr	r3, [r4, #0]
 80048b0:	0699      	lsls	r1, r3, #26
 80048b2:	bf42      	ittt	mi
 80048b4:	6833      	ldrmi	r3, [r6, #0]
 80048b6:	3302      	addmi	r3, #2
 80048b8:	6033      	strmi	r3, [r6, #0]
 80048ba:	6825      	ldr	r5, [r4, #0]
 80048bc:	f015 0506 	ands.w	r5, r5, #6
 80048c0:	d106      	bne.n	80048d0 <_printf_common+0x48>
 80048c2:	f104 0a19 	add.w	sl, r4, #25
 80048c6:	68e3      	ldr	r3, [r4, #12]
 80048c8:	6832      	ldr	r2, [r6, #0]
 80048ca:	1a9b      	subs	r3, r3, r2
 80048cc:	42ab      	cmp	r3, r5
 80048ce:	dc28      	bgt.n	8004922 <_printf_common+0x9a>
 80048d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80048d4:	1e13      	subs	r3, r2, #0
 80048d6:	6822      	ldr	r2, [r4, #0]
 80048d8:	bf18      	it	ne
 80048da:	2301      	movne	r3, #1
 80048dc:	0692      	lsls	r2, r2, #26
 80048de:	d42d      	bmi.n	800493c <_printf_common+0xb4>
 80048e0:	4649      	mov	r1, r9
 80048e2:	4638      	mov	r0, r7
 80048e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048e8:	47c0      	blx	r8
 80048ea:	3001      	adds	r0, #1
 80048ec:	d020      	beq.n	8004930 <_printf_common+0xa8>
 80048ee:	6823      	ldr	r3, [r4, #0]
 80048f0:	68e5      	ldr	r5, [r4, #12]
 80048f2:	f003 0306 	and.w	r3, r3, #6
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	bf18      	it	ne
 80048fa:	2500      	movne	r5, #0
 80048fc:	6832      	ldr	r2, [r6, #0]
 80048fe:	f04f 0600 	mov.w	r6, #0
 8004902:	68a3      	ldr	r3, [r4, #8]
 8004904:	bf08      	it	eq
 8004906:	1aad      	subeq	r5, r5, r2
 8004908:	6922      	ldr	r2, [r4, #16]
 800490a:	bf08      	it	eq
 800490c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004910:	4293      	cmp	r3, r2
 8004912:	bfc4      	itt	gt
 8004914:	1a9b      	subgt	r3, r3, r2
 8004916:	18ed      	addgt	r5, r5, r3
 8004918:	341a      	adds	r4, #26
 800491a:	42b5      	cmp	r5, r6
 800491c:	d11a      	bne.n	8004954 <_printf_common+0xcc>
 800491e:	2000      	movs	r0, #0
 8004920:	e008      	b.n	8004934 <_printf_common+0xac>
 8004922:	2301      	movs	r3, #1
 8004924:	4652      	mov	r2, sl
 8004926:	4649      	mov	r1, r9
 8004928:	4638      	mov	r0, r7
 800492a:	47c0      	blx	r8
 800492c:	3001      	adds	r0, #1
 800492e:	d103      	bne.n	8004938 <_printf_common+0xb0>
 8004930:	f04f 30ff 	mov.w	r0, #4294967295
 8004934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004938:	3501      	adds	r5, #1
 800493a:	e7c4      	b.n	80048c6 <_printf_common+0x3e>
 800493c:	2030      	movs	r0, #48	; 0x30
 800493e:	18e1      	adds	r1, r4, r3
 8004940:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004944:	1c5a      	adds	r2, r3, #1
 8004946:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800494a:	4422      	add	r2, r4
 800494c:	3302      	adds	r3, #2
 800494e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004952:	e7c5      	b.n	80048e0 <_printf_common+0x58>
 8004954:	2301      	movs	r3, #1
 8004956:	4622      	mov	r2, r4
 8004958:	4649      	mov	r1, r9
 800495a:	4638      	mov	r0, r7
 800495c:	47c0      	blx	r8
 800495e:	3001      	adds	r0, #1
 8004960:	d0e6      	beq.n	8004930 <_printf_common+0xa8>
 8004962:	3601      	adds	r6, #1
 8004964:	e7d9      	b.n	800491a <_printf_common+0x92>
	...

08004968 <_printf_i>:
 8004968:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800496c:	460c      	mov	r4, r1
 800496e:	7e27      	ldrb	r7, [r4, #24]
 8004970:	4691      	mov	r9, r2
 8004972:	2f78      	cmp	r7, #120	; 0x78
 8004974:	4680      	mov	r8, r0
 8004976:	469a      	mov	sl, r3
 8004978:	990c      	ldr	r1, [sp, #48]	; 0x30
 800497a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800497e:	d807      	bhi.n	8004990 <_printf_i+0x28>
 8004980:	2f62      	cmp	r7, #98	; 0x62
 8004982:	d80a      	bhi.n	800499a <_printf_i+0x32>
 8004984:	2f00      	cmp	r7, #0
 8004986:	f000 80d9 	beq.w	8004b3c <_printf_i+0x1d4>
 800498a:	2f58      	cmp	r7, #88	; 0x58
 800498c:	f000 80a4 	beq.w	8004ad8 <_printf_i+0x170>
 8004990:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004994:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004998:	e03a      	b.n	8004a10 <_printf_i+0xa8>
 800499a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800499e:	2b15      	cmp	r3, #21
 80049a0:	d8f6      	bhi.n	8004990 <_printf_i+0x28>
 80049a2:	a001      	add	r0, pc, #4	; (adr r0, 80049a8 <_printf_i+0x40>)
 80049a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80049a8:	08004a01 	.word	0x08004a01
 80049ac:	08004a15 	.word	0x08004a15
 80049b0:	08004991 	.word	0x08004991
 80049b4:	08004991 	.word	0x08004991
 80049b8:	08004991 	.word	0x08004991
 80049bc:	08004991 	.word	0x08004991
 80049c0:	08004a15 	.word	0x08004a15
 80049c4:	08004991 	.word	0x08004991
 80049c8:	08004991 	.word	0x08004991
 80049cc:	08004991 	.word	0x08004991
 80049d0:	08004991 	.word	0x08004991
 80049d4:	08004b23 	.word	0x08004b23
 80049d8:	08004a45 	.word	0x08004a45
 80049dc:	08004b05 	.word	0x08004b05
 80049e0:	08004991 	.word	0x08004991
 80049e4:	08004991 	.word	0x08004991
 80049e8:	08004b45 	.word	0x08004b45
 80049ec:	08004991 	.word	0x08004991
 80049f0:	08004a45 	.word	0x08004a45
 80049f4:	08004991 	.word	0x08004991
 80049f8:	08004991 	.word	0x08004991
 80049fc:	08004b0d 	.word	0x08004b0d
 8004a00:	680b      	ldr	r3, [r1, #0]
 8004a02:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a06:	1d1a      	adds	r2, r3, #4
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	600a      	str	r2, [r1, #0]
 8004a0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a10:	2301      	movs	r3, #1
 8004a12:	e0a4      	b.n	8004b5e <_printf_i+0x1f6>
 8004a14:	6825      	ldr	r5, [r4, #0]
 8004a16:	6808      	ldr	r0, [r1, #0]
 8004a18:	062e      	lsls	r6, r5, #24
 8004a1a:	f100 0304 	add.w	r3, r0, #4
 8004a1e:	d50a      	bpl.n	8004a36 <_printf_i+0xce>
 8004a20:	6805      	ldr	r5, [r0, #0]
 8004a22:	600b      	str	r3, [r1, #0]
 8004a24:	2d00      	cmp	r5, #0
 8004a26:	da03      	bge.n	8004a30 <_printf_i+0xc8>
 8004a28:	232d      	movs	r3, #45	; 0x2d
 8004a2a:	426d      	negs	r5, r5
 8004a2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a30:	230a      	movs	r3, #10
 8004a32:	485e      	ldr	r0, [pc, #376]	; (8004bac <_printf_i+0x244>)
 8004a34:	e019      	b.n	8004a6a <_printf_i+0x102>
 8004a36:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004a3a:	6805      	ldr	r5, [r0, #0]
 8004a3c:	600b      	str	r3, [r1, #0]
 8004a3e:	bf18      	it	ne
 8004a40:	b22d      	sxthne	r5, r5
 8004a42:	e7ef      	b.n	8004a24 <_printf_i+0xbc>
 8004a44:	680b      	ldr	r3, [r1, #0]
 8004a46:	6825      	ldr	r5, [r4, #0]
 8004a48:	1d18      	adds	r0, r3, #4
 8004a4a:	6008      	str	r0, [r1, #0]
 8004a4c:	0628      	lsls	r0, r5, #24
 8004a4e:	d501      	bpl.n	8004a54 <_printf_i+0xec>
 8004a50:	681d      	ldr	r5, [r3, #0]
 8004a52:	e002      	b.n	8004a5a <_printf_i+0xf2>
 8004a54:	0669      	lsls	r1, r5, #25
 8004a56:	d5fb      	bpl.n	8004a50 <_printf_i+0xe8>
 8004a58:	881d      	ldrh	r5, [r3, #0]
 8004a5a:	2f6f      	cmp	r7, #111	; 0x6f
 8004a5c:	bf0c      	ite	eq
 8004a5e:	2308      	moveq	r3, #8
 8004a60:	230a      	movne	r3, #10
 8004a62:	4852      	ldr	r0, [pc, #328]	; (8004bac <_printf_i+0x244>)
 8004a64:	2100      	movs	r1, #0
 8004a66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a6a:	6866      	ldr	r6, [r4, #4]
 8004a6c:	2e00      	cmp	r6, #0
 8004a6e:	bfa8      	it	ge
 8004a70:	6821      	ldrge	r1, [r4, #0]
 8004a72:	60a6      	str	r6, [r4, #8]
 8004a74:	bfa4      	itt	ge
 8004a76:	f021 0104 	bicge.w	r1, r1, #4
 8004a7a:	6021      	strge	r1, [r4, #0]
 8004a7c:	b90d      	cbnz	r5, 8004a82 <_printf_i+0x11a>
 8004a7e:	2e00      	cmp	r6, #0
 8004a80:	d04d      	beq.n	8004b1e <_printf_i+0x1b6>
 8004a82:	4616      	mov	r6, r2
 8004a84:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a88:	fb03 5711 	mls	r7, r3, r1, r5
 8004a8c:	5dc7      	ldrb	r7, [r0, r7]
 8004a8e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a92:	462f      	mov	r7, r5
 8004a94:	42bb      	cmp	r3, r7
 8004a96:	460d      	mov	r5, r1
 8004a98:	d9f4      	bls.n	8004a84 <_printf_i+0x11c>
 8004a9a:	2b08      	cmp	r3, #8
 8004a9c:	d10b      	bne.n	8004ab6 <_printf_i+0x14e>
 8004a9e:	6823      	ldr	r3, [r4, #0]
 8004aa0:	07df      	lsls	r7, r3, #31
 8004aa2:	d508      	bpl.n	8004ab6 <_printf_i+0x14e>
 8004aa4:	6923      	ldr	r3, [r4, #16]
 8004aa6:	6861      	ldr	r1, [r4, #4]
 8004aa8:	4299      	cmp	r1, r3
 8004aaa:	bfde      	ittt	le
 8004aac:	2330      	movle	r3, #48	; 0x30
 8004aae:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ab2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ab6:	1b92      	subs	r2, r2, r6
 8004ab8:	6122      	str	r2, [r4, #16]
 8004aba:	464b      	mov	r3, r9
 8004abc:	4621      	mov	r1, r4
 8004abe:	4640      	mov	r0, r8
 8004ac0:	f8cd a000 	str.w	sl, [sp]
 8004ac4:	aa03      	add	r2, sp, #12
 8004ac6:	f7ff fedf 	bl	8004888 <_printf_common>
 8004aca:	3001      	adds	r0, #1
 8004acc:	d14c      	bne.n	8004b68 <_printf_i+0x200>
 8004ace:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad2:	b004      	add	sp, #16
 8004ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ad8:	4834      	ldr	r0, [pc, #208]	; (8004bac <_printf_i+0x244>)
 8004ada:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004ade:	680e      	ldr	r6, [r1, #0]
 8004ae0:	6823      	ldr	r3, [r4, #0]
 8004ae2:	f856 5b04 	ldr.w	r5, [r6], #4
 8004ae6:	061f      	lsls	r7, r3, #24
 8004ae8:	600e      	str	r6, [r1, #0]
 8004aea:	d514      	bpl.n	8004b16 <_printf_i+0x1ae>
 8004aec:	07d9      	lsls	r1, r3, #31
 8004aee:	bf44      	itt	mi
 8004af0:	f043 0320 	orrmi.w	r3, r3, #32
 8004af4:	6023      	strmi	r3, [r4, #0]
 8004af6:	b91d      	cbnz	r5, 8004b00 <_printf_i+0x198>
 8004af8:	6823      	ldr	r3, [r4, #0]
 8004afa:	f023 0320 	bic.w	r3, r3, #32
 8004afe:	6023      	str	r3, [r4, #0]
 8004b00:	2310      	movs	r3, #16
 8004b02:	e7af      	b.n	8004a64 <_printf_i+0xfc>
 8004b04:	6823      	ldr	r3, [r4, #0]
 8004b06:	f043 0320 	orr.w	r3, r3, #32
 8004b0a:	6023      	str	r3, [r4, #0]
 8004b0c:	2378      	movs	r3, #120	; 0x78
 8004b0e:	4828      	ldr	r0, [pc, #160]	; (8004bb0 <_printf_i+0x248>)
 8004b10:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b14:	e7e3      	b.n	8004ade <_printf_i+0x176>
 8004b16:	065e      	lsls	r6, r3, #25
 8004b18:	bf48      	it	mi
 8004b1a:	b2ad      	uxthmi	r5, r5
 8004b1c:	e7e6      	b.n	8004aec <_printf_i+0x184>
 8004b1e:	4616      	mov	r6, r2
 8004b20:	e7bb      	b.n	8004a9a <_printf_i+0x132>
 8004b22:	680b      	ldr	r3, [r1, #0]
 8004b24:	6826      	ldr	r6, [r4, #0]
 8004b26:	1d1d      	adds	r5, r3, #4
 8004b28:	6960      	ldr	r0, [r4, #20]
 8004b2a:	600d      	str	r5, [r1, #0]
 8004b2c:	0635      	lsls	r5, r6, #24
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	d501      	bpl.n	8004b36 <_printf_i+0x1ce>
 8004b32:	6018      	str	r0, [r3, #0]
 8004b34:	e002      	b.n	8004b3c <_printf_i+0x1d4>
 8004b36:	0671      	lsls	r1, r6, #25
 8004b38:	d5fb      	bpl.n	8004b32 <_printf_i+0x1ca>
 8004b3a:	8018      	strh	r0, [r3, #0]
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	4616      	mov	r6, r2
 8004b40:	6123      	str	r3, [r4, #16]
 8004b42:	e7ba      	b.n	8004aba <_printf_i+0x152>
 8004b44:	680b      	ldr	r3, [r1, #0]
 8004b46:	1d1a      	adds	r2, r3, #4
 8004b48:	600a      	str	r2, [r1, #0]
 8004b4a:	681e      	ldr	r6, [r3, #0]
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	4630      	mov	r0, r6
 8004b50:	6862      	ldr	r2, [r4, #4]
 8004b52:	f000 fed7 	bl	8005904 <memchr>
 8004b56:	b108      	cbz	r0, 8004b5c <_printf_i+0x1f4>
 8004b58:	1b80      	subs	r0, r0, r6
 8004b5a:	6060      	str	r0, [r4, #4]
 8004b5c:	6863      	ldr	r3, [r4, #4]
 8004b5e:	6123      	str	r3, [r4, #16]
 8004b60:	2300      	movs	r3, #0
 8004b62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b66:	e7a8      	b.n	8004aba <_printf_i+0x152>
 8004b68:	4632      	mov	r2, r6
 8004b6a:	4649      	mov	r1, r9
 8004b6c:	4640      	mov	r0, r8
 8004b6e:	6923      	ldr	r3, [r4, #16]
 8004b70:	47d0      	blx	sl
 8004b72:	3001      	adds	r0, #1
 8004b74:	d0ab      	beq.n	8004ace <_printf_i+0x166>
 8004b76:	6823      	ldr	r3, [r4, #0]
 8004b78:	079b      	lsls	r3, r3, #30
 8004b7a:	d413      	bmi.n	8004ba4 <_printf_i+0x23c>
 8004b7c:	68e0      	ldr	r0, [r4, #12]
 8004b7e:	9b03      	ldr	r3, [sp, #12]
 8004b80:	4298      	cmp	r0, r3
 8004b82:	bfb8      	it	lt
 8004b84:	4618      	movlt	r0, r3
 8004b86:	e7a4      	b.n	8004ad2 <_printf_i+0x16a>
 8004b88:	2301      	movs	r3, #1
 8004b8a:	4632      	mov	r2, r6
 8004b8c:	4649      	mov	r1, r9
 8004b8e:	4640      	mov	r0, r8
 8004b90:	47d0      	blx	sl
 8004b92:	3001      	adds	r0, #1
 8004b94:	d09b      	beq.n	8004ace <_printf_i+0x166>
 8004b96:	3501      	adds	r5, #1
 8004b98:	68e3      	ldr	r3, [r4, #12]
 8004b9a:	9903      	ldr	r1, [sp, #12]
 8004b9c:	1a5b      	subs	r3, r3, r1
 8004b9e:	42ab      	cmp	r3, r5
 8004ba0:	dcf2      	bgt.n	8004b88 <_printf_i+0x220>
 8004ba2:	e7eb      	b.n	8004b7c <_printf_i+0x214>
 8004ba4:	2500      	movs	r5, #0
 8004ba6:	f104 0619 	add.w	r6, r4, #25
 8004baa:	e7f5      	b.n	8004b98 <_printf_i+0x230>
 8004bac:	0800855a 	.word	0x0800855a
 8004bb0:	0800856b 	.word	0x0800856b

08004bb4 <siprintf>:
 8004bb4:	b40e      	push	{r1, r2, r3}
 8004bb6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004bba:	b500      	push	{lr}
 8004bbc:	b09c      	sub	sp, #112	; 0x70
 8004bbe:	ab1d      	add	r3, sp, #116	; 0x74
 8004bc0:	9002      	str	r0, [sp, #8]
 8004bc2:	9006      	str	r0, [sp, #24]
 8004bc4:	9107      	str	r1, [sp, #28]
 8004bc6:	9104      	str	r1, [sp, #16]
 8004bc8:	4808      	ldr	r0, [pc, #32]	; (8004bec <siprintf+0x38>)
 8004bca:	4909      	ldr	r1, [pc, #36]	; (8004bf0 <siprintf+0x3c>)
 8004bcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bd0:	9105      	str	r1, [sp, #20]
 8004bd2:	6800      	ldr	r0, [r0, #0]
 8004bd4:	a902      	add	r1, sp, #8
 8004bd6:	9301      	str	r3, [sp, #4]
 8004bd8:	f001 fb42 	bl	8006260 <_svfiprintf_r>
 8004bdc:	2200      	movs	r2, #0
 8004bde:	9b02      	ldr	r3, [sp, #8]
 8004be0:	701a      	strb	r2, [r3, #0]
 8004be2:	b01c      	add	sp, #112	; 0x70
 8004be4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004be8:	b003      	add	sp, #12
 8004bea:	4770      	bx	lr
 8004bec:	2000001c 	.word	0x2000001c
 8004bf0:	ffff0208 	.word	0xffff0208

08004bf4 <quorem>:
 8004bf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bf8:	6903      	ldr	r3, [r0, #16]
 8004bfa:	690c      	ldr	r4, [r1, #16]
 8004bfc:	4607      	mov	r7, r0
 8004bfe:	42a3      	cmp	r3, r4
 8004c00:	f2c0 8083 	blt.w	8004d0a <quorem+0x116>
 8004c04:	3c01      	subs	r4, #1
 8004c06:	f100 0514 	add.w	r5, r0, #20
 8004c0a:	f101 0814 	add.w	r8, r1, #20
 8004c0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c12:	9301      	str	r3, [sp, #4]
 8004c14:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004c18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	fbb2 f6f3 	udiv	r6, r2, r3
 8004c24:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004c28:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004c2c:	d332      	bcc.n	8004c94 <quorem+0xa0>
 8004c2e:	f04f 0e00 	mov.w	lr, #0
 8004c32:	4640      	mov	r0, r8
 8004c34:	46ac      	mov	ip, r5
 8004c36:	46f2      	mov	sl, lr
 8004c38:	f850 2b04 	ldr.w	r2, [r0], #4
 8004c3c:	b293      	uxth	r3, r2
 8004c3e:	fb06 e303 	mla	r3, r6, r3, lr
 8004c42:	0c12      	lsrs	r2, r2, #16
 8004c44:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004c48:	fb06 e202 	mla	r2, r6, r2, lr
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	ebaa 0303 	sub.w	r3, sl, r3
 8004c52:	f8dc a000 	ldr.w	sl, [ip]
 8004c56:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004c5a:	fa1f fa8a 	uxth.w	sl, sl
 8004c5e:	4453      	add	r3, sl
 8004c60:	fa1f fa82 	uxth.w	sl, r2
 8004c64:	f8dc 2000 	ldr.w	r2, [ip]
 8004c68:	4581      	cmp	r9, r0
 8004c6a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004c6e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c78:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004c7c:	f84c 3b04 	str.w	r3, [ip], #4
 8004c80:	d2da      	bcs.n	8004c38 <quorem+0x44>
 8004c82:	f855 300b 	ldr.w	r3, [r5, fp]
 8004c86:	b92b      	cbnz	r3, 8004c94 <quorem+0xa0>
 8004c88:	9b01      	ldr	r3, [sp, #4]
 8004c8a:	3b04      	subs	r3, #4
 8004c8c:	429d      	cmp	r5, r3
 8004c8e:	461a      	mov	r2, r3
 8004c90:	d32f      	bcc.n	8004cf2 <quorem+0xfe>
 8004c92:	613c      	str	r4, [r7, #16]
 8004c94:	4638      	mov	r0, r7
 8004c96:	f001 f8cb 	bl	8005e30 <__mcmp>
 8004c9a:	2800      	cmp	r0, #0
 8004c9c:	db25      	blt.n	8004cea <quorem+0xf6>
 8004c9e:	4628      	mov	r0, r5
 8004ca0:	f04f 0c00 	mov.w	ip, #0
 8004ca4:	3601      	adds	r6, #1
 8004ca6:	f858 1b04 	ldr.w	r1, [r8], #4
 8004caa:	f8d0 e000 	ldr.w	lr, [r0]
 8004cae:	b28b      	uxth	r3, r1
 8004cb0:	ebac 0303 	sub.w	r3, ip, r3
 8004cb4:	fa1f f28e 	uxth.w	r2, lr
 8004cb8:	4413      	add	r3, r2
 8004cba:	0c0a      	lsrs	r2, r1, #16
 8004cbc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004cc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004cca:	45c1      	cmp	r9, r8
 8004ccc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004cd0:	f840 3b04 	str.w	r3, [r0], #4
 8004cd4:	d2e7      	bcs.n	8004ca6 <quorem+0xb2>
 8004cd6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004cda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004cde:	b922      	cbnz	r2, 8004cea <quorem+0xf6>
 8004ce0:	3b04      	subs	r3, #4
 8004ce2:	429d      	cmp	r5, r3
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	d30a      	bcc.n	8004cfe <quorem+0x10a>
 8004ce8:	613c      	str	r4, [r7, #16]
 8004cea:	4630      	mov	r0, r6
 8004cec:	b003      	add	sp, #12
 8004cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cf2:	6812      	ldr	r2, [r2, #0]
 8004cf4:	3b04      	subs	r3, #4
 8004cf6:	2a00      	cmp	r2, #0
 8004cf8:	d1cb      	bne.n	8004c92 <quorem+0x9e>
 8004cfa:	3c01      	subs	r4, #1
 8004cfc:	e7c6      	b.n	8004c8c <quorem+0x98>
 8004cfe:	6812      	ldr	r2, [r2, #0]
 8004d00:	3b04      	subs	r3, #4
 8004d02:	2a00      	cmp	r2, #0
 8004d04:	d1f0      	bne.n	8004ce8 <quorem+0xf4>
 8004d06:	3c01      	subs	r4, #1
 8004d08:	e7eb      	b.n	8004ce2 <quorem+0xee>
 8004d0a:	2000      	movs	r0, #0
 8004d0c:	e7ee      	b.n	8004cec <quorem+0xf8>
	...

08004d10 <_dtoa_r>:
 8004d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d14:	4616      	mov	r6, r2
 8004d16:	461f      	mov	r7, r3
 8004d18:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004d1a:	b099      	sub	sp, #100	; 0x64
 8004d1c:	4605      	mov	r5, r0
 8004d1e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004d22:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004d26:	b974      	cbnz	r4, 8004d46 <_dtoa_r+0x36>
 8004d28:	2010      	movs	r0, #16
 8004d2a:	f000 fde3 	bl	80058f4 <malloc>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	6268      	str	r0, [r5, #36]	; 0x24
 8004d32:	b920      	cbnz	r0, 8004d3e <_dtoa_r+0x2e>
 8004d34:	21ea      	movs	r1, #234	; 0xea
 8004d36:	4bae      	ldr	r3, [pc, #696]	; (8004ff0 <_dtoa_r+0x2e0>)
 8004d38:	48ae      	ldr	r0, [pc, #696]	; (8004ff4 <_dtoa_r+0x2e4>)
 8004d3a:	f001 fba1 	bl	8006480 <__assert_func>
 8004d3e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004d42:	6004      	str	r4, [r0, #0]
 8004d44:	60c4      	str	r4, [r0, #12]
 8004d46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004d48:	6819      	ldr	r1, [r3, #0]
 8004d4a:	b151      	cbz	r1, 8004d62 <_dtoa_r+0x52>
 8004d4c:	685a      	ldr	r2, [r3, #4]
 8004d4e:	2301      	movs	r3, #1
 8004d50:	4093      	lsls	r3, r2
 8004d52:	604a      	str	r2, [r1, #4]
 8004d54:	608b      	str	r3, [r1, #8]
 8004d56:	4628      	mov	r0, r5
 8004d58:	f000 fe30 	bl	80059bc <_Bfree>
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004d60:	601a      	str	r2, [r3, #0]
 8004d62:	1e3b      	subs	r3, r7, #0
 8004d64:	bfaf      	iteee	ge
 8004d66:	2300      	movge	r3, #0
 8004d68:	2201      	movlt	r2, #1
 8004d6a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004d6e:	9305      	strlt	r3, [sp, #20]
 8004d70:	bfa8      	it	ge
 8004d72:	f8c8 3000 	strge.w	r3, [r8]
 8004d76:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004d7a:	4b9f      	ldr	r3, [pc, #636]	; (8004ff8 <_dtoa_r+0x2e8>)
 8004d7c:	bfb8      	it	lt
 8004d7e:	f8c8 2000 	strlt.w	r2, [r8]
 8004d82:	ea33 0309 	bics.w	r3, r3, r9
 8004d86:	d119      	bne.n	8004dbc <_dtoa_r+0xac>
 8004d88:	f242 730f 	movw	r3, #9999	; 0x270f
 8004d8c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004d8e:	6013      	str	r3, [r2, #0]
 8004d90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004d94:	4333      	orrs	r3, r6
 8004d96:	f000 8580 	beq.w	800589a <_dtoa_r+0xb8a>
 8004d9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004d9c:	b953      	cbnz	r3, 8004db4 <_dtoa_r+0xa4>
 8004d9e:	4b97      	ldr	r3, [pc, #604]	; (8004ffc <_dtoa_r+0x2ec>)
 8004da0:	e022      	b.n	8004de8 <_dtoa_r+0xd8>
 8004da2:	4b97      	ldr	r3, [pc, #604]	; (8005000 <_dtoa_r+0x2f0>)
 8004da4:	9308      	str	r3, [sp, #32]
 8004da6:	3308      	adds	r3, #8
 8004da8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004daa:	6013      	str	r3, [r2, #0]
 8004dac:	9808      	ldr	r0, [sp, #32]
 8004dae:	b019      	add	sp, #100	; 0x64
 8004db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004db4:	4b91      	ldr	r3, [pc, #580]	; (8004ffc <_dtoa_r+0x2ec>)
 8004db6:	9308      	str	r3, [sp, #32]
 8004db8:	3303      	adds	r3, #3
 8004dba:	e7f5      	b.n	8004da8 <_dtoa_r+0x98>
 8004dbc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004dc0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004dc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004dc8:	2200      	movs	r2, #0
 8004dca:	2300      	movs	r3, #0
 8004dcc:	f7fb fea0 	bl	8000b10 <__aeabi_dcmpeq>
 8004dd0:	4680      	mov	r8, r0
 8004dd2:	b158      	cbz	r0, 8004dec <_dtoa_r+0xdc>
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004dd8:	6013      	str	r3, [r2, #0]
 8004dda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f000 8559 	beq.w	8005894 <_dtoa_r+0xb84>
 8004de2:	4888      	ldr	r0, [pc, #544]	; (8005004 <_dtoa_r+0x2f4>)
 8004de4:	6018      	str	r0, [r3, #0]
 8004de6:	1e43      	subs	r3, r0, #1
 8004de8:	9308      	str	r3, [sp, #32]
 8004dea:	e7df      	b.n	8004dac <_dtoa_r+0x9c>
 8004dec:	ab16      	add	r3, sp, #88	; 0x58
 8004dee:	9301      	str	r3, [sp, #4]
 8004df0:	ab17      	add	r3, sp, #92	; 0x5c
 8004df2:	9300      	str	r3, [sp, #0]
 8004df4:	4628      	mov	r0, r5
 8004df6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004dfa:	f001 f8c5 	bl	8005f88 <__d2b>
 8004dfe:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004e02:	4682      	mov	sl, r0
 8004e04:	2c00      	cmp	r4, #0
 8004e06:	d07e      	beq.n	8004f06 <_dtoa_r+0x1f6>
 8004e08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e0e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004e12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e16:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004e1a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004e1e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004e22:	2200      	movs	r2, #0
 8004e24:	4b78      	ldr	r3, [pc, #480]	; (8005008 <_dtoa_r+0x2f8>)
 8004e26:	f7fb fa53 	bl	80002d0 <__aeabi_dsub>
 8004e2a:	a36b      	add	r3, pc, #428	; (adr r3, 8004fd8 <_dtoa_r+0x2c8>)
 8004e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e30:	f7fb fc06 	bl	8000640 <__aeabi_dmul>
 8004e34:	a36a      	add	r3, pc, #424	; (adr r3, 8004fe0 <_dtoa_r+0x2d0>)
 8004e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e3a:	f7fb fa4b 	bl	80002d4 <__adddf3>
 8004e3e:	4606      	mov	r6, r0
 8004e40:	4620      	mov	r0, r4
 8004e42:	460f      	mov	r7, r1
 8004e44:	f7fb fb92 	bl	800056c <__aeabi_i2d>
 8004e48:	a367      	add	r3, pc, #412	; (adr r3, 8004fe8 <_dtoa_r+0x2d8>)
 8004e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4e:	f7fb fbf7 	bl	8000640 <__aeabi_dmul>
 8004e52:	4602      	mov	r2, r0
 8004e54:	460b      	mov	r3, r1
 8004e56:	4630      	mov	r0, r6
 8004e58:	4639      	mov	r1, r7
 8004e5a:	f7fb fa3b 	bl	80002d4 <__adddf3>
 8004e5e:	4606      	mov	r6, r0
 8004e60:	460f      	mov	r7, r1
 8004e62:	f7fb fe9d 	bl	8000ba0 <__aeabi_d2iz>
 8004e66:	2200      	movs	r2, #0
 8004e68:	4681      	mov	r9, r0
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	4630      	mov	r0, r6
 8004e6e:	4639      	mov	r1, r7
 8004e70:	f7fb fe58 	bl	8000b24 <__aeabi_dcmplt>
 8004e74:	b148      	cbz	r0, 8004e8a <_dtoa_r+0x17a>
 8004e76:	4648      	mov	r0, r9
 8004e78:	f7fb fb78 	bl	800056c <__aeabi_i2d>
 8004e7c:	4632      	mov	r2, r6
 8004e7e:	463b      	mov	r3, r7
 8004e80:	f7fb fe46 	bl	8000b10 <__aeabi_dcmpeq>
 8004e84:	b908      	cbnz	r0, 8004e8a <_dtoa_r+0x17a>
 8004e86:	f109 39ff 	add.w	r9, r9, #4294967295
 8004e8a:	f1b9 0f16 	cmp.w	r9, #22
 8004e8e:	d857      	bhi.n	8004f40 <_dtoa_r+0x230>
 8004e90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e94:	4b5d      	ldr	r3, [pc, #372]	; (800500c <_dtoa_r+0x2fc>)
 8004e96:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e9e:	f7fb fe41 	bl	8000b24 <__aeabi_dcmplt>
 8004ea2:	2800      	cmp	r0, #0
 8004ea4:	d04e      	beq.n	8004f44 <_dtoa_r+0x234>
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	f109 39ff 	add.w	r9, r9, #4294967295
 8004eac:	930f      	str	r3, [sp, #60]	; 0x3c
 8004eae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004eb0:	1b1c      	subs	r4, r3, r4
 8004eb2:	1e63      	subs	r3, r4, #1
 8004eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8004eb6:	bf49      	itett	mi
 8004eb8:	f1c4 0301 	rsbmi	r3, r4, #1
 8004ebc:	2300      	movpl	r3, #0
 8004ebe:	9306      	strmi	r3, [sp, #24]
 8004ec0:	2300      	movmi	r3, #0
 8004ec2:	bf54      	ite	pl
 8004ec4:	9306      	strpl	r3, [sp, #24]
 8004ec6:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004ec8:	f1b9 0f00 	cmp.w	r9, #0
 8004ecc:	db3c      	blt.n	8004f48 <_dtoa_r+0x238>
 8004ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ed0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004ed4:	444b      	add	r3, r9
 8004ed6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ed8:	2300      	movs	r3, #0
 8004eda:	930a      	str	r3, [sp, #40]	; 0x28
 8004edc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004ede:	2b09      	cmp	r3, #9
 8004ee0:	d86c      	bhi.n	8004fbc <_dtoa_r+0x2ac>
 8004ee2:	2b05      	cmp	r3, #5
 8004ee4:	bfc4      	itt	gt
 8004ee6:	3b04      	subgt	r3, #4
 8004ee8:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004eea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004eec:	bfc8      	it	gt
 8004eee:	2400      	movgt	r4, #0
 8004ef0:	f1a3 0302 	sub.w	r3, r3, #2
 8004ef4:	bfd8      	it	le
 8004ef6:	2401      	movle	r4, #1
 8004ef8:	2b03      	cmp	r3, #3
 8004efa:	f200 808b 	bhi.w	8005014 <_dtoa_r+0x304>
 8004efe:	e8df f003 	tbb	[pc, r3]
 8004f02:	4f2d      	.short	0x4f2d
 8004f04:	5b4d      	.short	0x5b4d
 8004f06:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004f0a:	441c      	add	r4, r3
 8004f0c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004f10:	2b20      	cmp	r3, #32
 8004f12:	bfc3      	ittte	gt
 8004f14:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004f18:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004f1c:	fa09 f303 	lslgt.w	r3, r9, r3
 8004f20:	f1c3 0320 	rsble	r3, r3, #32
 8004f24:	bfc6      	itte	gt
 8004f26:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004f2a:	4318      	orrgt	r0, r3
 8004f2c:	fa06 f003 	lslle.w	r0, r6, r3
 8004f30:	f7fb fb0c 	bl	800054c <__aeabi_ui2d>
 8004f34:	2301      	movs	r3, #1
 8004f36:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004f3a:	3c01      	subs	r4, #1
 8004f3c:	9313      	str	r3, [sp, #76]	; 0x4c
 8004f3e:	e770      	b.n	8004e22 <_dtoa_r+0x112>
 8004f40:	2301      	movs	r3, #1
 8004f42:	e7b3      	b.n	8004eac <_dtoa_r+0x19c>
 8004f44:	900f      	str	r0, [sp, #60]	; 0x3c
 8004f46:	e7b2      	b.n	8004eae <_dtoa_r+0x19e>
 8004f48:	9b06      	ldr	r3, [sp, #24]
 8004f4a:	eba3 0309 	sub.w	r3, r3, r9
 8004f4e:	9306      	str	r3, [sp, #24]
 8004f50:	f1c9 0300 	rsb	r3, r9, #0
 8004f54:	930a      	str	r3, [sp, #40]	; 0x28
 8004f56:	2300      	movs	r3, #0
 8004f58:	930e      	str	r3, [sp, #56]	; 0x38
 8004f5a:	e7bf      	b.n	8004edc <_dtoa_r+0x1cc>
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f60:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	dc59      	bgt.n	800501a <_dtoa_r+0x30a>
 8004f66:	f04f 0b01 	mov.w	fp, #1
 8004f6a:	465b      	mov	r3, fp
 8004f6c:	f8cd b008 	str.w	fp, [sp, #8]
 8004f70:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8004f74:	2200      	movs	r2, #0
 8004f76:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004f78:	6042      	str	r2, [r0, #4]
 8004f7a:	2204      	movs	r2, #4
 8004f7c:	f102 0614 	add.w	r6, r2, #20
 8004f80:	429e      	cmp	r6, r3
 8004f82:	6841      	ldr	r1, [r0, #4]
 8004f84:	d94f      	bls.n	8005026 <_dtoa_r+0x316>
 8004f86:	4628      	mov	r0, r5
 8004f88:	f000 fcd8 	bl	800593c <_Balloc>
 8004f8c:	9008      	str	r0, [sp, #32]
 8004f8e:	2800      	cmp	r0, #0
 8004f90:	d14d      	bne.n	800502e <_dtoa_r+0x31e>
 8004f92:	4602      	mov	r2, r0
 8004f94:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004f98:	4b1d      	ldr	r3, [pc, #116]	; (8005010 <_dtoa_r+0x300>)
 8004f9a:	e6cd      	b.n	8004d38 <_dtoa_r+0x28>
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e7de      	b.n	8004f5e <_dtoa_r+0x24e>
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	930b      	str	r3, [sp, #44]	; 0x2c
 8004fa4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004fa6:	eb09 0b03 	add.w	fp, r9, r3
 8004faa:	f10b 0301 	add.w	r3, fp, #1
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	9302      	str	r3, [sp, #8]
 8004fb2:	bfb8      	it	lt
 8004fb4:	2301      	movlt	r3, #1
 8004fb6:	e7dd      	b.n	8004f74 <_dtoa_r+0x264>
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e7f2      	b.n	8004fa2 <_dtoa_r+0x292>
 8004fbc:	2401      	movs	r4, #1
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	940b      	str	r4, [sp, #44]	; 0x2c
 8004fc2:	9322      	str	r3, [sp, #136]	; 0x88
 8004fc4:	f04f 3bff 	mov.w	fp, #4294967295
 8004fc8:	2200      	movs	r2, #0
 8004fca:	2312      	movs	r3, #18
 8004fcc:	f8cd b008 	str.w	fp, [sp, #8]
 8004fd0:	9223      	str	r2, [sp, #140]	; 0x8c
 8004fd2:	e7cf      	b.n	8004f74 <_dtoa_r+0x264>
 8004fd4:	f3af 8000 	nop.w
 8004fd8:	636f4361 	.word	0x636f4361
 8004fdc:	3fd287a7 	.word	0x3fd287a7
 8004fe0:	8b60c8b3 	.word	0x8b60c8b3
 8004fe4:	3fc68a28 	.word	0x3fc68a28
 8004fe8:	509f79fb 	.word	0x509f79fb
 8004fec:	3fd34413 	.word	0x3fd34413
 8004ff0:	08008589 	.word	0x08008589
 8004ff4:	080085a0 	.word	0x080085a0
 8004ff8:	7ff00000 	.word	0x7ff00000
 8004ffc:	08008585 	.word	0x08008585
 8005000:	0800857c 	.word	0x0800857c
 8005004:	08008559 	.word	0x08008559
 8005008:	3ff80000 	.word	0x3ff80000
 800500c:	08008698 	.word	0x08008698
 8005010:	080085ff 	.word	0x080085ff
 8005014:	2301      	movs	r3, #1
 8005016:	930b      	str	r3, [sp, #44]	; 0x2c
 8005018:	e7d4      	b.n	8004fc4 <_dtoa_r+0x2b4>
 800501a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800501e:	465b      	mov	r3, fp
 8005020:	f8cd b008 	str.w	fp, [sp, #8]
 8005024:	e7a6      	b.n	8004f74 <_dtoa_r+0x264>
 8005026:	3101      	adds	r1, #1
 8005028:	6041      	str	r1, [r0, #4]
 800502a:	0052      	lsls	r2, r2, #1
 800502c:	e7a6      	b.n	8004f7c <_dtoa_r+0x26c>
 800502e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005030:	9a08      	ldr	r2, [sp, #32]
 8005032:	601a      	str	r2, [r3, #0]
 8005034:	9b02      	ldr	r3, [sp, #8]
 8005036:	2b0e      	cmp	r3, #14
 8005038:	f200 80a8 	bhi.w	800518c <_dtoa_r+0x47c>
 800503c:	2c00      	cmp	r4, #0
 800503e:	f000 80a5 	beq.w	800518c <_dtoa_r+0x47c>
 8005042:	f1b9 0f00 	cmp.w	r9, #0
 8005046:	dd34      	ble.n	80050b2 <_dtoa_r+0x3a2>
 8005048:	4a9a      	ldr	r2, [pc, #616]	; (80052b4 <_dtoa_r+0x5a4>)
 800504a:	f009 030f 	and.w	r3, r9, #15
 800504e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005052:	f419 7f80 	tst.w	r9, #256	; 0x100
 8005056:	e9d3 3400 	ldrd	r3, r4, [r3]
 800505a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800505e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8005062:	d016      	beq.n	8005092 <_dtoa_r+0x382>
 8005064:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005068:	4b93      	ldr	r3, [pc, #588]	; (80052b8 <_dtoa_r+0x5a8>)
 800506a:	2703      	movs	r7, #3
 800506c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005070:	f7fb fc10 	bl	8000894 <__aeabi_ddiv>
 8005074:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005078:	f004 040f 	and.w	r4, r4, #15
 800507c:	4e8e      	ldr	r6, [pc, #568]	; (80052b8 <_dtoa_r+0x5a8>)
 800507e:	b954      	cbnz	r4, 8005096 <_dtoa_r+0x386>
 8005080:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005084:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005088:	f7fb fc04 	bl	8000894 <__aeabi_ddiv>
 800508c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005090:	e029      	b.n	80050e6 <_dtoa_r+0x3d6>
 8005092:	2702      	movs	r7, #2
 8005094:	e7f2      	b.n	800507c <_dtoa_r+0x36c>
 8005096:	07e1      	lsls	r1, r4, #31
 8005098:	d508      	bpl.n	80050ac <_dtoa_r+0x39c>
 800509a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800509e:	e9d6 2300 	ldrd	r2, r3, [r6]
 80050a2:	f7fb facd 	bl	8000640 <__aeabi_dmul>
 80050a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80050aa:	3701      	adds	r7, #1
 80050ac:	1064      	asrs	r4, r4, #1
 80050ae:	3608      	adds	r6, #8
 80050b0:	e7e5      	b.n	800507e <_dtoa_r+0x36e>
 80050b2:	f000 80a5 	beq.w	8005200 <_dtoa_r+0x4f0>
 80050b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80050ba:	f1c9 0400 	rsb	r4, r9, #0
 80050be:	4b7d      	ldr	r3, [pc, #500]	; (80052b4 <_dtoa_r+0x5a4>)
 80050c0:	f004 020f 	and.w	r2, r4, #15
 80050c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80050c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050cc:	f7fb fab8 	bl	8000640 <__aeabi_dmul>
 80050d0:	2702      	movs	r7, #2
 80050d2:	2300      	movs	r3, #0
 80050d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050d8:	4e77      	ldr	r6, [pc, #476]	; (80052b8 <_dtoa_r+0x5a8>)
 80050da:	1124      	asrs	r4, r4, #4
 80050dc:	2c00      	cmp	r4, #0
 80050de:	f040 8084 	bne.w	80051ea <_dtoa_r+0x4da>
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1d2      	bne.n	800508c <_dtoa_r+0x37c>
 80050e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f000 808b 	beq.w	8005204 <_dtoa_r+0x4f4>
 80050ee:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80050f2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80050f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80050fa:	2200      	movs	r2, #0
 80050fc:	4b6f      	ldr	r3, [pc, #444]	; (80052bc <_dtoa_r+0x5ac>)
 80050fe:	f7fb fd11 	bl	8000b24 <__aeabi_dcmplt>
 8005102:	2800      	cmp	r0, #0
 8005104:	d07e      	beq.n	8005204 <_dtoa_r+0x4f4>
 8005106:	9b02      	ldr	r3, [sp, #8]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d07b      	beq.n	8005204 <_dtoa_r+0x4f4>
 800510c:	f1bb 0f00 	cmp.w	fp, #0
 8005110:	dd38      	ble.n	8005184 <_dtoa_r+0x474>
 8005112:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005116:	2200      	movs	r2, #0
 8005118:	4b69      	ldr	r3, [pc, #420]	; (80052c0 <_dtoa_r+0x5b0>)
 800511a:	f7fb fa91 	bl	8000640 <__aeabi_dmul>
 800511e:	465c      	mov	r4, fp
 8005120:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005124:	f109 38ff 	add.w	r8, r9, #4294967295
 8005128:	3701      	adds	r7, #1
 800512a:	4638      	mov	r0, r7
 800512c:	f7fb fa1e 	bl	800056c <__aeabi_i2d>
 8005130:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005134:	f7fb fa84 	bl	8000640 <__aeabi_dmul>
 8005138:	2200      	movs	r2, #0
 800513a:	4b62      	ldr	r3, [pc, #392]	; (80052c4 <_dtoa_r+0x5b4>)
 800513c:	f7fb f8ca 	bl	80002d4 <__adddf3>
 8005140:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005144:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005148:	9611      	str	r6, [sp, #68]	; 0x44
 800514a:	2c00      	cmp	r4, #0
 800514c:	d15d      	bne.n	800520a <_dtoa_r+0x4fa>
 800514e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005152:	2200      	movs	r2, #0
 8005154:	4b5c      	ldr	r3, [pc, #368]	; (80052c8 <_dtoa_r+0x5b8>)
 8005156:	f7fb f8bb 	bl	80002d0 <__aeabi_dsub>
 800515a:	4602      	mov	r2, r0
 800515c:	460b      	mov	r3, r1
 800515e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005162:	4633      	mov	r3, r6
 8005164:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005166:	f7fb fcfb 	bl	8000b60 <__aeabi_dcmpgt>
 800516a:	2800      	cmp	r0, #0
 800516c:	f040 829e 	bne.w	80056ac <_dtoa_r+0x99c>
 8005170:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005174:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005176:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800517a:	f7fb fcd3 	bl	8000b24 <__aeabi_dcmplt>
 800517e:	2800      	cmp	r0, #0
 8005180:	f040 8292 	bne.w	80056a8 <_dtoa_r+0x998>
 8005184:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005188:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800518c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800518e:	2b00      	cmp	r3, #0
 8005190:	f2c0 8153 	blt.w	800543a <_dtoa_r+0x72a>
 8005194:	f1b9 0f0e 	cmp.w	r9, #14
 8005198:	f300 814f 	bgt.w	800543a <_dtoa_r+0x72a>
 800519c:	4b45      	ldr	r3, [pc, #276]	; (80052b4 <_dtoa_r+0x5a4>)
 800519e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80051a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80051a6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80051aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f280 80db 	bge.w	8005368 <_dtoa_r+0x658>
 80051b2:	9b02      	ldr	r3, [sp, #8]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f300 80d7 	bgt.w	8005368 <_dtoa_r+0x658>
 80051ba:	f040 8274 	bne.w	80056a6 <_dtoa_r+0x996>
 80051be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80051c2:	2200      	movs	r2, #0
 80051c4:	4b40      	ldr	r3, [pc, #256]	; (80052c8 <_dtoa_r+0x5b8>)
 80051c6:	f7fb fa3b 	bl	8000640 <__aeabi_dmul>
 80051ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051ce:	f7fb fcbd 	bl	8000b4c <__aeabi_dcmpge>
 80051d2:	9c02      	ldr	r4, [sp, #8]
 80051d4:	4626      	mov	r6, r4
 80051d6:	2800      	cmp	r0, #0
 80051d8:	f040 824a 	bne.w	8005670 <_dtoa_r+0x960>
 80051dc:	2331      	movs	r3, #49	; 0x31
 80051de:	9f08      	ldr	r7, [sp, #32]
 80051e0:	f109 0901 	add.w	r9, r9, #1
 80051e4:	f807 3b01 	strb.w	r3, [r7], #1
 80051e8:	e246      	b.n	8005678 <_dtoa_r+0x968>
 80051ea:	07e2      	lsls	r2, r4, #31
 80051ec:	d505      	bpl.n	80051fa <_dtoa_r+0x4ea>
 80051ee:	e9d6 2300 	ldrd	r2, r3, [r6]
 80051f2:	f7fb fa25 	bl	8000640 <__aeabi_dmul>
 80051f6:	2301      	movs	r3, #1
 80051f8:	3701      	adds	r7, #1
 80051fa:	1064      	asrs	r4, r4, #1
 80051fc:	3608      	adds	r6, #8
 80051fe:	e76d      	b.n	80050dc <_dtoa_r+0x3cc>
 8005200:	2702      	movs	r7, #2
 8005202:	e770      	b.n	80050e6 <_dtoa_r+0x3d6>
 8005204:	46c8      	mov	r8, r9
 8005206:	9c02      	ldr	r4, [sp, #8]
 8005208:	e78f      	b.n	800512a <_dtoa_r+0x41a>
 800520a:	9908      	ldr	r1, [sp, #32]
 800520c:	4b29      	ldr	r3, [pc, #164]	; (80052b4 <_dtoa_r+0x5a4>)
 800520e:	4421      	add	r1, r4
 8005210:	9112      	str	r1, [sp, #72]	; 0x48
 8005212:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005214:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005218:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800521c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005220:	2900      	cmp	r1, #0
 8005222:	d055      	beq.n	80052d0 <_dtoa_r+0x5c0>
 8005224:	2000      	movs	r0, #0
 8005226:	4929      	ldr	r1, [pc, #164]	; (80052cc <_dtoa_r+0x5bc>)
 8005228:	f7fb fb34 	bl	8000894 <__aeabi_ddiv>
 800522c:	463b      	mov	r3, r7
 800522e:	4632      	mov	r2, r6
 8005230:	f7fb f84e 	bl	80002d0 <__aeabi_dsub>
 8005234:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005238:	9f08      	ldr	r7, [sp, #32]
 800523a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800523e:	f7fb fcaf 	bl	8000ba0 <__aeabi_d2iz>
 8005242:	4604      	mov	r4, r0
 8005244:	f7fb f992 	bl	800056c <__aeabi_i2d>
 8005248:	4602      	mov	r2, r0
 800524a:	460b      	mov	r3, r1
 800524c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005250:	f7fb f83e 	bl	80002d0 <__aeabi_dsub>
 8005254:	4602      	mov	r2, r0
 8005256:	460b      	mov	r3, r1
 8005258:	3430      	adds	r4, #48	; 0x30
 800525a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800525e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005262:	f807 4b01 	strb.w	r4, [r7], #1
 8005266:	f7fb fc5d 	bl	8000b24 <__aeabi_dcmplt>
 800526a:	2800      	cmp	r0, #0
 800526c:	d174      	bne.n	8005358 <_dtoa_r+0x648>
 800526e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005272:	2000      	movs	r0, #0
 8005274:	4911      	ldr	r1, [pc, #68]	; (80052bc <_dtoa_r+0x5ac>)
 8005276:	f7fb f82b 	bl	80002d0 <__aeabi_dsub>
 800527a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800527e:	f7fb fc51 	bl	8000b24 <__aeabi_dcmplt>
 8005282:	2800      	cmp	r0, #0
 8005284:	f040 80b6 	bne.w	80053f4 <_dtoa_r+0x6e4>
 8005288:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800528a:	429f      	cmp	r7, r3
 800528c:	f43f af7a 	beq.w	8005184 <_dtoa_r+0x474>
 8005290:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005294:	2200      	movs	r2, #0
 8005296:	4b0a      	ldr	r3, [pc, #40]	; (80052c0 <_dtoa_r+0x5b0>)
 8005298:	f7fb f9d2 	bl	8000640 <__aeabi_dmul>
 800529c:	2200      	movs	r2, #0
 800529e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80052a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052a6:	4b06      	ldr	r3, [pc, #24]	; (80052c0 <_dtoa_r+0x5b0>)
 80052a8:	f7fb f9ca 	bl	8000640 <__aeabi_dmul>
 80052ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80052b0:	e7c3      	b.n	800523a <_dtoa_r+0x52a>
 80052b2:	bf00      	nop
 80052b4:	08008698 	.word	0x08008698
 80052b8:	08008670 	.word	0x08008670
 80052bc:	3ff00000 	.word	0x3ff00000
 80052c0:	40240000 	.word	0x40240000
 80052c4:	401c0000 	.word	0x401c0000
 80052c8:	40140000 	.word	0x40140000
 80052cc:	3fe00000 	.word	0x3fe00000
 80052d0:	4630      	mov	r0, r6
 80052d2:	4639      	mov	r1, r7
 80052d4:	f7fb f9b4 	bl	8000640 <__aeabi_dmul>
 80052d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80052da:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80052de:	9c08      	ldr	r4, [sp, #32]
 80052e0:	9314      	str	r3, [sp, #80]	; 0x50
 80052e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052e6:	f7fb fc5b 	bl	8000ba0 <__aeabi_d2iz>
 80052ea:	9015      	str	r0, [sp, #84]	; 0x54
 80052ec:	f7fb f93e 	bl	800056c <__aeabi_i2d>
 80052f0:	4602      	mov	r2, r0
 80052f2:	460b      	mov	r3, r1
 80052f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052f8:	f7fa ffea 	bl	80002d0 <__aeabi_dsub>
 80052fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80052fe:	4606      	mov	r6, r0
 8005300:	3330      	adds	r3, #48	; 0x30
 8005302:	f804 3b01 	strb.w	r3, [r4], #1
 8005306:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005308:	460f      	mov	r7, r1
 800530a:	429c      	cmp	r4, r3
 800530c:	f04f 0200 	mov.w	r2, #0
 8005310:	d124      	bne.n	800535c <_dtoa_r+0x64c>
 8005312:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005316:	4bb3      	ldr	r3, [pc, #716]	; (80055e4 <_dtoa_r+0x8d4>)
 8005318:	f7fa ffdc 	bl	80002d4 <__adddf3>
 800531c:	4602      	mov	r2, r0
 800531e:	460b      	mov	r3, r1
 8005320:	4630      	mov	r0, r6
 8005322:	4639      	mov	r1, r7
 8005324:	f7fb fc1c 	bl	8000b60 <__aeabi_dcmpgt>
 8005328:	2800      	cmp	r0, #0
 800532a:	d162      	bne.n	80053f2 <_dtoa_r+0x6e2>
 800532c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005330:	2000      	movs	r0, #0
 8005332:	49ac      	ldr	r1, [pc, #688]	; (80055e4 <_dtoa_r+0x8d4>)
 8005334:	f7fa ffcc 	bl	80002d0 <__aeabi_dsub>
 8005338:	4602      	mov	r2, r0
 800533a:	460b      	mov	r3, r1
 800533c:	4630      	mov	r0, r6
 800533e:	4639      	mov	r1, r7
 8005340:	f7fb fbf0 	bl	8000b24 <__aeabi_dcmplt>
 8005344:	2800      	cmp	r0, #0
 8005346:	f43f af1d 	beq.w	8005184 <_dtoa_r+0x474>
 800534a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800534c:	1e7b      	subs	r3, r7, #1
 800534e:	9314      	str	r3, [sp, #80]	; 0x50
 8005350:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005354:	2b30      	cmp	r3, #48	; 0x30
 8005356:	d0f8      	beq.n	800534a <_dtoa_r+0x63a>
 8005358:	46c1      	mov	r9, r8
 800535a:	e03a      	b.n	80053d2 <_dtoa_r+0x6c2>
 800535c:	4ba2      	ldr	r3, [pc, #648]	; (80055e8 <_dtoa_r+0x8d8>)
 800535e:	f7fb f96f 	bl	8000640 <__aeabi_dmul>
 8005362:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005366:	e7bc      	b.n	80052e2 <_dtoa_r+0x5d2>
 8005368:	9f08      	ldr	r7, [sp, #32]
 800536a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800536e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005372:	f7fb fa8f 	bl	8000894 <__aeabi_ddiv>
 8005376:	f7fb fc13 	bl	8000ba0 <__aeabi_d2iz>
 800537a:	4604      	mov	r4, r0
 800537c:	f7fb f8f6 	bl	800056c <__aeabi_i2d>
 8005380:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005384:	f7fb f95c 	bl	8000640 <__aeabi_dmul>
 8005388:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800538c:	460b      	mov	r3, r1
 800538e:	4602      	mov	r2, r0
 8005390:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005394:	f7fa ff9c 	bl	80002d0 <__aeabi_dsub>
 8005398:	f807 6b01 	strb.w	r6, [r7], #1
 800539c:	9e08      	ldr	r6, [sp, #32]
 800539e:	9b02      	ldr	r3, [sp, #8]
 80053a0:	1bbe      	subs	r6, r7, r6
 80053a2:	42b3      	cmp	r3, r6
 80053a4:	d13a      	bne.n	800541c <_dtoa_r+0x70c>
 80053a6:	4602      	mov	r2, r0
 80053a8:	460b      	mov	r3, r1
 80053aa:	f7fa ff93 	bl	80002d4 <__adddf3>
 80053ae:	4602      	mov	r2, r0
 80053b0:	460b      	mov	r3, r1
 80053b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80053b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80053ba:	f7fb fbd1 	bl	8000b60 <__aeabi_dcmpgt>
 80053be:	bb58      	cbnz	r0, 8005418 <_dtoa_r+0x708>
 80053c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80053c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053c8:	f7fb fba2 	bl	8000b10 <__aeabi_dcmpeq>
 80053cc:	b108      	cbz	r0, 80053d2 <_dtoa_r+0x6c2>
 80053ce:	07e1      	lsls	r1, r4, #31
 80053d0:	d422      	bmi.n	8005418 <_dtoa_r+0x708>
 80053d2:	4628      	mov	r0, r5
 80053d4:	4651      	mov	r1, sl
 80053d6:	f000 faf1 	bl	80059bc <_Bfree>
 80053da:	2300      	movs	r3, #0
 80053dc:	703b      	strb	r3, [r7, #0]
 80053de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80053e0:	f109 0001 	add.w	r0, r9, #1
 80053e4:	6018      	str	r0, [r3, #0]
 80053e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f43f acdf 	beq.w	8004dac <_dtoa_r+0x9c>
 80053ee:	601f      	str	r7, [r3, #0]
 80053f0:	e4dc      	b.n	8004dac <_dtoa_r+0x9c>
 80053f2:	4627      	mov	r7, r4
 80053f4:	463b      	mov	r3, r7
 80053f6:	461f      	mov	r7, r3
 80053f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80053fc:	2a39      	cmp	r2, #57	; 0x39
 80053fe:	d107      	bne.n	8005410 <_dtoa_r+0x700>
 8005400:	9a08      	ldr	r2, [sp, #32]
 8005402:	429a      	cmp	r2, r3
 8005404:	d1f7      	bne.n	80053f6 <_dtoa_r+0x6e6>
 8005406:	2230      	movs	r2, #48	; 0x30
 8005408:	9908      	ldr	r1, [sp, #32]
 800540a:	f108 0801 	add.w	r8, r8, #1
 800540e:	700a      	strb	r2, [r1, #0]
 8005410:	781a      	ldrb	r2, [r3, #0]
 8005412:	3201      	adds	r2, #1
 8005414:	701a      	strb	r2, [r3, #0]
 8005416:	e79f      	b.n	8005358 <_dtoa_r+0x648>
 8005418:	46c8      	mov	r8, r9
 800541a:	e7eb      	b.n	80053f4 <_dtoa_r+0x6e4>
 800541c:	2200      	movs	r2, #0
 800541e:	4b72      	ldr	r3, [pc, #456]	; (80055e8 <_dtoa_r+0x8d8>)
 8005420:	f7fb f90e 	bl	8000640 <__aeabi_dmul>
 8005424:	4602      	mov	r2, r0
 8005426:	460b      	mov	r3, r1
 8005428:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800542c:	2200      	movs	r2, #0
 800542e:	2300      	movs	r3, #0
 8005430:	f7fb fb6e 	bl	8000b10 <__aeabi_dcmpeq>
 8005434:	2800      	cmp	r0, #0
 8005436:	d098      	beq.n	800536a <_dtoa_r+0x65a>
 8005438:	e7cb      	b.n	80053d2 <_dtoa_r+0x6c2>
 800543a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800543c:	2a00      	cmp	r2, #0
 800543e:	f000 80cd 	beq.w	80055dc <_dtoa_r+0x8cc>
 8005442:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005444:	2a01      	cmp	r2, #1
 8005446:	f300 80af 	bgt.w	80055a8 <_dtoa_r+0x898>
 800544a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800544c:	2a00      	cmp	r2, #0
 800544e:	f000 80a7 	beq.w	80055a0 <_dtoa_r+0x890>
 8005452:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005456:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005458:	9f06      	ldr	r7, [sp, #24]
 800545a:	9a06      	ldr	r2, [sp, #24]
 800545c:	2101      	movs	r1, #1
 800545e:	441a      	add	r2, r3
 8005460:	9206      	str	r2, [sp, #24]
 8005462:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005464:	4628      	mov	r0, r5
 8005466:	441a      	add	r2, r3
 8005468:	9209      	str	r2, [sp, #36]	; 0x24
 800546a:	f000 fb61 	bl	8005b30 <__i2b>
 800546e:	4606      	mov	r6, r0
 8005470:	2f00      	cmp	r7, #0
 8005472:	dd0c      	ble.n	800548e <_dtoa_r+0x77e>
 8005474:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005476:	2b00      	cmp	r3, #0
 8005478:	dd09      	ble.n	800548e <_dtoa_r+0x77e>
 800547a:	42bb      	cmp	r3, r7
 800547c:	bfa8      	it	ge
 800547e:	463b      	movge	r3, r7
 8005480:	9a06      	ldr	r2, [sp, #24]
 8005482:	1aff      	subs	r7, r7, r3
 8005484:	1ad2      	subs	r2, r2, r3
 8005486:	9206      	str	r2, [sp, #24]
 8005488:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	9309      	str	r3, [sp, #36]	; 0x24
 800548e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005490:	b1f3      	cbz	r3, 80054d0 <_dtoa_r+0x7c0>
 8005492:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005494:	2b00      	cmp	r3, #0
 8005496:	f000 80a9 	beq.w	80055ec <_dtoa_r+0x8dc>
 800549a:	2c00      	cmp	r4, #0
 800549c:	dd10      	ble.n	80054c0 <_dtoa_r+0x7b0>
 800549e:	4631      	mov	r1, r6
 80054a0:	4622      	mov	r2, r4
 80054a2:	4628      	mov	r0, r5
 80054a4:	f000 fbfe 	bl	8005ca4 <__pow5mult>
 80054a8:	4652      	mov	r2, sl
 80054aa:	4601      	mov	r1, r0
 80054ac:	4606      	mov	r6, r0
 80054ae:	4628      	mov	r0, r5
 80054b0:	f000 fb54 	bl	8005b5c <__multiply>
 80054b4:	4680      	mov	r8, r0
 80054b6:	4651      	mov	r1, sl
 80054b8:	4628      	mov	r0, r5
 80054ba:	f000 fa7f 	bl	80059bc <_Bfree>
 80054be:	46c2      	mov	sl, r8
 80054c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054c2:	1b1a      	subs	r2, r3, r4
 80054c4:	d004      	beq.n	80054d0 <_dtoa_r+0x7c0>
 80054c6:	4651      	mov	r1, sl
 80054c8:	4628      	mov	r0, r5
 80054ca:	f000 fbeb 	bl	8005ca4 <__pow5mult>
 80054ce:	4682      	mov	sl, r0
 80054d0:	2101      	movs	r1, #1
 80054d2:	4628      	mov	r0, r5
 80054d4:	f000 fb2c 	bl	8005b30 <__i2b>
 80054d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054da:	4604      	mov	r4, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f340 8087 	ble.w	80055f0 <_dtoa_r+0x8e0>
 80054e2:	461a      	mov	r2, r3
 80054e4:	4601      	mov	r1, r0
 80054e6:	4628      	mov	r0, r5
 80054e8:	f000 fbdc 	bl	8005ca4 <__pow5mult>
 80054ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054ee:	4604      	mov	r4, r0
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	f340 8080 	ble.w	80055f6 <_dtoa_r+0x8e6>
 80054f6:	f04f 0800 	mov.w	r8, #0
 80054fa:	6923      	ldr	r3, [r4, #16]
 80054fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005500:	6918      	ldr	r0, [r3, #16]
 8005502:	f000 fac7 	bl	8005a94 <__hi0bits>
 8005506:	f1c0 0020 	rsb	r0, r0, #32
 800550a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800550c:	4418      	add	r0, r3
 800550e:	f010 001f 	ands.w	r0, r0, #31
 8005512:	f000 8092 	beq.w	800563a <_dtoa_r+0x92a>
 8005516:	f1c0 0320 	rsb	r3, r0, #32
 800551a:	2b04      	cmp	r3, #4
 800551c:	f340 808a 	ble.w	8005634 <_dtoa_r+0x924>
 8005520:	f1c0 001c 	rsb	r0, r0, #28
 8005524:	9b06      	ldr	r3, [sp, #24]
 8005526:	4407      	add	r7, r0
 8005528:	4403      	add	r3, r0
 800552a:	9306      	str	r3, [sp, #24]
 800552c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800552e:	4403      	add	r3, r0
 8005530:	9309      	str	r3, [sp, #36]	; 0x24
 8005532:	9b06      	ldr	r3, [sp, #24]
 8005534:	2b00      	cmp	r3, #0
 8005536:	dd05      	ble.n	8005544 <_dtoa_r+0x834>
 8005538:	4651      	mov	r1, sl
 800553a:	461a      	mov	r2, r3
 800553c:	4628      	mov	r0, r5
 800553e:	f000 fc0b 	bl	8005d58 <__lshift>
 8005542:	4682      	mov	sl, r0
 8005544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005546:	2b00      	cmp	r3, #0
 8005548:	dd05      	ble.n	8005556 <_dtoa_r+0x846>
 800554a:	4621      	mov	r1, r4
 800554c:	461a      	mov	r2, r3
 800554e:	4628      	mov	r0, r5
 8005550:	f000 fc02 	bl	8005d58 <__lshift>
 8005554:	4604      	mov	r4, r0
 8005556:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005558:	2b00      	cmp	r3, #0
 800555a:	d070      	beq.n	800563e <_dtoa_r+0x92e>
 800555c:	4621      	mov	r1, r4
 800555e:	4650      	mov	r0, sl
 8005560:	f000 fc66 	bl	8005e30 <__mcmp>
 8005564:	2800      	cmp	r0, #0
 8005566:	da6a      	bge.n	800563e <_dtoa_r+0x92e>
 8005568:	2300      	movs	r3, #0
 800556a:	4651      	mov	r1, sl
 800556c:	220a      	movs	r2, #10
 800556e:	4628      	mov	r0, r5
 8005570:	f000 fa46 	bl	8005a00 <__multadd>
 8005574:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005576:	4682      	mov	sl, r0
 8005578:	f109 39ff 	add.w	r9, r9, #4294967295
 800557c:	2b00      	cmp	r3, #0
 800557e:	f000 8193 	beq.w	80058a8 <_dtoa_r+0xb98>
 8005582:	4631      	mov	r1, r6
 8005584:	2300      	movs	r3, #0
 8005586:	220a      	movs	r2, #10
 8005588:	4628      	mov	r0, r5
 800558a:	f000 fa39 	bl	8005a00 <__multadd>
 800558e:	f1bb 0f00 	cmp.w	fp, #0
 8005592:	4606      	mov	r6, r0
 8005594:	f300 8093 	bgt.w	80056be <_dtoa_r+0x9ae>
 8005598:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800559a:	2b02      	cmp	r3, #2
 800559c:	dc57      	bgt.n	800564e <_dtoa_r+0x93e>
 800559e:	e08e      	b.n	80056be <_dtoa_r+0x9ae>
 80055a0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80055a2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80055a6:	e756      	b.n	8005456 <_dtoa_r+0x746>
 80055a8:	9b02      	ldr	r3, [sp, #8]
 80055aa:	1e5c      	subs	r4, r3, #1
 80055ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055ae:	42a3      	cmp	r3, r4
 80055b0:	bfb7      	itett	lt
 80055b2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80055b4:	1b1c      	subge	r4, r3, r4
 80055b6:	1ae2      	sublt	r2, r4, r3
 80055b8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80055ba:	bfbe      	ittt	lt
 80055bc:	940a      	strlt	r4, [sp, #40]	; 0x28
 80055be:	189b      	addlt	r3, r3, r2
 80055c0:	930e      	strlt	r3, [sp, #56]	; 0x38
 80055c2:	9b02      	ldr	r3, [sp, #8]
 80055c4:	bfb8      	it	lt
 80055c6:	2400      	movlt	r4, #0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	bfbb      	ittet	lt
 80055cc:	9b06      	ldrlt	r3, [sp, #24]
 80055ce:	9a02      	ldrlt	r2, [sp, #8]
 80055d0:	9f06      	ldrge	r7, [sp, #24]
 80055d2:	1a9f      	sublt	r7, r3, r2
 80055d4:	bfac      	ite	ge
 80055d6:	9b02      	ldrge	r3, [sp, #8]
 80055d8:	2300      	movlt	r3, #0
 80055da:	e73e      	b.n	800545a <_dtoa_r+0x74a>
 80055dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80055de:	9f06      	ldr	r7, [sp, #24]
 80055e0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80055e2:	e745      	b.n	8005470 <_dtoa_r+0x760>
 80055e4:	3fe00000 	.word	0x3fe00000
 80055e8:	40240000 	.word	0x40240000
 80055ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055ee:	e76a      	b.n	80054c6 <_dtoa_r+0x7b6>
 80055f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	dc19      	bgt.n	800562a <_dtoa_r+0x91a>
 80055f6:	9b04      	ldr	r3, [sp, #16]
 80055f8:	b9bb      	cbnz	r3, 800562a <_dtoa_r+0x91a>
 80055fa:	9b05      	ldr	r3, [sp, #20]
 80055fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005600:	b99b      	cbnz	r3, 800562a <_dtoa_r+0x91a>
 8005602:	9b05      	ldr	r3, [sp, #20]
 8005604:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005608:	0d1b      	lsrs	r3, r3, #20
 800560a:	051b      	lsls	r3, r3, #20
 800560c:	b183      	cbz	r3, 8005630 <_dtoa_r+0x920>
 800560e:	f04f 0801 	mov.w	r8, #1
 8005612:	9b06      	ldr	r3, [sp, #24]
 8005614:	3301      	adds	r3, #1
 8005616:	9306      	str	r3, [sp, #24]
 8005618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800561a:	3301      	adds	r3, #1
 800561c:	9309      	str	r3, [sp, #36]	; 0x24
 800561e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005620:	2b00      	cmp	r3, #0
 8005622:	f47f af6a 	bne.w	80054fa <_dtoa_r+0x7ea>
 8005626:	2001      	movs	r0, #1
 8005628:	e76f      	b.n	800550a <_dtoa_r+0x7fa>
 800562a:	f04f 0800 	mov.w	r8, #0
 800562e:	e7f6      	b.n	800561e <_dtoa_r+0x90e>
 8005630:	4698      	mov	r8, r3
 8005632:	e7f4      	b.n	800561e <_dtoa_r+0x90e>
 8005634:	f43f af7d 	beq.w	8005532 <_dtoa_r+0x822>
 8005638:	4618      	mov	r0, r3
 800563a:	301c      	adds	r0, #28
 800563c:	e772      	b.n	8005524 <_dtoa_r+0x814>
 800563e:	9b02      	ldr	r3, [sp, #8]
 8005640:	2b00      	cmp	r3, #0
 8005642:	dc36      	bgt.n	80056b2 <_dtoa_r+0x9a2>
 8005644:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005646:	2b02      	cmp	r3, #2
 8005648:	dd33      	ble.n	80056b2 <_dtoa_r+0x9a2>
 800564a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800564e:	f1bb 0f00 	cmp.w	fp, #0
 8005652:	d10d      	bne.n	8005670 <_dtoa_r+0x960>
 8005654:	4621      	mov	r1, r4
 8005656:	465b      	mov	r3, fp
 8005658:	2205      	movs	r2, #5
 800565a:	4628      	mov	r0, r5
 800565c:	f000 f9d0 	bl	8005a00 <__multadd>
 8005660:	4601      	mov	r1, r0
 8005662:	4604      	mov	r4, r0
 8005664:	4650      	mov	r0, sl
 8005666:	f000 fbe3 	bl	8005e30 <__mcmp>
 800566a:	2800      	cmp	r0, #0
 800566c:	f73f adb6 	bgt.w	80051dc <_dtoa_r+0x4cc>
 8005670:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005672:	9f08      	ldr	r7, [sp, #32]
 8005674:	ea6f 0903 	mvn.w	r9, r3
 8005678:	f04f 0800 	mov.w	r8, #0
 800567c:	4621      	mov	r1, r4
 800567e:	4628      	mov	r0, r5
 8005680:	f000 f99c 	bl	80059bc <_Bfree>
 8005684:	2e00      	cmp	r6, #0
 8005686:	f43f aea4 	beq.w	80053d2 <_dtoa_r+0x6c2>
 800568a:	f1b8 0f00 	cmp.w	r8, #0
 800568e:	d005      	beq.n	800569c <_dtoa_r+0x98c>
 8005690:	45b0      	cmp	r8, r6
 8005692:	d003      	beq.n	800569c <_dtoa_r+0x98c>
 8005694:	4641      	mov	r1, r8
 8005696:	4628      	mov	r0, r5
 8005698:	f000 f990 	bl	80059bc <_Bfree>
 800569c:	4631      	mov	r1, r6
 800569e:	4628      	mov	r0, r5
 80056a0:	f000 f98c 	bl	80059bc <_Bfree>
 80056a4:	e695      	b.n	80053d2 <_dtoa_r+0x6c2>
 80056a6:	2400      	movs	r4, #0
 80056a8:	4626      	mov	r6, r4
 80056aa:	e7e1      	b.n	8005670 <_dtoa_r+0x960>
 80056ac:	46c1      	mov	r9, r8
 80056ae:	4626      	mov	r6, r4
 80056b0:	e594      	b.n	80051dc <_dtoa_r+0x4cc>
 80056b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056b4:	f8dd b008 	ldr.w	fp, [sp, #8]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f000 80fc 	beq.w	80058b6 <_dtoa_r+0xba6>
 80056be:	2f00      	cmp	r7, #0
 80056c0:	dd05      	ble.n	80056ce <_dtoa_r+0x9be>
 80056c2:	4631      	mov	r1, r6
 80056c4:	463a      	mov	r2, r7
 80056c6:	4628      	mov	r0, r5
 80056c8:	f000 fb46 	bl	8005d58 <__lshift>
 80056cc:	4606      	mov	r6, r0
 80056ce:	f1b8 0f00 	cmp.w	r8, #0
 80056d2:	d05c      	beq.n	800578e <_dtoa_r+0xa7e>
 80056d4:	4628      	mov	r0, r5
 80056d6:	6871      	ldr	r1, [r6, #4]
 80056d8:	f000 f930 	bl	800593c <_Balloc>
 80056dc:	4607      	mov	r7, r0
 80056de:	b928      	cbnz	r0, 80056ec <_dtoa_r+0x9dc>
 80056e0:	4602      	mov	r2, r0
 80056e2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80056e6:	4b7e      	ldr	r3, [pc, #504]	; (80058e0 <_dtoa_r+0xbd0>)
 80056e8:	f7ff bb26 	b.w	8004d38 <_dtoa_r+0x28>
 80056ec:	6932      	ldr	r2, [r6, #16]
 80056ee:	f106 010c 	add.w	r1, r6, #12
 80056f2:	3202      	adds	r2, #2
 80056f4:	0092      	lsls	r2, r2, #2
 80056f6:	300c      	adds	r0, #12
 80056f8:	f000 f912 	bl	8005920 <memcpy>
 80056fc:	2201      	movs	r2, #1
 80056fe:	4639      	mov	r1, r7
 8005700:	4628      	mov	r0, r5
 8005702:	f000 fb29 	bl	8005d58 <__lshift>
 8005706:	46b0      	mov	r8, r6
 8005708:	4606      	mov	r6, r0
 800570a:	9b08      	ldr	r3, [sp, #32]
 800570c:	3301      	adds	r3, #1
 800570e:	9302      	str	r3, [sp, #8]
 8005710:	9b08      	ldr	r3, [sp, #32]
 8005712:	445b      	add	r3, fp
 8005714:	930a      	str	r3, [sp, #40]	; 0x28
 8005716:	9b04      	ldr	r3, [sp, #16]
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	9309      	str	r3, [sp, #36]	; 0x24
 800571e:	9b02      	ldr	r3, [sp, #8]
 8005720:	4621      	mov	r1, r4
 8005722:	4650      	mov	r0, sl
 8005724:	f103 3bff 	add.w	fp, r3, #4294967295
 8005728:	f7ff fa64 	bl	8004bf4 <quorem>
 800572c:	4603      	mov	r3, r0
 800572e:	4641      	mov	r1, r8
 8005730:	3330      	adds	r3, #48	; 0x30
 8005732:	9004      	str	r0, [sp, #16]
 8005734:	4650      	mov	r0, sl
 8005736:	930b      	str	r3, [sp, #44]	; 0x2c
 8005738:	f000 fb7a 	bl	8005e30 <__mcmp>
 800573c:	4632      	mov	r2, r6
 800573e:	9006      	str	r0, [sp, #24]
 8005740:	4621      	mov	r1, r4
 8005742:	4628      	mov	r0, r5
 8005744:	f000 fb90 	bl	8005e68 <__mdiff>
 8005748:	68c2      	ldr	r2, [r0, #12]
 800574a:	4607      	mov	r7, r0
 800574c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800574e:	bb02      	cbnz	r2, 8005792 <_dtoa_r+0xa82>
 8005750:	4601      	mov	r1, r0
 8005752:	4650      	mov	r0, sl
 8005754:	f000 fb6c 	bl	8005e30 <__mcmp>
 8005758:	4602      	mov	r2, r0
 800575a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800575c:	4639      	mov	r1, r7
 800575e:	4628      	mov	r0, r5
 8005760:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005764:	f000 f92a 	bl	80059bc <_Bfree>
 8005768:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800576a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800576c:	9f02      	ldr	r7, [sp, #8]
 800576e:	ea43 0102 	orr.w	r1, r3, r2
 8005772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005774:	430b      	orrs	r3, r1
 8005776:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005778:	d10d      	bne.n	8005796 <_dtoa_r+0xa86>
 800577a:	2b39      	cmp	r3, #57	; 0x39
 800577c:	d027      	beq.n	80057ce <_dtoa_r+0xabe>
 800577e:	9a06      	ldr	r2, [sp, #24]
 8005780:	2a00      	cmp	r2, #0
 8005782:	dd01      	ble.n	8005788 <_dtoa_r+0xa78>
 8005784:	9b04      	ldr	r3, [sp, #16]
 8005786:	3331      	adds	r3, #49	; 0x31
 8005788:	f88b 3000 	strb.w	r3, [fp]
 800578c:	e776      	b.n	800567c <_dtoa_r+0x96c>
 800578e:	4630      	mov	r0, r6
 8005790:	e7b9      	b.n	8005706 <_dtoa_r+0x9f6>
 8005792:	2201      	movs	r2, #1
 8005794:	e7e2      	b.n	800575c <_dtoa_r+0xa4c>
 8005796:	9906      	ldr	r1, [sp, #24]
 8005798:	2900      	cmp	r1, #0
 800579a:	db04      	blt.n	80057a6 <_dtoa_r+0xa96>
 800579c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800579e:	4301      	orrs	r1, r0
 80057a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057a2:	4301      	orrs	r1, r0
 80057a4:	d120      	bne.n	80057e8 <_dtoa_r+0xad8>
 80057a6:	2a00      	cmp	r2, #0
 80057a8:	ddee      	ble.n	8005788 <_dtoa_r+0xa78>
 80057aa:	4651      	mov	r1, sl
 80057ac:	2201      	movs	r2, #1
 80057ae:	4628      	mov	r0, r5
 80057b0:	9302      	str	r3, [sp, #8]
 80057b2:	f000 fad1 	bl	8005d58 <__lshift>
 80057b6:	4621      	mov	r1, r4
 80057b8:	4682      	mov	sl, r0
 80057ba:	f000 fb39 	bl	8005e30 <__mcmp>
 80057be:	2800      	cmp	r0, #0
 80057c0:	9b02      	ldr	r3, [sp, #8]
 80057c2:	dc02      	bgt.n	80057ca <_dtoa_r+0xaba>
 80057c4:	d1e0      	bne.n	8005788 <_dtoa_r+0xa78>
 80057c6:	07da      	lsls	r2, r3, #31
 80057c8:	d5de      	bpl.n	8005788 <_dtoa_r+0xa78>
 80057ca:	2b39      	cmp	r3, #57	; 0x39
 80057cc:	d1da      	bne.n	8005784 <_dtoa_r+0xa74>
 80057ce:	2339      	movs	r3, #57	; 0x39
 80057d0:	f88b 3000 	strb.w	r3, [fp]
 80057d4:	463b      	mov	r3, r7
 80057d6:	461f      	mov	r7, r3
 80057d8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80057dc:	3b01      	subs	r3, #1
 80057de:	2a39      	cmp	r2, #57	; 0x39
 80057e0:	d050      	beq.n	8005884 <_dtoa_r+0xb74>
 80057e2:	3201      	adds	r2, #1
 80057e4:	701a      	strb	r2, [r3, #0]
 80057e6:	e749      	b.n	800567c <_dtoa_r+0x96c>
 80057e8:	2a00      	cmp	r2, #0
 80057ea:	dd03      	ble.n	80057f4 <_dtoa_r+0xae4>
 80057ec:	2b39      	cmp	r3, #57	; 0x39
 80057ee:	d0ee      	beq.n	80057ce <_dtoa_r+0xabe>
 80057f0:	3301      	adds	r3, #1
 80057f2:	e7c9      	b.n	8005788 <_dtoa_r+0xa78>
 80057f4:	9a02      	ldr	r2, [sp, #8]
 80057f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80057f8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80057fc:	428a      	cmp	r2, r1
 80057fe:	d02a      	beq.n	8005856 <_dtoa_r+0xb46>
 8005800:	4651      	mov	r1, sl
 8005802:	2300      	movs	r3, #0
 8005804:	220a      	movs	r2, #10
 8005806:	4628      	mov	r0, r5
 8005808:	f000 f8fa 	bl	8005a00 <__multadd>
 800580c:	45b0      	cmp	r8, r6
 800580e:	4682      	mov	sl, r0
 8005810:	f04f 0300 	mov.w	r3, #0
 8005814:	f04f 020a 	mov.w	r2, #10
 8005818:	4641      	mov	r1, r8
 800581a:	4628      	mov	r0, r5
 800581c:	d107      	bne.n	800582e <_dtoa_r+0xb1e>
 800581e:	f000 f8ef 	bl	8005a00 <__multadd>
 8005822:	4680      	mov	r8, r0
 8005824:	4606      	mov	r6, r0
 8005826:	9b02      	ldr	r3, [sp, #8]
 8005828:	3301      	adds	r3, #1
 800582a:	9302      	str	r3, [sp, #8]
 800582c:	e777      	b.n	800571e <_dtoa_r+0xa0e>
 800582e:	f000 f8e7 	bl	8005a00 <__multadd>
 8005832:	4631      	mov	r1, r6
 8005834:	4680      	mov	r8, r0
 8005836:	2300      	movs	r3, #0
 8005838:	220a      	movs	r2, #10
 800583a:	4628      	mov	r0, r5
 800583c:	f000 f8e0 	bl	8005a00 <__multadd>
 8005840:	4606      	mov	r6, r0
 8005842:	e7f0      	b.n	8005826 <_dtoa_r+0xb16>
 8005844:	f1bb 0f00 	cmp.w	fp, #0
 8005848:	bfcc      	ite	gt
 800584a:	465f      	movgt	r7, fp
 800584c:	2701      	movle	r7, #1
 800584e:	f04f 0800 	mov.w	r8, #0
 8005852:	9a08      	ldr	r2, [sp, #32]
 8005854:	4417      	add	r7, r2
 8005856:	4651      	mov	r1, sl
 8005858:	2201      	movs	r2, #1
 800585a:	4628      	mov	r0, r5
 800585c:	9302      	str	r3, [sp, #8]
 800585e:	f000 fa7b 	bl	8005d58 <__lshift>
 8005862:	4621      	mov	r1, r4
 8005864:	4682      	mov	sl, r0
 8005866:	f000 fae3 	bl	8005e30 <__mcmp>
 800586a:	2800      	cmp	r0, #0
 800586c:	dcb2      	bgt.n	80057d4 <_dtoa_r+0xac4>
 800586e:	d102      	bne.n	8005876 <_dtoa_r+0xb66>
 8005870:	9b02      	ldr	r3, [sp, #8]
 8005872:	07db      	lsls	r3, r3, #31
 8005874:	d4ae      	bmi.n	80057d4 <_dtoa_r+0xac4>
 8005876:	463b      	mov	r3, r7
 8005878:	461f      	mov	r7, r3
 800587a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800587e:	2a30      	cmp	r2, #48	; 0x30
 8005880:	d0fa      	beq.n	8005878 <_dtoa_r+0xb68>
 8005882:	e6fb      	b.n	800567c <_dtoa_r+0x96c>
 8005884:	9a08      	ldr	r2, [sp, #32]
 8005886:	429a      	cmp	r2, r3
 8005888:	d1a5      	bne.n	80057d6 <_dtoa_r+0xac6>
 800588a:	2331      	movs	r3, #49	; 0x31
 800588c:	f109 0901 	add.w	r9, r9, #1
 8005890:	7013      	strb	r3, [r2, #0]
 8005892:	e6f3      	b.n	800567c <_dtoa_r+0x96c>
 8005894:	4b13      	ldr	r3, [pc, #76]	; (80058e4 <_dtoa_r+0xbd4>)
 8005896:	f7ff baa7 	b.w	8004de8 <_dtoa_r+0xd8>
 800589a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800589c:	2b00      	cmp	r3, #0
 800589e:	f47f aa80 	bne.w	8004da2 <_dtoa_r+0x92>
 80058a2:	4b11      	ldr	r3, [pc, #68]	; (80058e8 <_dtoa_r+0xbd8>)
 80058a4:	f7ff baa0 	b.w	8004de8 <_dtoa_r+0xd8>
 80058a8:	f1bb 0f00 	cmp.w	fp, #0
 80058ac:	dc03      	bgt.n	80058b6 <_dtoa_r+0xba6>
 80058ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	f73f aecc 	bgt.w	800564e <_dtoa_r+0x93e>
 80058b6:	9f08      	ldr	r7, [sp, #32]
 80058b8:	4621      	mov	r1, r4
 80058ba:	4650      	mov	r0, sl
 80058bc:	f7ff f99a 	bl	8004bf4 <quorem>
 80058c0:	9a08      	ldr	r2, [sp, #32]
 80058c2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80058c6:	f807 3b01 	strb.w	r3, [r7], #1
 80058ca:	1aba      	subs	r2, r7, r2
 80058cc:	4593      	cmp	fp, r2
 80058ce:	ddb9      	ble.n	8005844 <_dtoa_r+0xb34>
 80058d0:	4651      	mov	r1, sl
 80058d2:	2300      	movs	r3, #0
 80058d4:	220a      	movs	r2, #10
 80058d6:	4628      	mov	r0, r5
 80058d8:	f000 f892 	bl	8005a00 <__multadd>
 80058dc:	4682      	mov	sl, r0
 80058de:	e7eb      	b.n	80058b8 <_dtoa_r+0xba8>
 80058e0:	080085ff 	.word	0x080085ff
 80058e4:	08008558 	.word	0x08008558
 80058e8:	0800857c 	.word	0x0800857c

080058ec <_localeconv_r>:
 80058ec:	4800      	ldr	r0, [pc, #0]	; (80058f0 <_localeconv_r+0x4>)
 80058ee:	4770      	bx	lr
 80058f0:	20000170 	.word	0x20000170

080058f4 <malloc>:
 80058f4:	4b02      	ldr	r3, [pc, #8]	; (8005900 <malloc+0xc>)
 80058f6:	4601      	mov	r1, r0
 80058f8:	6818      	ldr	r0, [r3, #0]
 80058fa:	f000 bbfb 	b.w	80060f4 <_malloc_r>
 80058fe:	bf00      	nop
 8005900:	2000001c 	.word	0x2000001c

08005904 <memchr>:
 8005904:	4603      	mov	r3, r0
 8005906:	b510      	push	{r4, lr}
 8005908:	b2c9      	uxtb	r1, r1
 800590a:	4402      	add	r2, r0
 800590c:	4293      	cmp	r3, r2
 800590e:	4618      	mov	r0, r3
 8005910:	d101      	bne.n	8005916 <memchr+0x12>
 8005912:	2000      	movs	r0, #0
 8005914:	e003      	b.n	800591e <memchr+0x1a>
 8005916:	7804      	ldrb	r4, [r0, #0]
 8005918:	3301      	adds	r3, #1
 800591a:	428c      	cmp	r4, r1
 800591c:	d1f6      	bne.n	800590c <memchr+0x8>
 800591e:	bd10      	pop	{r4, pc}

08005920 <memcpy>:
 8005920:	440a      	add	r2, r1
 8005922:	4291      	cmp	r1, r2
 8005924:	f100 33ff 	add.w	r3, r0, #4294967295
 8005928:	d100      	bne.n	800592c <memcpy+0xc>
 800592a:	4770      	bx	lr
 800592c:	b510      	push	{r4, lr}
 800592e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005932:	4291      	cmp	r1, r2
 8005934:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005938:	d1f9      	bne.n	800592e <memcpy+0xe>
 800593a:	bd10      	pop	{r4, pc}

0800593c <_Balloc>:
 800593c:	b570      	push	{r4, r5, r6, lr}
 800593e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005940:	4604      	mov	r4, r0
 8005942:	460d      	mov	r5, r1
 8005944:	b976      	cbnz	r6, 8005964 <_Balloc+0x28>
 8005946:	2010      	movs	r0, #16
 8005948:	f7ff ffd4 	bl	80058f4 <malloc>
 800594c:	4602      	mov	r2, r0
 800594e:	6260      	str	r0, [r4, #36]	; 0x24
 8005950:	b920      	cbnz	r0, 800595c <_Balloc+0x20>
 8005952:	2166      	movs	r1, #102	; 0x66
 8005954:	4b17      	ldr	r3, [pc, #92]	; (80059b4 <_Balloc+0x78>)
 8005956:	4818      	ldr	r0, [pc, #96]	; (80059b8 <_Balloc+0x7c>)
 8005958:	f000 fd92 	bl	8006480 <__assert_func>
 800595c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005960:	6006      	str	r6, [r0, #0]
 8005962:	60c6      	str	r6, [r0, #12]
 8005964:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005966:	68f3      	ldr	r3, [r6, #12]
 8005968:	b183      	cbz	r3, 800598c <_Balloc+0x50>
 800596a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005972:	b9b8      	cbnz	r0, 80059a4 <_Balloc+0x68>
 8005974:	2101      	movs	r1, #1
 8005976:	fa01 f605 	lsl.w	r6, r1, r5
 800597a:	1d72      	adds	r2, r6, #5
 800597c:	4620      	mov	r0, r4
 800597e:	0092      	lsls	r2, r2, #2
 8005980:	f000 fb5e 	bl	8006040 <_calloc_r>
 8005984:	b160      	cbz	r0, 80059a0 <_Balloc+0x64>
 8005986:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800598a:	e00e      	b.n	80059aa <_Balloc+0x6e>
 800598c:	2221      	movs	r2, #33	; 0x21
 800598e:	2104      	movs	r1, #4
 8005990:	4620      	mov	r0, r4
 8005992:	f000 fb55 	bl	8006040 <_calloc_r>
 8005996:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005998:	60f0      	str	r0, [r6, #12]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1e4      	bne.n	800596a <_Balloc+0x2e>
 80059a0:	2000      	movs	r0, #0
 80059a2:	bd70      	pop	{r4, r5, r6, pc}
 80059a4:	6802      	ldr	r2, [r0, #0]
 80059a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80059aa:	2300      	movs	r3, #0
 80059ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80059b0:	e7f7      	b.n	80059a2 <_Balloc+0x66>
 80059b2:	bf00      	nop
 80059b4:	08008589 	.word	0x08008589
 80059b8:	08008610 	.word	0x08008610

080059bc <_Bfree>:
 80059bc:	b570      	push	{r4, r5, r6, lr}
 80059be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80059c0:	4605      	mov	r5, r0
 80059c2:	460c      	mov	r4, r1
 80059c4:	b976      	cbnz	r6, 80059e4 <_Bfree+0x28>
 80059c6:	2010      	movs	r0, #16
 80059c8:	f7ff ff94 	bl	80058f4 <malloc>
 80059cc:	4602      	mov	r2, r0
 80059ce:	6268      	str	r0, [r5, #36]	; 0x24
 80059d0:	b920      	cbnz	r0, 80059dc <_Bfree+0x20>
 80059d2:	218a      	movs	r1, #138	; 0x8a
 80059d4:	4b08      	ldr	r3, [pc, #32]	; (80059f8 <_Bfree+0x3c>)
 80059d6:	4809      	ldr	r0, [pc, #36]	; (80059fc <_Bfree+0x40>)
 80059d8:	f000 fd52 	bl	8006480 <__assert_func>
 80059dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80059e0:	6006      	str	r6, [r0, #0]
 80059e2:	60c6      	str	r6, [r0, #12]
 80059e4:	b13c      	cbz	r4, 80059f6 <_Bfree+0x3a>
 80059e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80059e8:	6862      	ldr	r2, [r4, #4]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80059f0:	6021      	str	r1, [r4, #0]
 80059f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80059f6:	bd70      	pop	{r4, r5, r6, pc}
 80059f8:	08008589 	.word	0x08008589
 80059fc:	08008610 	.word	0x08008610

08005a00 <__multadd>:
 8005a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a04:	4698      	mov	r8, r3
 8005a06:	460c      	mov	r4, r1
 8005a08:	2300      	movs	r3, #0
 8005a0a:	690e      	ldr	r6, [r1, #16]
 8005a0c:	4607      	mov	r7, r0
 8005a0e:	f101 0014 	add.w	r0, r1, #20
 8005a12:	6805      	ldr	r5, [r0, #0]
 8005a14:	3301      	adds	r3, #1
 8005a16:	b2a9      	uxth	r1, r5
 8005a18:	fb02 8101 	mla	r1, r2, r1, r8
 8005a1c:	0c2d      	lsrs	r5, r5, #16
 8005a1e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005a22:	fb02 c505 	mla	r5, r2, r5, ip
 8005a26:	b289      	uxth	r1, r1
 8005a28:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005a2c:	429e      	cmp	r6, r3
 8005a2e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005a32:	f840 1b04 	str.w	r1, [r0], #4
 8005a36:	dcec      	bgt.n	8005a12 <__multadd+0x12>
 8005a38:	f1b8 0f00 	cmp.w	r8, #0
 8005a3c:	d022      	beq.n	8005a84 <__multadd+0x84>
 8005a3e:	68a3      	ldr	r3, [r4, #8]
 8005a40:	42b3      	cmp	r3, r6
 8005a42:	dc19      	bgt.n	8005a78 <__multadd+0x78>
 8005a44:	6861      	ldr	r1, [r4, #4]
 8005a46:	4638      	mov	r0, r7
 8005a48:	3101      	adds	r1, #1
 8005a4a:	f7ff ff77 	bl	800593c <_Balloc>
 8005a4e:	4605      	mov	r5, r0
 8005a50:	b928      	cbnz	r0, 8005a5e <__multadd+0x5e>
 8005a52:	4602      	mov	r2, r0
 8005a54:	21b5      	movs	r1, #181	; 0xb5
 8005a56:	4b0d      	ldr	r3, [pc, #52]	; (8005a8c <__multadd+0x8c>)
 8005a58:	480d      	ldr	r0, [pc, #52]	; (8005a90 <__multadd+0x90>)
 8005a5a:	f000 fd11 	bl	8006480 <__assert_func>
 8005a5e:	6922      	ldr	r2, [r4, #16]
 8005a60:	f104 010c 	add.w	r1, r4, #12
 8005a64:	3202      	adds	r2, #2
 8005a66:	0092      	lsls	r2, r2, #2
 8005a68:	300c      	adds	r0, #12
 8005a6a:	f7ff ff59 	bl	8005920 <memcpy>
 8005a6e:	4621      	mov	r1, r4
 8005a70:	4638      	mov	r0, r7
 8005a72:	f7ff ffa3 	bl	80059bc <_Bfree>
 8005a76:	462c      	mov	r4, r5
 8005a78:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005a7c:	3601      	adds	r6, #1
 8005a7e:	f8c3 8014 	str.w	r8, [r3, #20]
 8005a82:	6126      	str	r6, [r4, #16]
 8005a84:	4620      	mov	r0, r4
 8005a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a8a:	bf00      	nop
 8005a8c:	080085ff 	.word	0x080085ff
 8005a90:	08008610 	.word	0x08008610

08005a94 <__hi0bits>:
 8005a94:	0c02      	lsrs	r2, r0, #16
 8005a96:	0412      	lsls	r2, r2, #16
 8005a98:	4603      	mov	r3, r0
 8005a9a:	b9ca      	cbnz	r2, 8005ad0 <__hi0bits+0x3c>
 8005a9c:	0403      	lsls	r3, r0, #16
 8005a9e:	2010      	movs	r0, #16
 8005aa0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005aa4:	bf04      	itt	eq
 8005aa6:	021b      	lsleq	r3, r3, #8
 8005aa8:	3008      	addeq	r0, #8
 8005aaa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005aae:	bf04      	itt	eq
 8005ab0:	011b      	lsleq	r3, r3, #4
 8005ab2:	3004      	addeq	r0, #4
 8005ab4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005ab8:	bf04      	itt	eq
 8005aba:	009b      	lsleq	r3, r3, #2
 8005abc:	3002      	addeq	r0, #2
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	db05      	blt.n	8005ace <__hi0bits+0x3a>
 8005ac2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005ac6:	f100 0001 	add.w	r0, r0, #1
 8005aca:	bf08      	it	eq
 8005acc:	2020      	moveq	r0, #32
 8005ace:	4770      	bx	lr
 8005ad0:	2000      	movs	r0, #0
 8005ad2:	e7e5      	b.n	8005aa0 <__hi0bits+0xc>

08005ad4 <__lo0bits>:
 8005ad4:	6803      	ldr	r3, [r0, #0]
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	f013 0007 	ands.w	r0, r3, #7
 8005adc:	d00b      	beq.n	8005af6 <__lo0bits+0x22>
 8005ade:	07d9      	lsls	r1, r3, #31
 8005ae0:	d422      	bmi.n	8005b28 <__lo0bits+0x54>
 8005ae2:	0798      	lsls	r0, r3, #30
 8005ae4:	bf49      	itett	mi
 8005ae6:	085b      	lsrmi	r3, r3, #1
 8005ae8:	089b      	lsrpl	r3, r3, #2
 8005aea:	2001      	movmi	r0, #1
 8005aec:	6013      	strmi	r3, [r2, #0]
 8005aee:	bf5c      	itt	pl
 8005af0:	2002      	movpl	r0, #2
 8005af2:	6013      	strpl	r3, [r2, #0]
 8005af4:	4770      	bx	lr
 8005af6:	b299      	uxth	r1, r3
 8005af8:	b909      	cbnz	r1, 8005afe <__lo0bits+0x2a>
 8005afa:	2010      	movs	r0, #16
 8005afc:	0c1b      	lsrs	r3, r3, #16
 8005afe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005b02:	bf04      	itt	eq
 8005b04:	0a1b      	lsreq	r3, r3, #8
 8005b06:	3008      	addeq	r0, #8
 8005b08:	0719      	lsls	r1, r3, #28
 8005b0a:	bf04      	itt	eq
 8005b0c:	091b      	lsreq	r3, r3, #4
 8005b0e:	3004      	addeq	r0, #4
 8005b10:	0799      	lsls	r1, r3, #30
 8005b12:	bf04      	itt	eq
 8005b14:	089b      	lsreq	r3, r3, #2
 8005b16:	3002      	addeq	r0, #2
 8005b18:	07d9      	lsls	r1, r3, #31
 8005b1a:	d403      	bmi.n	8005b24 <__lo0bits+0x50>
 8005b1c:	085b      	lsrs	r3, r3, #1
 8005b1e:	f100 0001 	add.w	r0, r0, #1
 8005b22:	d003      	beq.n	8005b2c <__lo0bits+0x58>
 8005b24:	6013      	str	r3, [r2, #0]
 8005b26:	4770      	bx	lr
 8005b28:	2000      	movs	r0, #0
 8005b2a:	4770      	bx	lr
 8005b2c:	2020      	movs	r0, #32
 8005b2e:	4770      	bx	lr

08005b30 <__i2b>:
 8005b30:	b510      	push	{r4, lr}
 8005b32:	460c      	mov	r4, r1
 8005b34:	2101      	movs	r1, #1
 8005b36:	f7ff ff01 	bl	800593c <_Balloc>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	b928      	cbnz	r0, 8005b4a <__i2b+0x1a>
 8005b3e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005b42:	4b04      	ldr	r3, [pc, #16]	; (8005b54 <__i2b+0x24>)
 8005b44:	4804      	ldr	r0, [pc, #16]	; (8005b58 <__i2b+0x28>)
 8005b46:	f000 fc9b 	bl	8006480 <__assert_func>
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	6144      	str	r4, [r0, #20]
 8005b4e:	6103      	str	r3, [r0, #16]
 8005b50:	bd10      	pop	{r4, pc}
 8005b52:	bf00      	nop
 8005b54:	080085ff 	.word	0x080085ff
 8005b58:	08008610 	.word	0x08008610

08005b5c <__multiply>:
 8005b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b60:	4614      	mov	r4, r2
 8005b62:	690a      	ldr	r2, [r1, #16]
 8005b64:	6923      	ldr	r3, [r4, #16]
 8005b66:	460d      	mov	r5, r1
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	bfbe      	ittt	lt
 8005b6c:	460b      	movlt	r3, r1
 8005b6e:	4625      	movlt	r5, r4
 8005b70:	461c      	movlt	r4, r3
 8005b72:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005b76:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005b7a:	68ab      	ldr	r3, [r5, #8]
 8005b7c:	6869      	ldr	r1, [r5, #4]
 8005b7e:	eb0a 0709 	add.w	r7, sl, r9
 8005b82:	42bb      	cmp	r3, r7
 8005b84:	b085      	sub	sp, #20
 8005b86:	bfb8      	it	lt
 8005b88:	3101      	addlt	r1, #1
 8005b8a:	f7ff fed7 	bl	800593c <_Balloc>
 8005b8e:	b930      	cbnz	r0, 8005b9e <__multiply+0x42>
 8005b90:	4602      	mov	r2, r0
 8005b92:	f240 115d 	movw	r1, #349	; 0x15d
 8005b96:	4b41      	ldr	r3, [pc, #260]	; (8005c9c <__multiply+0x140>)
 8005b98:	4841      	ldr	r0, [pc, #260]	; (8005ca0 <__multiply+0x144>)
 8005b9a:	f000 fc71 	bl	8006480 <__assert_func>
 8005b9e:	f100 0614 	add.w	r6, r0, #20
 8005ba2:	4633      	mov	r3, r6
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005baa:	4543      	cmp	r3, r8
 8005bac:	d31e      	bcc.n	8005bec <__multiply+0x90>
 8005bae:	f105 0c14 	add.w	ip, r5, #20
 8005bb2:	f104 0314 	add.w	r3, r4, #20
 8005bb6:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005bba:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005bbe:	9202      	str	r2, [sp, #8]
 8005bc0:	ebac 0205 	sub.w	r2, ip, r5
 8005bc4:	3a15      	subs	r2, #21
 8005bc6:	f022 0203 	bic.w	r2, r2, #3
 8005bca:	3204      	adds	r2, #4
 8005bcc:	f105 0115 	add.w	r1, r5, #21
 8005bd0:	458c      	cmp	ip, r1
 8005bd2:	bf38      	it	cc
 8005bd4:	2204      	movcc	r2, #4
 8005bd6:	9201      	str	r2, [sp, #4]
 8005bd8:	9a02      	ldr	r2, [sp, #8]
 8005bda:	9303      	str	r3, [sp, #12]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d808      	bhi.n	8005bf2 <__multiply+0x96>
 8005be0:	2f00      	cmp	r7, #0
 8005be2:	dc55      	bgt.n	8005c90 <__multiply+0x134>
 8005be4:	6107      	str	r7, [r0, #16]
 8005be6:	b005      	add	sp, #20
 8005be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bec:	f843 2b04 	str.w	r2, [r3], #4
 8005bf0:	e7db      	b.n	8005baa <__multiply+0x4e>
 8005bf2:	f8b3 a000 	ldrh.w	sl, [r3]
 8005bf6:	f1ba 0f00 	cmp.w	sl, #0
 8005bfa:	d020      	beq.n	8005c3e <__multiply+0xe2>
 8005bfc:	46b1      	mov	r9, r6
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f105 0e14 	add.w	lr, r5, #20
 8005c04:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005c08:	f8d9 b000 	ldr.w	fp, [r9]
 8005c0c:	b2a1      	uxth	r1, r4
 8005c0e:	fa1f fb8b 	uxth.w	fp, fp
 8005c12:	fb0a b101 	mla	r1, sl, r1, fp
 8005c16:	4411      	add	r1, r2
 8005c18:	f8d9 2000 	ldr.w	r2, [r9]
 8005c1c:	0c24      	lsrs	r4, r4, #16
 8005c1e:	0c12      	lsrs	r2, r2, #16
 8005c20:	fb0a 2404 	mla	r4, sl, r4, r2
 8005c24:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005c28:	b289      	uxth	r1, r1
 8005c2a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005c2e:	45f4      	cmp	ip, lr
 8005c30:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005c34:	f849 1b04 	str.w	r1, [r9], #4
 8005c38:	d8e4      	bhi.n	8005c04 <__multiply+0xa8>
 8005c3a:	9901      	ldr	r1, [sp, #4]
 8005c3c:	5072      	str	r2, [r6, r1]
 8005c3e:	9a03      	ldr	r2, [sp, #12]
 8005c40:	3304      	adds	r3, #4
 8005c42:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005c46:	f1b9 0f00 	cmp.w	r9, #0
 8005c4a:	d01f      	beq.n	8005c8c <__multiply+0x130>
 8005c4c:	46b6      	mov	lr, r6
 8005c4e:	f04f 0a00 	mov.w	sl, #0
 8005c52:	6834      	ldr	r4, [r6, #0]
 8005c54:	f105 0114 	add.w	r1, r5, #20
 8005c58:	880a      	ldrh	r2, [r1, #0]
 8005c5a:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005c5e:	b2a4      	uxth	r4, r4
 8005c60:	fb09 b202 	mla	r2, r9, r2, fp
 8005c64:	4492      	add	sl, r2
 8005c66:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005c6a:	f84e 4b04 	str.w	r4, [lr], #4
 8005c6e:	f851 4b04 	ldr.w	r4, [r1], #4
 8005c72:	f8be 2000 	ldrh.w	r2, [lr]
 8005c76:	0c24      	lsrs	r4, r4, #16
 8005c78:	fb09 2404 	mla	r4, r9, r4, r2
 8005c7c:	458c      	cmp	ip, r1
 8005c7e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005c82:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005c86:	d8e7      	bhi.n	8005c58 <__multiply+0xfc>
 8005c88:	9a01      	ldr	r2, [sp, #4]
 8005c8a:	50b4      	str	r4, [r6, r2]
 8005c8c:	3604      	adds	r6, #4
 8005c8e:	e7a3      	b.n	8005bd8 <__multiply+0x7c>
 8005c90:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d1a5      	bne.n	8005be4 <__multiply+0x88>
 8005c98:	3f01      	subs	r7, #1
 8005c9a:	e7a1      	b.n	8005be0 <__multiply+0x84>
 8005c9c:	080085ff 	.word	0x080085ff
 8005ca0:	08008610 	.word	0x08008610

08005ca4 <__pow5mult>:
 8005ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ca8:	4615      	mov	r5, r2
 8005caa:	f012 0203 	ands.w	r2, r2, #3
 8005cae:	4606      	mov	r6, r0
 8005cb0:	460f      	mov	r7, r1
 8005cb2:	d007      	beq.n	8005cc4 <__pow5mult+0x20>
 8005cb4:	4c25      	ldr	r4, [pc, #148]	; (8005d4c <__pow5mult+0xa8>)
 8005cb6:	3a01      	subs	r2, #1
 8005cb8:	2300      	movs	r3, #0
 8005cba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005cbe:	f7ff fe9f 	bl	8005a00 <__multadd>
 8005cc2:	4607      	mov	r7, r0
 8005cc4:	10ad      	asrs	r5, r5, #2
 8005cc6:	d03d      	beq.n	8005d44 <__pow5mult+0xa0>
 8005cc8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005cca:	b97c      	cbnz	r4, 8005cec <__pow5mult+0x48>
 8005ccc:	2010      	movs	r0, #16
 8005cce:	f7ff fe11 	bl	80058f4 <malloc>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	6270      	str	r0, [r6, #36]	; 0x24
 8005cd6:	b928      	cbnz	r0, 8005ce4 <__pow5mult+0x40>
 8005cd8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005cdc:	4b1c      	ldr	r3, [pc, #112]	; (8005d50 <__pow5mult+0xac>)
 8005cde:	481d      	ldr	r0, [pc, #116]	; (8005d54 <__pow5mult+0xb0>)
 8005ce0:	f000 fbce 	bl	8006480 <__assert_func>
 8005ce4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ce8:	6004      	str	r4, [r0, #0]
 8005cea:	60c4      	str	r4, [r0, #12]
 8005cec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005cf0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005cf4:	b94c      	cbnz	r4, 8005d0a <__pow5mult+0x66>
 8005cf6:	f240 2171 	movw	r1, #625	; 0x271
 8005cfa:	4630      	mov	r0, r6
 8005cfc:	f7ff ff18 	bl	8005b30 <__i2b>
 8005d00:	2300      	movs	r3, #0
 8005d02:	4604      	mov	r4, r0
 8005d04:	f8c8 0008 	str.w	r0, [r8, #8]
 8005d08:	6003      	str	r3, [r0, #0]
 8005d0a:	f04f 0900 	mov.w	r9, #0
 8005d0e:	07eb      	lsls	r3, r5, #31
 8005d10:	d50a      	bpl.n	8005d28 <__pow5mult+0x84>
 8005d12:	4639      	mov	r1, r7
 8005d14:	4622      	mov	r2, r4
 8005d16:	4630      	mov	r0, r6
 8005d18:	f7ff ff20 	bl	8005b5c <__multiply>
 8005d1c:	4680      	mov	r8, r0
 8005d1e:	4639      	mov	r1, r7
 8005d20:	4630      	mov	r0, r6
 8005d22:	f7ff fe4b 	bl	80059bc <_Bfree>
 8005d26:	4647      	mov	r7, r8
 8005d28:	106d      	asrs	r5, r5, #1
 8005d2a:	d00b      	beq.n	8005d44 <__pow5mult+0xa0>
 8005d2c:	6820      	ldr	r0, [r4, #0]
 8005d2e:	b938      	cbnz	r0, 8005d40 <__pow5mult+0x9c>
 8005d30:	4622      	mov	r2, r4
 8005d32:	4621      	mov	r1, r4
 8005d34:	4630      	mov	r0, r6
 8005d36:	f7ff ff11 	bl	8005b5c <__multiply>
 8005d3a:	6020      	str	r0, [r4, #0]
 8005d3c:	f8c0 9000 	str.w	r9, [r0]
 8005d40:	4604      	mov	r4, r0
 8005d42:	e7e4      	b.n	8005d0e <__pow5mult+0x6a>
 8005d44:	4638      	mov	r0, r7
 8005d46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d4a:	bf00      	nop
 8005d4c:	08008760 	.word	0x08008760
 8005d50:	08008589 	.word	0x08008589
 8005d54:	08008610 	.word	0x08008610

08005d58 <__lshift>:
 8005d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d5c:	460c      	mov	r4, r1
 8005d5e:	4607      	mov	r7, r0
 8005d60:	4691      	mov	r9, r2
 8005d62:	6923      	ldr	r3, [r4, #16]
 8005d64:	6849      	ldr	r1, [r1, #4]
 8005d66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005d6a:	68a3      	ldr	r3, [r4, #8]
 8005d6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005d70:	f108 0601 	add.w	r6, r8, #1
 8005d74:	42b3      	cmp	r3, r6
 8005d76:	db0b      	blt.n	8005d90 <__lshift+0x38>
 8005d78:	4638      	mov	r0, r7
 8005d7a:	f7ff fddf 	bl	800593c <_Balloc>
 8005d7e:	4605      	mov	r5, r0
 8005d80:	b948      	cbnz	r0, 8005d96 <__lshift+0x3e>
 8005d82:	4602      	mov	r2, r0
 8005d84:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005d88:	4b27      	ldr	r3, [pc, #156]	; (8005e28 <__lshift+0xd0>)
 8005d8a:	4828      	ldr	r0, [pc, #160]	; (8005e2c <__lshift+0xd4>)
 8005d8c:	f000 fb78 	bl	8006480 <__assert_func>
 8005d90:	3101      	adds	r1, #1
 8005d92:	005b      	lsls	r3, r3, #1
 8005d94:	e7ee      	b.n	8005d74 <__lshift+0x1c>
 8005d96:	2300      	movs	r3, #0
 8005d98:	f100 0114 	add.w	r1, r0, #20
 8005d9c:	f100 0210 	add.w	r2, r0, #16
 8005da0:	4618      	mov	r0, r3
 8005da2:	4553      	cmp	r3, sl
 8005da4:	db33      	blt.n	8005e0e <__lshift+0xb6>
 8005da6:	6920      	ldr	r0, [r4, #16]
 8005da8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005dac:	f104 0314 	add.w	r3, r4, #20
 8005db0:	f019 091f 	ands.w	r9, r9, #31
 8005db4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005db8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005dbc:	d02b      	beq.n	8005e16 <__lshift+0xbe>
 8005dbe:	468a      	mov	sl, r1
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f1c9 0e20 	rsb	lr, r9, #32
 8005dc6:	6818      	ldr	r0, [r3, #0]
 8005dc8:	fa00 f009 	lsl.w	r0, r0, r9
 8005dcc:	4302      	orrs	r2, r0
 8005dce:	f84a 2b04 	str.w	r2, [sl], #4
 8005dd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dd6:	459c      	cmp	ip, r3
 8005dd8:	fa22 f20e 	lsr.w	r2, r2, lr
 8005ddc:	d8f3      	bhi.n	8005dc6 <__lshift+0x6e>
 8005dde:	ebac 0304 	sub.w	r3, ip, r4
 8005de2:	3b15      	subs	r3, #21
 8005de4:	f023 0303 	bic.w	r3, r3, #3
 8005de8:	3304      	adds	r3, #4
 8005dea:	f104 0015 	add.w	r0, r4, #21
 8005dee:	4584      	cmp	ip, r0
 8005df0:	bf38      	it	cc
 8005df2:	2304      	movcc	r3, #4
 8005df4:	50ca      	str	r2, [r1, r3]
 8005df6:	b10a      	cbz	r2, 8005dfc <__lshift+0xa4>
 8005df8:	f108 0602 	add.w	r6, r8, #2
 8005dfc:	3e01      	subs	r6, #1
 8005dfe:	4638      	mov	r0, r7
 8005e00:	4621      	mov	r1, r4
 8005e02:	612e      	str	r6, [r5, #16]
 8005e04:	f7ff fdda 	bl	80059bc <_Bfree>
 8005e08:	4628      	mov	r0, r5
 8005e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e0e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005e12:	3301      	adds	r3, #1
 8005e14:	e7c5      	b.n	8005da2 <__lshift+0x4a>
 8005e16:	3904      	subs	r1, #4
 8005e18:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e1c:	459c      	cmp	ip, r3
 8005e1e:	f841 2f04 	str.w	r2, [r1, #4]!
 8005e22:	d8f9      	bhi.n	8005e18 <__lshift+0xc0>
 8005e24:	e7ea      	b.n	8005dfc <__lshift+0xa4>
 8005e26:	bf00      	nop
 8005e28:	080085ff 	.word	0x080085ff
 8005e2c:	08008610 	.word	0x08008610

08005e30 <__mcmp>:
 8005e30:	4603      	mov	r3, r0
 8005e32:	690a      	ldr	r2, [r1, #16]
 8005e34:	6900      	ldr	r0, [r0, #16]
 8005e36:	b530      	push	{r4, r5, lr}
 8005e38:	1a80      	subs	r0, r0, r2
 8005e3a:	d10d      	bne.n	8005e58 <__mcmp+0x28>
 8005e3c:	3314      	adds	r3, #20
 8005e3e:	3114      	adds	r1, #20
 8005e40:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005e44:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005e48:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005e4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005e50:	4295      	cmp	r5, r2
 8005e52:	d002      	beq.n	8005e5a <__mcmp+0x2a>
 8005e54:	d304      	bcc.n	8005e60 <__mcmp+0x30>
 8005e56:	2001      	movs	r0, #1
 8005e58:	bd30      	pop	{r4, r5, pc}
 8005e5a:	42a3      	cmp	r3, r4
 8005e5c:	d3f4      	bcc.n	8005e48 <__mcmp+0x18>
 8005e5e:	e7fb      	b.n	8005e58 <__mcmp+0x28>
 8005e60:	f04f 30ff 	mov.w	r0, #4294967295
 8005e64:	e7f8      	b.n	8005e58 <__mcmp+0x28>
	...

08005e68 <__mdiff>:
 8005e68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e6c:	460c      	mov	r4, r1
 8005e6e:	4606      	mov	r6, r0
 8005e70:	4611      	mov	r1, r2
 8005e72:	4620      	mov	r0, r4
 8005e74:	4692      	mov	sl, r2
 8005e76:	f7ff ffdb 	bl	8005e30 <__mcmp>
 8005e7a:	1e05      	subs	r5, r0, #0
 8005e7c:	d111      	bne.n	8005ea2 <__mdiff+0x3a>
 8005e7e:	4629      	mov	r1, r5
 8005e80:	4630      	mov	r0, r6
 8005e82:	f7ff fd5b 	bl	800593c <_Balloc>
 8005e86:	4602      	mov	r2, r0
 8005e88:	b928      	cbnz	r0, 8005e96 <__mdiff+0x2e>
 8005e8a:	f240 2132 	movw	r1, #562	; 0x232
 8005e8e:	4b3c      	ldr	r3, [pc, #240]	; (8005f80 <__mdiff+0x118>)
 8005e90:	483c      	ldr	r0, [pc, #240]	; (8005f84 <__mdiff+0x11c>)
 8005e92:	f000 faf5 	bl	8006480 <__assert_func>
 8005e96:	2301      	movs	r3, #1
 8005e98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005e9c:	4610      	mov	r0, r2
 8005e9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ea2:	bfa4      	itt	ge
 8005ea4:	4653      	movge	r3, sl
 8005ea6:	46a2      	movge	sl, r4
 8005ea8:	4630      	mov	r0, r6
 8005eaa:	f8da 1004 	ldr.w	r1, [sl, #4]
 8005eae:	bfa6      	itte	ge
 8005eb0:	461c      	movge	r4, r3
 8005eb2:	2500      	movge	r5, #0
 8005eb4:	2501      	movlt	r5, #1
 8005eb6:	f7ff fd41 	bl	800593c <_Balloc>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	b918      	cbnz	r0, 8005ec6 <__mdiff+0x5e>
 8005ebe:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005ec2:	4b2f      	ldr	r3, [pc, #188]	; (8005f80 <__mdiff+0x118>)
 8005ec4:	e7e4      	b.n	8005e90 <__mdiff+0x28>
 8005ec6:	f100 0814 	add.w	r8, r0, #20
 8005eca:	f8da 7010 	ldr.w	r7, [sl, #16]
 8005ece:	60c5      	str	r5, [r0, #12]
 8005ed0:	f04f 0c00 	mov.w	ip, #0
 8005ed4:	f10a 0514 	add.w	r5, sl, #20
 8005ed8:	f10a 0010 	add.w	r0, sl, #16
 8005edc:	46c2      	mov	sl, r8
 8005ede:	6926      	ldr	r6, [r4, #16]
 8005ee0:	f104 0914 	add.w	r9, r4, #20
 8005ee4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8005ee8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005eec:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8005ef0:	f859 3b04 	ldr.w	r3, [r9], #4
 8005ef4:	fa1f f18b 	uxth.w	r1, fp
 8005ef8:	4461      	add	r1, ip
 8005efa:	fa1f fc83 	uxth.w	ip, r3
 8005efe:	0c1b      	lsrs	r3, r3, #16
 8005f00:	eba1 010c 	sub.w	r1, r1, ip
 8005f04:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005f08:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005f0c:	b289      	uxth	r1, r1
 8005f0e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005f12:	454e      	cmp	r6, r9
 8005f14:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005f18:	f84a 3b04 	str.w	r3, [sl], #4
 8005f1c:	d8e6      	bhi.n	8005eec <__mdiff+0x84>
 8005f1e:	1b33      	subs	r3, r6, r4
 8005f20:	3b15      	subs	r3, #21
 8005f22:	f023 0303 	bic.w	r3, r3, #3
 8005f26:	3415      	adds	r4, #21
 8005f28:	3304      	adds	r3, #4
 8005f2a:	42a6      	cmp	r6, r4
 8005f2c:	bf38      	it	cc
 8005f2e:	2304      	movcc	r3, #4
 8005f30:	441d      	add	r5, r3
 8005f32:	4443      	add	r3, r8
 8005f34:	461e      	mov	r6, r3
 8005f36:	462c      	mov	r4, r5
 8005f38:	4574      	cmp	r4, lr
 8005f3a:	d30e      	bcc.n	8005f5a <__mdiff+0xf2>
 8005f3c:	f10e 0103 	add.w	r1, lr, #3
 8005f40:	1b49      	subs	r1, r1, r5
 8005f42:	f021 0103 	bic.w	r1, r1, #3
 8005f46:	3d03      	subs	r5, #3
 8005f48:	45ae      	cmp	lr, r5
 8005f4a:	bf38      	it	cc
 8005f4c:	2100      	movcc	r1, #0
 8005f4e:	4419      	add	r1, r3
 8005f50:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005f54:	b18b      	cbz	r3, 8005f7a <__mdiff+0x112>
 8005f56:	6117      	str	r7, [r2, #16]
 8005f58:	e7a0      	b.n	8005e9c <__mdiff+0x34>
 8005f5a:	f854 8b04 	ldr.w	r8, [r4], #4
 8005f5e:	fa1f f188 	uxth.w	r1, r8
 8005f62:	4461      	add	r1, ip
 8005f64:	1408      	asrs	r0, r1, #16
 8005f66:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8005f6a:	b289      	uxth	r1, r1
 8005f6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005f70:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005f74:	f846 1b04 	str.w	r1, [r6], #4
 8005f78:	e7de      	b.n	8005f38 <__mdiff+0xd0>
 8005f7a:	3f01      	subs	r7, #1
 8005f7c:	e7e8      	b.n	8005f50 <__mdiff+0xe8>
 8005f7e:	bf00      	nop
 8005f80:	080085ff 	.word	0x080085ff
 8005f84:	08008610 	.word	0x08008610

08005f88 <__d2b>:
 8005f88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005f8c:	2101      	movs	r1, #1
 8005f8e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005f92:	4690      	mov	r8, r2
 8005f94:	461d      	mov	r5, r3
 8005f96:	f7ff fcd1 	bl	800593c <_Balloc>
 8005f9a:	4604      	mov	r4, r0
 8005f9c:	b930      	cbnz	r0, 8005fac <__d2b+0x24>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	f240 310a 	movw	r1, #778	; 0x30a
 8005fa4:	4b24      	ldr	r3, [pc, #144]	; (8006038 <__d2b+0xb0>)
 8005fa6:	4825      	ldr	r0, [pc, #148]	; (800603c <__d2b+0xb4>)
 8005fa8:	f000 fa6a 	bl	8006480 <__assert_func>
 8005fac:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005fb0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005fb4:	bb2d      	cbnz	r5, 8006002 <__d2b+0x7a>
 8005fb6:	9301      	str	r3, [sp, #4]
 8005fb8:	f1b8 0300 	subs.w	r3, r8, #0
 8005fbc:	d026      	beq.n	800600c <__d2b+0x84>
 8005fbe:	4668      	mov	r0, sp
 8005fc0:	9300      	str	r3, [sp, #0]
 8005fc2:	f7ff fd87 	bl	8005ad4 <__lo0bits>
 8005fc6:	9900      	ldr	r1, [sp, #0]
 8005fc8:	b1f0      	cbz	r0, 8006008 <__d2b+0x80>
 8005fca:	9a01      	ldr	r2, [sp, #4]
 8005fcc:	f1c0 0320 	rsb	r3, r0, #32
 8005fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd4:	430b      	orrs	r3, r1
 8005fd6:	40c2      	lsrs	r2, r0
 8005fd8:	6163      	str	r3, [r4, #20]
 8005fda:	9201      	str	r2, [sp, #4]
 8005fdc:	9b01      	ldr	r3, [sp, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	bf14      	ite	ne
 8005fe2:	2102      	movne	r1, #2
 8005fe4:	2101      	moveq	r1, #1
 8005fe6:	61a3      	str	r3, [r4, #24]
 8005fe8:	6121      	str	r1, [r4, #16]
 8005fea:	b1c5      	cbz	r5, 800601e <__d2b+0x96>
 8005fec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005ff0:	4405      	add	r5, r0
 8005ff2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005ff6:	603d      	str	r5, [r7, #0]
 8005ff8:	6030      	str	r0, [r6, #0]
 8005ffa:	4620      	mov	r0, r4
 8005ffc:	b002      	add	sp, #8
 8005ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006002:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006006:	e7d6      	b.n	8005fb6 <__d2b+0x2e>
 8006008:	6161      	str	r1, [r4, #20]
 800600a:	e7e7      	b.n	8005fdc <__d2b+0x54>
 800600c:	a801      	add	r0, sp, #4
 800600e:	f7ff fd61 	bl	8005ad4 <__lo0bits>
 8006012:	2101      	movs	r1, #1
 8006014:	9b01      	ldr	r3, [sp, #4]
 8006016:	6121      	str	r1, [r4, #16]
 8006018:	6163      	str	r3, [r4, #20]
 800601a:	3020      	adds	r0, #32
 800601c:	e7e5      	b.n	8005fea <__d2b+0x62>
 800601e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006022:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006026:	6038      	str	r0, [r7, #0]
 8006028:	6918      	ldr	r0, [r3, #16]
 800602a:	f7ff fd33 	bl	8005a94 <__hi0bits>
 800602e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006032:	6031      	str	r1, [r6, #0]
 8006034:	e7e1      	b.n	8005ffa <__d2b+0x72>
 8006036:	bf00      	nop
 8006038:	080085ff 	.word	0x080085ff
 800603c:	08008610 	.word	0x08008610

08006040 <_calloc_r>:
 8006040:	b538      	push	{r3, r4, r5, lr}
 8006042:	fb02 f501 	mul.w	r5, r2, r1
 8006046:	4629      	mov	r1, r5
 8006048:	f000 f854 	bl	80060f4 <_malloc_r>
 800604c:	4604      	mov	r4, r0
 800604e:	b118      	cbz	r0, 8006058 <_calloc_r+0x18>
 8006050:	462a      	mov	r2, r5
 8006052:	2100      	movs	r1, #0
 8006054:	f7fe f946 	bl	80042e4 <memset>
 8006058:	4620      	mov	r0, r4
 800605a:	bd38      	pop	{r3, r4, r5, pc}

0800605c <_free_r>:
 800605c:	b538      	push	{r3, r4, r5, lr}
 800605e:	4605      	mov	r5, r0
 8006060:	2900      	cmp	r1, #0
 8006062:	d043      	beq.n	80060ec <_free_r+0x90>
 8006064:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006068:	1f0c      	subs	r4, r1, #4
 800606a:	2b00      	cmp	r3, #0
 800606c:	bfb8      	it	lt
 800606e:	18e4      	addlt	r4, r4, r3
 8006070:	f000 fa62 	bl	8006538 <__malloc_lock>
 8006074:	4a1e      	ldr	r2, [pc, #120]	; (80060f0 <_free_r+0x94>)
 8006076:	6813      	ldr	r3, [r2, #0]
 8006078:	4610      	mov	r0, r2
 800607a:	b933      	cbnz	r3, 800608a <_free_r+0x2e>
 800607c:	6063      	str	r3, [r4, #4]
 800607e:	6014      	str	r4, [r2, #0]
 8006080:	4628      	mov	r0, r5
 8006082:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006086:	f000 ba5d 	b.w	8006544 <__malloc_unlock>
 800608a:	42a3      	cmp	r3, r4
 800608c:	d90a      	bls.n	80060a4 <_free_r+0x48>
 800608e:	6821      	ldr	r1, [r4, #0]
 8006090:	1862      	adds	r2, r4, r1
 8006092:	4293      	cmp	r3, r2
 8006094:	bf01      	itttt	eq
 8006096:	681a      	ldreq	r2, [r3, #0]
 8006098:	685b      	ldreq	r3, [r3, #4]
 800609a:	1852      	addeq	r2, r2, r1
 800609c:	6022      	streq	r2, [r4, #0]
 800609e:	6063      	str	r3, [r4, #4]
 80060a0:	6004      	str	r4, [r0, #0]
 80060a2:	e7ed      	b.n	8006080 <_free_r+0x24>
 80060a4:	461a      	mov	r2, r3
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	b10b      	cbz	r3, 80060ae <_free_r+0x52>
 80060aa:	42a3      	cmp	r3, r4
 80060ac:	d9fa      	bls.n	80060a4 <_free_r+0x48>
 80060ae:	6811      	ldr	r1, [r2, #0]
 80060b0:	1850      	adds	r0, r2, r1
 80060b2:	42a0      	cmp	r0, r4
 80060b4:	d10b      	bne.n	80060ce <_free_r+0x72>
 80060b6:	6820      	ldr	r0, [r4, #0]
 80060b8:	4401      	add	r1, r0
 80060ba:	1850      	adds	r0, r2, r1
 80060bc:	4283      	cmp	r3, r0
 80060be:	6011      	str	r1, [r2, #0]
 80060c0:	d1de      	bne.n	8006080 <_free_r+0x24>
 80060c2:	6818      	ldr	r0, [r3, #0]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	4401      	add	r1, r0
 80060c8:	6011      	str	r1, [r2, #0]
 80060ca:	6053      	str	r3, [r2, #4]
 80060cc:	e7d8      	b.n	8006080 <_free_r+0x24>
 80060ce:	d902      	bls.n	80060d6 <_free_r+0x7a>
 80060d0:	230c      	movs	r3, #12
 80060d2:	602b      	str	r3, [r5, #0]
 80060d4:	e7d4      	b.n	8006080 <_free_r+0x24>
 80060d6:	6820      	ldr	r0, [r4, #0]
 80060d8:	1821      	adds	r1, r4, r0
 80060da:	428b      	cmp	r3, r1
 80060dc:	bf01      	itttt	eq
 80060de:	6819      	ldreq	r1, [r3, #0]
 80060e0:	685b      	ldreq	r3, [r3, #4]
 80060e2:	1809      	addeq	r1, r1, r0
 80060e4:	6021      	streq	r1, [r4, #0]
 80060e6:	6063      	str	r3, [r4, #4]
 80060e8:	6054      	str	r4, [r2, #4]
 80060ea:	e7c9      	b.n	8006080 <_free_r+0x24>
 80060ec:	bd38      	pop	{r3, r4, r5, pc}
 80060ee:	bf00      	nop
 80060f0:	20000618 	.word	0x20000618

080060f4 <_malloc_r>:
 80060f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f6:	1ccd      	adds	r5, r1, #3
 80060f8:	f025 0503 	bic.w	r5, r5, #3
 80060fc:	3508      	adds	r5, #8
 80060fe:	2d0c      	cmp	r5, #12
 8006100:	bf38      	it	cc
 8006102:	250c      	movcc	r5, #12
 8006104:	2d00      	cmp	r5, #0
 8006106:	4606      	mov	r6, r0
 8006108:	db01      	blt.n	800610e <_malloc_r+0x1a>
 800610a:	42a9      	cmp	r1, r5
 800610c:	d903      	bls.n	8006116 <_malloc_r+0x22>
 800610e:	230c      	movs	r3, #12
 8006110:	6033      	str	r3, [r6, #0]
 8006112:	2000      	movs	r0, #0
 8006114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006116:	f000 fa0f 	bl	8006538 <__malloc_lock>
 800611a:	4921      	ldr	r1, [pc, #132]	; (80061a0 <_malloc_r+0xac>)
 800611c:	680a      	ldr	r2, [r1, #0]
 800611e:	4614      	mov	r4, r2
 8006120:	b99c      	cbnz	r4, 800614a <_malloc_r+0x56>
 8006122:	4f20      	ldr	r7, [pc, #128]	; (80061a4 <_malloc_r+0xb0>)
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	b923      	cbnz	r3, 8006132 <_malloc_r+0x3e>
 8006128:	4621      	mov	r1, r4
 800612a:	4630      	mov	r0, r6
 800612c:	f000 f998 	bl	8006460 <_sbrk_r>
 8006130:	6038      	str	r0, [r7, #0]
 8006132:	4629      	mov	r1, r5
 8006134:	4630      	mov	r0, r6
 8006136:	f000 f993 	bl	8006460 <_sbrk_r>
 800613a:	1c43      	adds	r3, r0, #1
 800613c:	d123      	bne.n	8006186 <_malloc_r+0x92>
 800613e:	230c      	movs	r3, #12
 8006140:	4630      	mov	r0, r6
 8006142:	6033      	str	r3, [r6, #0]
 8006144:	f000 f9fe 	bl	8006544 <__malloc_unlock>
 8006148:	e7e3      	b.n	8006112 <_malloc_r+0x1e>
 800614a:	6823      	ldr	r3, [r4, #0]
 800614c:	1b5b      	subs	r3, r3, r5
 800614e:	d417      	bmi.n	8006180 <_malloc_r+0x8c>
 8006150:	2b0b      	cmp	r3, #11
 8006152:	d903      	bls.n	800615c <_malloc_r+0x68>
 8006154:	6023      	str	r3, [r4, #0]
 8006156:	441c      	add	r4, r3
 8006158:	6025      	str	r5, [r4, #0]
 800615a:	e004      	b.n	8006166 <_malloc_r+0x72>
 800615c:	6863      	ldr	r3, [r4, #4]
 800615e:	42a2      	cmp	r2, r4
 8006160:	bf0c      	ite	eq
 8006162:	600b      	streq	r3, [r1, #0]
 8006164:	6053      	strne	r3, [r2, #4]
 8006166:	4630      	mov	r0, r6
 8006168:	f000 f9ec 	bl	8006544 <__malloc_unlock>
 800616c:	f104 000b 	add.w	r0, r4, #11
 8006170:	1d23      	adds	r3, r4, #4
 8006172:	f020 0007 	bic.w	r0, r0, #7
 8006176:	1ac2      	subs	r2, r0, r3
 8006178:	d0cc      	beq.n	8006114 <_malloc_r+0x20>
 800617a:	1a1b      	subs	r3, r3, r0
 800617c:	50a3      	str	r3, [r4, r2]
 800617e:	e7c9      	b.n	8006114 <_malloc_r+0x20>
 8006180:	4622      	mov	r2, r4
 8006182:	6864      	ldr	r4, [r4, #4]
 8006184:	e7cc      	b.n	8006120 <_malloc_r+0x2c>
 8006186:	1cc4      	adds	r4, r0, #3
 8006188:	f024 0403 	bic.w	r4, r4, #3
 800618c:	42a0      	cmp	r0, r4
 800618e:	d0e3      	beq.n	8006158 <_malloc_r+0x64>
 8006190:	1a21      	subs	r1, r4, r0
 8006192:	4630      	mov	r0, r6
 8006194:	f000 f964 	bl	8006460 <_sbrk_r>
 8006198:	3001      	adds	r0, #1
 800619a:	d1dd      	bne.n	8006158 <_malloc_r+0x64>
 800619c:	e7cf      	b.n	800613e <_malloc_r+0x4a>
 800619e:	bf00      	nop
 80061a0:	20000618 	.word	0x20000618
 80061a4:	2000061c 	.word	0x2000061c

080061a8 <__ssputs_r>:
 80061a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061ac:	688e      	ldr	r6, [r1, #8]
 80061ae:	4682      	mov	sl, r0
 80061b0:	429e      	cmp	r6, r3
 80061b2:	460c      	mov	r4, r1
 80061b4:	4690      	mov	r8, r2
 80061b6:	461f      	mov	r7, r3
 80061b8:	d838      	bhi.n	800622c <__ssputs_r+0x84>
 80061ba:	898a      	ldrh	r2, [r1, #12]
 80061bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80061c0:	d032      	beq.n	8006228 <__ssputs_r+0x80>
 80061c2:	6825      	ldr	r5, [r4, #0]
 80061c4:	6909      	ldr	r1, [r1, #16]
 80061c6:	3301      	adds	r3, #1
 80061c8:	eba5 0901 	sub.w	r9, r5, r1
 80061cc:	6965      	ldr	r5, [r4, #20]
 80061ce:	444b      	add	r3, r9
 80061d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80061d8:	106d      	asrs	r5, r5, #1
 80061da:	429d      	cmp	r5, r3
 80061dc:	bf38      	it	cc
 80061de:	461d      	movcc	r5, r3
 80061e0:	0553      	lsls	r3, r2, #21
 80061e2:	d531      	bpl.n	8006248 <__ssputs_r+0xa0>
 80061e4:	4629      	mov	r1, r5
 80061e6:	f7ff ff85 	bl	80060f4 <_malloc_r>
 80061ea:	4606      	mov	r6, r0
 80061ec:	b950      	cbnz	r0, 8006204 <__ssputs_r+0x5c>
 80061ee:	230c      	movs	r3, #12
 80061f0:	f04f 30ff 	mov.w	r0, #4294967295
 80061f4:	f8ca 3000 	str.w	r3, [sl]
 80061f8:	89a3      	ldrh	r3, [r4, #12]
 80061fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061fe:	81a3      	strh	r3, [r4, #12]
 8006200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006204:	464a      	mov	r2, r9
 8006206:	6921      	ldr	r1, [r4, #16]
 8006208:	f7ff fb8a 	bl	8005920 <memcpy>
 800620c:	89a3      	ldrh	r3, [r4, #12]
 800620e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006216:	81a3      	strh	r3, [r4, #12]
 8006218:	6126      	str	r6, [r4, #16]
 800621a:	444e      	add	r6, r9
 800621c:	6026      	str	r6, [r4, #0]
 800621e:	463e      	mov	r6, r7
 8006220:	6165      	str	r5, [r4, #20]
 8006222:	eba5 0509 	sub.w	r5, r5, r9
 8006226:	60a5      	str	r5, [r4, #8]
 8006228:	42be      	cmp	r6, r7
 800622a:	d900      	bls.n	800622e <__ssputs_r+0x86>
 800622c:	463e      	mov	r6, r7
 800622e:	4632      	mov	r2, r6
 8006230:	4641      	mov	r1, r8
 8006232:	6820      	ldr	r0, [r4, #0]
 8006234:	f000 f966 	bl	8006504 <memmove>
 8006238:	68a3      	ldr	r3, [r4, #8]
 800623a:	6822      	ldr	r2, [r4, #0]
 800623c:	1b9b      	subs	r3, r3, r6
 800623e:	4432      	add	r2, r6
 8006240:	2000      	movs	r0, #0
 8006242:	60a3      	str	r3, [r4, #8]
 8006244:	6022      	str	r2, [r4, #0]
 8006246:	e7db      	b.n	8006200 <__ssputs_r+0x58>
 8006248:	462a      	mov	r2, r5
 800624a:	f000 f981 	bl	8006550 <_realloc_r>
 800624e:	4606      	mov	r6, r0
 8006250:	2800      	cmp	r0, #0
 8006252:	d1e1      	bne.n	8006218 <__ssputs_r+0x70>
 8006254:	4650      	mov	r0, sl
 8006256:	6921      	ldr	r1, [r4, #16]
 8006258:	f7ff ff00 	bl	800605c <_free_r>
 800625c:	e7c7      	b.n	80061ee <__ssputs_r+0x46>
	...

08006260 <_svfiprintf_r>:
 8006260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006264:	4698      	mov	r8, r3
 8006266:	898b      	ldrh	r3, [r1, #12]
 8006268:	4607      	mov	r7, r0
 800626a:	061b      	lsls	r3, r3, #24
 800626c:	460d      	mov	r5, r1
 800626e:	4614      	mov	r4, r2
 8006270:	b09d      	sub	sp, #116	; 0x74
 8006272:	d50e      	bpl.n	8006292 <_svfiprintf_r+0x32>
 8006274:	690b      	ldr	r3, [r1, #16]
 8006276:	b963      	cbnz	r3, 8006292 <_svfiprintf_r+0x32>
 8006278:	2140      	movs	r1, #64	; 0x40
 800627a:	f7ff ff3b 	bl	80060f4 <_malloc_r>
 800627e:	6028      	str	r0, [r5, #0]
 8006280:	6128      	str	r0, [r5, #16]
 8006282:	b920      	cbnz	r0, 800628e <_svfiprintf_r+0x2e>
 8006284:	230c      	movs	r3, #12
 8006286:	603b      	str	r3, [r7, #0]
 8006288:	f04f 30ff 	mov.w	r0, #4294967295
 800628c:	e0d1      	b.n	8006432 <_svfiprintf_r+0x1d2>
 800628e:	2340      	movs	r3, #64	; 0x40
 8006290:	616b      	str	r3, [r5, #20]
 8006292:	2300      	movs	r3, #0
 8006294:	9309      	str	r3, [sp, #36]	; 0x24
 8006296:	2320      	movs	r3, #32
 8006298:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800629c:	2330      	movs	r3, #48	; 0x30
 800629e:	f04f 0901 	mov.w	r9, #1
 80062a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80062a6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800644c <_svfiprintf_r+0x1ec>
 80062aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062ae:	4623      	mov	r3, r4
 80062b0:	469a      	mov	sl, r3
 80062b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062b6:	b10a      	cbz	r2, 80062bc <_svfiprintf_r+0x5c>
 80062b8:	2a25      	cmp	r2, #37	; 0x25
 80062ba:	d1f9      	bne.n	80062b0 <_svfiprintf_r+0x50>
 80062bc:	ebba 0b04 	subs.w	fp, sl, r4
 80062c0:	d00b      	beq.n	80062da <_svfiprintf_r+0x7a>
 80062c2:	465b      	mov	r3, fp
 80062c4:	4622      	mov	r2, r4
 80062c6:	4629      	mov	r1, r5
 80062c8:	4638      	mov	r0, r7
 80062ca:	f7ff ff6d 	bl	80061a8 <__ssputs_r>
 80062ce:	3001      	adds	r0, #1
 80062d0:	f000 80aa 	beq.w	8006428 <_svfiprintf_r+0x1c8>
 80062d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062d6:	445a      	add	r2, fp
 80062d8:	9209      	str	r2, [sp, #36]	; 0x24
 80062da:	f89a 3000 	ldrb.w	r3, [sl]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	f000 80a2 	beq.w	8006428 <_svfiprintf_r+0x1c8>
 80062e4:	2300      	movs	r3, #0
 80062e6:	f04f 32ff 	mov.w	r2, #4294967295
 80062ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062ee:	f10a 0a01 	add.w	sl, sl, #1
 80062f2:	9304      	str	r3, [sp, #16]
 80062f4:	9307      	str	r3, [sp, #28]
 80062f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062fa:	931a      	str	r3, [sp, #104]	; 0x68
 80062fc:	4654      	mov	r4, sl
 80062fe:	2205      	movs	r2, #5
 8006300:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006304:	4851      	ldr	r0, [pc, #324]	; (800644c <_svfiprintf_r+0x1ec>)
 8006306:	f7ff fafd 	bl	8005904 <memchr>
 800630a:	9a04      	ldr	r2, [sp, #16]
 800630c:	b9d8      	cbnz	r0, 8006346 <_svfiprintf_r+0xe6>
 800630e:	06d0      	lsls	r0, r2, #27
 8006310:	bf44      	itt	mi
 8006312:	2320      	movmi	r3, #32
 8006314:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006318:	0711      	lsls	r1, r2, #28
 800631a:	bf44      	itt	mi
 800631c:	232b      	movmi	r3, #43	; 0x2b
 800631e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006322:	f89a 3000 	ldrb.w	r3, [sl]
 8006326:	2b2a      	cmp	r3, #42	; 0x2a
 8006328:	d015      	beq.n	8006356 <_svfiprintf_r+0xf6>
 800632a:	4654      	mov	r4, sl
 800632c:	2000      	movs	r0, #0
 800632e:	f04f 0c0a 	mov.w	ip, #10
 8006332:	9a07      	ldr	r2, [sp, #28]
 8006334:	4621      	mov	r1, r4
 8006336:	f811 3b01 	ldrb.w	r3, [r1], #1
 800633a:	3b30      	subs	r3, #48	; 0x30
 800633c:	2b09      	cmp	r3, #9
 800633e:	d94e      	bls.n	80063de <_svfiprintf_r+0x17e>
 8006340:	b1b0      	cbz	r0, 8006370 <_svfiprintf_r+0x110>
 8006342:	9207      	str	r2, [sp, #28]
 8006344:	e014      	b.n	8006370 <_svfiprintf_r+0x110>
 8006346:	eba0 0308 	sub.w	r3, r0, r8
 800634a:	fa09 f303 	lsl.w	r3, r9, r3
 800634e:	4313      	orrs	r3, r2
 8006350:	46a2      	mov	sl, r4
 8006352:	9304      	str	r3, [sp, #16]
 8006354:	e7d2      	b.n	80062fc <_svfiprintf_r+0x9c>
 8006356:	9b03      	ldr	r3, [sp, #12]
 8006358:	1d19      	adds	r1, r3, #4
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	9103      	str	r1, [sp, #12]
 800635e:	2b00      	cmp	r3, #0
 8006360:	bfbb      	ittet	lt
 8006362:	425b      	neglt	r3, r3
 8006364:	f042 0202 	orrlt.w	r2, r2, #2
 8006368:	9307      	strge	r3, [sp, #28]
 800636a:	9307      	strlt	r3, [sp, #28]
 800636c:	bfb8      	it	lt
 800636e:	9204      	strlt	r2, [sp, #16]
 8006370:	7823      	ldrb	r3, [r4, #0]
 8006372:	2b2e      	cmp	r3, #46	; 0x2e
 8006374:	d10c      	bne.n	8006390 <_svfiprintf_r+0x130>
 8006376:	7863      	ldrb	r3, [r4, #1]
 8006378:	2b2a      	cmp	r3, #42	; 0x2a
 800637a:	d135      	bne.n	80063e8 <_svfiprintf_r+0x188>
 800637c:	9b03      	ldr	r3, [sp, #12]
 800637e:	3402      	adds	r4, #2
 8006380:	1d1a      	adds	r2, r3, #4
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	9203      	str	r2, [sp, #12]
 8006386:	2b00      	cmp	r3, #0
 8006388:	bfb8      	it	lt
 800638a:	f04f 33ff 	movlt.w	r3, #4294967295
 800638e:	9305      	str	r3, [sp, #20]
 8006390:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800645c <_svfiprintf_r+0x1fc>
 8006394:	2203      	movs	r2, #3
 8006396:	4650      	mov	r0, sl
 8006398:	7821      	ldrb	r1, [r4, #0]
 800639a:	f7ff fab3 	bl	8005904 <memchr>
 800639e:	b140      	cbz	r0, 80063b2 <_svfiprintf_r+0x152>
 80063a0:	2340      	movs	r3, #64	; 0x40
 80063a2:	eba0 000a 	sub.w	r0, r0, sl
 80063a6:	fa03 f000 	lsl.w	r0, r3, r0
 80063aa:	9b04      	ldr	r3, [sp, #16]
 80063ac:	3401      	adds	r4, #1
 80063ae:	4303      	orrs	r3, r0
 80063b0:	9304      	str	r3, [sp, #16]
 80063b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063b6:	2206      	movs	r2, #6
 80063b8:	4825      	ldr	r0, [pc, #148]	; (8006450 <_svfiprintf_r+0x1f0>)
 80063ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063be:	f7ff faa1 	bl	8005904 <memchr>
 80063c2:	2800      	cmp	r0, #0
 80063c4:	d038      	beq.n	8006438 <_svfiprintf_r+0x1d8>
 80063c6:	4b23      	ldr	r3, [pc, #140]	; (8006454 <_svfiprintf_r+0x1f4>)
 80063c8:	bb1b      	cbnz	r3, 8006412 <_svfiprintf_r+0x1b2>
 80063ca:	9b03      	ldr	r3, [sp, #12]
 80063cc:	3307      	adds	r3, #7
 80063ce:	f023 0307 	bic.w	r3, r3, #7
 80063d2:	3308      	adds	r3, #8
 80063d4:	9303      	str	r3, [sp, #12]
 80063d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063d8:	4433      	add	r3, r6
 80063da:	9309      	str	r3, [sp, #36]	; 0x24
 80063dc:	e767      	b.n	80062ae <_svfiprintf_r+0x4e>
 80063de:	460c      	mov	r4, r1
 80063e0:	2001      	movs	r0, #1
 80063e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80063e6:	e7a5      	b.n	8006334 <_svfiprintf_r+0xd4>
 80063e8:	2300      	movs	r3, #0
 80063ea:	f04f 0c0a 	mov.w	ip, #10
 80063ee:	4619      	mov	r1, r3
 80063f0:	3401      	adds	r4, #1
 80063f2:	9305      	str	r3, [sp, #20]
 80063f4:	4620      	mov	r0, r4
 80063f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063fa:	3a30      	subs	r2, #48	; 0x30
 80063fc:	2a09      	cmp	r2, #9
 80063fe:	d903      	bls.n	8006408 <_svfiprintf_r+0x1a8>
 8006400:	2b00      	cmp	r3, #0
 8006402:	d0c5      	beq.n	8006390 <_svfiprintf_r+0x130>
 8006404:	9105      	str	r1, [sp, #20]
 8006406:	e7c3      	b.n	8006390 <_svfiprintf_r+0x130>
 8006408:	4604      	mov	r4, r0
 800640a:	2301      	movs	r3, #1
 800640c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006410:	e7f0      	b.n	80063f4 <_svfiprintf_r+0x194>
 8006412:	ab03      	add	r3, sp, #12
 8006414:	9300      	str	r3, [sp, #0]
 8006416:	462a      	mov	r2, r5
 8006418:	4638      	mov	r0, r7
 800641a:	4b0f      	ldr	r3, [pc, #60]	; (8006458 <_svfiprintf_r+0x1f8>)
 800641c:	a904      	add	r1, sp, #16
 800641e:	f7fe f807 	bl	8004430 <_printf_float>
 8006422:	1c42      	adds	r2, r0, #1
 8006424:	4606      	mov	r6, r0
 8006426:	d1d6      	bne.n	80063d6 <_svfiprintf_r+0x176>
 8006428:	89ab      	ldrh	r3, [r5, #12]
 800642a:	065b      	lsls	r3, r3, #25
 800642c:	f53f af2c 	bmi.w	8006288 <_svfiprintf_r+0x28>
 8006430:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006432:	b01d      	add	sp, #116	; 0x74
 8006434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006438:	ab03      	add	r3, sp, #12
 800643a:	9300      	str	r3, [sp, #0]
 800643c:	462a      	mov	r2, r5
 800643e:	4638      	mov	r0, r7
 8006440:	4b05      	ldr	r3, [pc, #20]	; (8006458 <_svfiprintf_r+0x1f8>)
 8006442:	a904      	add	r1, sp, #16
 8006444:	f7fe fa90 	bl	8004968 <_printf_i>
 8006448:	e7eb      	b.n	8006422 <_svfiprintf_r+0x1c2>
 800644a:	bf00      	nop
 800644c:	0800876c 	.word	0x0800876c
 8006450:	08008776 	.word	0x08008776
 8006454:	08004431 	.word	0x08004431
 8006458:	080061a9 	.word	0x080061a9
 800645c:	08008772 	.word	0x08008772

08006460 <_sbrk_r>:
 8006460:	b538      	push	{r3, r4, r5, lr}
 8006462:	2300      	movs	r3, #0
 8006464:	4d05      	ldr	r5, [pc, #20]	; (800647c <_sbrk_r+0x1c>)
 8006466:	4604      	mov	r4, r0
 8006468:	4608      	mov	r0, r1
 800646a:	602b      	str	r3, [r5, #0]
 800646c:	f7fb fed8 	bl	8002220 <_sbrk>
 8006470:	1c43      	adds	r3, r0, #1
 8006472:	d102      	bne.n	800647a <_sbrk_r+0x1a>
 8006474:	682b      	ldr	r3, [r5, #0]
 8006476:	b103      	cbz	r3, 800647a <_sbrk_r+0x1a>
 8006478:	6023      	str	r3, [r4, #0]
 800647a:	bd38      	pop	{r3, r4, r5, pc}
 800647c:	2000075c 	.word	0x2000075c

08006480 <__assert_func>:
 8006480:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006482:	4614      	mov	r4, r2
 8006484:	461a      	mov	r2, r3
 8006486:	4b09      	ldr	r3, [pc, #36]	; (80064ac <__assert_func+0x2c>)
 8006488:	4605      	mov	r5, r0
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68d8      	ldr	r0, [r3, #12]
 800648e:	b14c      	cbz	r4, 80064a4 <__assert_func+0x24>
 8006490:	4b07      	ldr	r3, [pc, #28]	; (80064b0 <__assert_func+0x30>)
 8006492:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006496:	9100      	str	r1, [sp, #0]
 8006498:	462b      	mov	r3, r5
 800649a:	4906      	ldr	r1, [pc, #24]	; (80064b4 <__assert_func+0x34>)
 800649c:	f000 f80e 	bl	80064bc <fiprintf>
 80064a0:	f000 faa2 	bl	80069e8 <abort>
 80064a4:	4b04      	ldr	r3, [pc, #16]	; (80064b8 <__assert_func+0x38>)
 80064a6:	461c      	mov	r4, r3
 80064a8:	e7f3      	b.n	8006492 <__assert_func+0x12>
 80064aa:	bf00      	nop
 80064ac:	2000001c 	.word	0x2000001c
 80064b0:	0800877d 	.word	0x0800877d
 80064b4:	0800878a 	.word	0x0800878a
 80064b8:	080087b8 	.word	0x080087b8

080064bc <fiprintf>:
 80064bc:	b40e      	push	{r1, r2, r3}
 80064be:	b503      	push	{r0, r1, lr}
 80064c0:	4601      	mov	r1, r0
 80064c2:	ab03      	add	r3, sp, #12
 80064c4:	4805      	ldr	r0, [pc, #20]	; (80064dc <fiprintf+0x20>)
 80064c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80064ca:	6800      	ldr	r0, [r0, #0]
 80064cc:	9301      	str	r3, [sp, #4]
 80064ce:	f000 f88d 	bl	80065ec <_vfiprintf_r>
 80064d2:	b002      	add	sp, #8
 80064d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80064d8:	b003      	add	sp, #12
 80064da:	4770      	bx	lr
 80064dc:	2000001c 	.word	0x2000001c

080064e0 <__ascii_mbtowc>:
 80064e0:	b082      	sub	sp, #8
 80064e2:	b901      	cbnz	r1, 80064e6 <__ascii_mbtowc+0x6>
 80064e4:	a901      	add	r1, sp, #4
 80064e6:	b142      	cbz	r2, 80064fa <__ascii_mbtowc+0x1a>
 80064e8:	b14b      	cbz	r3, 80064fe <__ascii_mbtowc+0x1e>
 80064ea:	7813      	ldrb	r3, [r2, #0]
 80064ec:	600b      	str	r3, [r1, #0]
 80064ee:	7812      	ldrb	r2, [r2, #0]
 80064f0:	1e10      	subs	r0, r2, #0
 80064f2:	bf18      	it	ne
 80064f4:	2001      	movne	r0, #1
 80064f6:	b002      	add	sp, #8
 80064f8:	4770      	bx	lr
 80064fa:	4610      	mov	r0, r2
 80064fc:	e7fb      	b.n	80064f6 <__ascii_mbtowc+0x16>
 80064fe:	f06f 0001 	mvn.w	r0, #1
 8006502:	e7f8      	b.n	80064f6 <__ascii_mbtowc+0x16>

08006504 <memmove>:
 8006504:	4288      	cmp	r0, r1
 8006506:	b510      	push	{r4, lr}
 8006508:	eb01 0402 	add.w	r4, r1, r2
 800650c:	d902      	bls.n	8006514 <memmove+0x10>
 800650e:	4284      	cmp	r4, r0
 8006510:	4623      	mov	r3, r4
 8006512:	d807      	bhi.n	8006524 <memmove+0x20>
 8006514:	1e43      	subs	r3, r0, #1
 8006516:	42a1      	cmp	r1, r4
 8006518:	d008      	beq.n	800652c <memmove+0x28>
 800651a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800651e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006522:	e7f8      	b.n	8006516 <memmove+0x12>
 8006524:	4601      	mov	r1, r0
 8006526:	4402      	add	r2, r0
 8006528:	428a      	cmp	r2, r1
 800652a:	d100      	bne.n	800652e <memmove+0x2a>
 800652c:	bd10      	pop	{r4, pc}
 800652e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006532:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006536:	e7f7      	b.n	8006528 <memmove+0x24>

08006538 <__malloc_lock>:
 8006538:	4801      	ldr	r0, [pc, #4]	; (8006540 <__malloc_lock+0x8>)
 800653a:	f000 bc15 	b.w	8006d68 <__retarget_lock_acquire_recursive>
 800653e:	bf00      	nop
 8006540:	20000764 	.word	0x20000764

08006544 <__malloc_unlock>:
 8006544:	4801      	ldr	r0, [pc, #4]	; (800654c <__malloc_unlock+0x8>)
 8006546:	f000 bc10 	b.w	8006d6a <__retarget_lock_release_recursive>
 800654a:	bf00      	nop
 800654c:	20000764 	.word	0x20000764

08006550 <_realloc_r>:
 8006550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006552:	4607      	mov	r7, r0
 8006554:	4614      	mov	r4, r2
 8006556:	460e      	mov	r6, r1
 8006558:	b921      	cbnz	r1, 8006564 <_realloc_r+0x14>
 800655a:	4611      	mov	r1, r2
 800655c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006560:	f7ff bdc8 	b.w	80060f4 <_malloc_r>
 8006564:	b922      	cbnz	r2, 8006570 <_realloc_r+0x20>
 8006566:	f7ff fd79 	bl	800605c <_free_r>
 800656a:	4625      	mov	r5, r4
 800656c:	4628      	mov	r0, r5
 800656e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006570:	f000 fc60 	bl	8006e34 <_malloc_usable_size_r>
 8006574:	42a0      	cmp	r0, r4
 8006576:	d20f      	bcs.n	8006598 <_realloc_r+0x48>
 8006578:	4621      	mov	r1, r4
 800657a:	4638      	mov	r0, r7
 800657c:	f7ff fdba 	bl	80060f4 <_malloc_r>
 8006580:	4605      	mov	r5, r0
 8006582:	2800      	cmp	r0, #0
 8006584:	d0f2      	beq.n	800656c <_realloc_r+0x1c>
 8006586:	4631      	mov	r1, r6
 8006588:	4622      	mov	r2, r4
 800658a:	f7ff f9c9 	bl	8005920 <memcpy>
 800658e:	4631      	mov	r1, r6
 8006590:	4638      	mov	r0, r7
 8006592:	f7ff fd63 	bl	800605c <_free_r>
 8006596:	e7e9      	b.n	800656c <_realloc_r+0x1c>
 8006598:	4635      	mov	r5, r6
 800659a:	e7e7      	b.n	800656c <_realloc_r+0x1c>

0800659c <__sfputc_r>:
 800659c:	6893      	ldr	r3, [r2, #8]
 800659e:	b410      	push	{r4}
 80065a0:	3b01      	subs	r3, #1
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	6093      	str	r3, [r2, #8]
 80065a6:	da07      	bge.n	80065b8 <__sfputc_r+0x1c>
 80065a8:	6994      	ldr	r4, [r2, #24]
 80065aa:	42a3      	cmp	r3, r4
 80065ac:	db01      	blt.n	80065b2 <__sfputc_r+0x16>
 80065ae:	290a      	cmp	r1, #10
 80065b0:	d102      	bne.n	80065b8 <__sfputc_r+0x1c>
 80065b2:	bc10      	pop	{r4}
 80065b4:	f000 b94a 	b.w	800684c <__swbuf_r>
 80065b8:	6813      	ldr	r3, [r2, #0]
 80065ba:	1c58      	adds	r0, r3, #1
 80065bc:	6010      	str	r0, [r2, #0]
 80065be:	7019      	strb	r1, [r3, #0]
 80065c0:	4608      	mov	r0, r1
 80065c2:	bc10      	pop	{r4}
 80065c4:	4770      	bx	lr

080065c6 <__sfputs_r>:
 80065c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065c8:	4606      	mov	r6, r0
 80065ca:	460f      	mov	r7, r1
 80065cc:	4614      	mov	r4, r2
 80065ce:	18d5      	adds	r5, r2, r3
 80065d0:	42ac      	cmp	r4, r5
 80065d2:	d101      	bne.n	80065d8 <__sfputs_r+0x12>
 80065d4:	2000      	movs	r0, #0
 80065d6:	e007      	b.n	80065e8 <__sfputs_r+0x22>
 80065d8:	463a      	mov	r2, r7
 80065da:	4630      	mov	r0, r6
 80065dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065e0:	f7ff ffdc 	bl	800659c <__sfputc_r>
 80065e4:	1c43      	adds	r3, r0, #1
 80065e6:	d1f3      	bne.n	80065d0 <__sfputs_r+0xa>
 80065e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080065ec <_vfiprintf_r>:
 80065ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065f0:	460d      	mov	r5, r1
 80065f2:	4614      	mov	r4, r2
 80065f4:	4698      	mov	r8, r3
 80065f6:	4606      	mov	r6, r0
 80065f8:	b09d      	sub	sp, #116	; 0x74
 80065fa:	b118      	cbz	r0, 8006604 <_vfiprintf_r+0x18>
 80065fc:	6983      	ldr	r3, [r0, #24]
 80065fe:	b90b      	cbnz	r3, 8006604 <_vfiprintf_r+0x18>
 8006600:	f000 fb14 	bl	8006c2c <__sinit>
 8006604:	4b89      	ldr	r3, [pc, #548]	; (800682c <_vfiprintf_r+0x240>)
 8006606:	429d      	cmp	r5, r3
 8006608:	d11b      	bne.n	8006642 <_vfiprintf_r+0x56>
 800660a:	6875      	ldr	r5, [r6, #4]
 800660c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800660e:	07d9      	lsls	r1, r3, #31
 8006610:	d405      	bmi.n	800661e <_vfiprintf_r+0x32>
 8006612:	89ab      	ldrh	r3, [r5, #12]
 8006614:	059a      	lsls	r2, r3, #22
 8006616:	d402      	bmi.n	800661e <_vfiprintf_r+0x32>
 8006618:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800661a:	f000 fba5 	bl	8006d68 <__retarget_lock_acquire_recursive>
 800661e:	89ab      	ldrh	r3, [r5, #12]
 8006620:	071b      	lsls	r3, r3, #28
 8006622:	d501      	bpl.n	8006628 <_vfiprintf_r+0x3c>
 8006624:	692b      	ldr	r3, [r5, #16]
 8006626:	b9eb      	cbnz	r3, 8006664 <_vfiprintf_r+0x78>
 8006628:	4629      	mov	r1, r5
 800662a:	4630      	mov	r0, r6
 800662c:	f000 f96e 	bl	800690c <__swsetup_r>
 8006630:	b1c0      	cbz	r0, 8006664 <_vfiprintf_r+0x78>
 8006632:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006634:	07dc      	lsls	r4, r3, #31
 8006636:	d50e      	bpl.n	8006656 <_vfiprintf_r+0x6a>
 8006638:	f04f 30ff 	mov.w	r0, #4294967295
 800663c:	b01d      	add	sp, #116	; 0x74
 800663e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006642:	4b7b      	ldr	r3, [pc, #492]	; (8006830 <_vfiprintf_r+0x244>)
 8006644:	429d      	cmp	r5, r3
 8006646:	d101      	bne.n	800664c <_vfiprintf_r+0x60>
 8006648:	68b5      	ldr	r5, [r6, #8]
 800664a:	e7df      	b.n	800660c <_vfiprintf_r+0x20>
 800664c:	4b79      	ldr	r3, [pc, #484]	; (8006834 <_vfiprintf_r+0x248>)
 800664e:	429d      	cmp	r5, r3
 8006650:	bf08      	it	eq
 8006652:	68f5      	ldreq	r5, [r6, #12]
 8006654:	e7da      	b.n	800660c <_vfiprintf_r+0x20>
 8006656:	89ab      	ldrh	r3, [r5, #12]
 8006658:	0598      	lsls	r0, r3, #22
 800665a:	d4ed      	bmi.n	8006638 <_vfiprintf_r+0x4c>
 800665c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800665e:	f000 fb84 	bl	8006d6a <__retarget_lock_release_recursive>
 8006662:	e7e9      	b.n	8006638 <_vfiprintf_r+0x4c>
 8006664:	2300      	movs	r3, #0
 8006666:	9309      	str	r3, [sp, #36]	; 0x24
 8006668:	2320      	movs	r3, #32
 800666a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800666e:	2330      	movs	r3, #48	; 0x30
 8006670:	f04f 0901 	mov.w	r9, #1
 8006674:	f8cd 800c 	str.w	r8, [sp, #12]
 8006678:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006838 <_vfiprintf_r+0x24c>
 800667c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006680:	4623      	mov	r3, r4
 8006682:	469a      	mov	sl, r3
 8006684:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006688:	b10a      	cbz	r2, 800668e <_vfiprintf_r+0xa2>
 800668a:	2a25      	cmp	r2, #37	; 0x25
 800668c:	d1f9      	bne.n	8006682 <_vfiprintf_r+0x96>
 800668e:	ebba 0b04 	subs.w	fp, sl, r4
 8006692:	d00b      	beq.n	80066ac <_vfiprintf_r+0xc0>
 8006694:	465b      	mov	r3, fp
 8006696:	4622      	mov	r2, r4
 8006698:	4629      	mov	r1, r5
 800669a:	4630      	mov	r0, r6
 800669c:	f7ff ff93 	bl	80065c6 <__sfputs_r>
 80066a0:	3001      	adds	r0, #1
 80066a2:	f000 80aa 	beq.w	80067fa <_vfiprintf_r+0x20e>
 80066a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066a8:	445a      	add	r2, fp
 80066aa:	9209      	str	r2, [sp, #36]	; 0x24
 80066ac:	f89a 3000 	ldrb.w	r3, [sl]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f000 80a2 	beq.w	80067fa <_vfiprintf_r+0x20e>
 80066b6:	2300      	movs	r3, #0
 80066b8:	f04f 32ff 	mov.w	r2, #4294967295
 80066bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066c0:	f10a 0a01 	add.w	sl, sl, #1
 80066c4:	9304      	str	r3, [sp, #16]
 80066c6:	9307      	str	r3, [sp, #28]
 80066c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066cc:	931a      	str	r3, [sp, #104]	; 0x68
 80066ce:	4654      	mov	r4, sl
 80066d0:	2205      	movs	r2, #5
 80066d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066d6:	4858      	ldr	r0, [pc, #352]	; (8006838 <_vfiprintf_r+0x24c>)
 80066d8:	f7ff f914 	bl	8005904 <memchr>
 80066dc:	9a04      	ldr	r2, [sp, #16]
 80066de:	b9d8      	cbnz	r0, 8006718 <_vfiprintf_r+0x12c>
 80066e0:	06d1      	lsls	r1, r2, #27
 80066e2:	bf44      	itt	mi
 80066e4:	2320      	movmi	r3, #32
 80066e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066ea:	0713      	lsls	r3, r2, #28
 80066ec:	bf44      	itt	mi
 80066ee:	232b      	movmi	r3, #43	; 0x2b
 80066f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066f4:	f89a 3000 	ldrb.w	r3, [sl]
 80066f8:	2b2a      	cmp	r3, #42	; 0x2a
 80066fa:	d015      	beq.n	8006728 <_vfiprintf_r+0x13c>
 80066fc:	4654      	mov	r4, sl
 80066fe:	2000      	movs	r0, #0
 8006700:	f04f 0c0a 	mov.w	ip, #10
 8006704:	9a07      	ldr	r2, [sp, #28]
 8006706:	4621      	mov	r1, r4
 8006708:	f811 3b01 	ldrb.w	r3, [r1], #1
 800670c:	3b30      	subs	r3, #48	; 0x30
 800670e:	2b09      	cmp	r3, #9
 8006710:	d94e      	bls.n	80067b0 <_vfiprintf_r+0x1c4>
 8006712:	b1b0      	cbz	r0, 8006742 <_vfiprintf_r+0x156>
 8006714:	9207      	str	r2, [sp, #28]
 8006716:	e014      	b.n	8006742 <_vfiprintf_r+0x156>
 8006718:	eba0 0308 	sub.w	r3, r0, r8
 800671c:	fa09 f303 	lsl.w	r3, r9, r3
 8006720:	4313      	orrs	r3, r2
 8006722:	46a2      	mov	sl, r4
 8006724:	9304      	str	r3, [sp, #16]
 8006726:	e7d2      	b.n	80066ce <_vfiprintf_r+0xe2>
 8006728:	9b03      	ldr	r3, [sp, #12]
 800672a:	1d19      	adds	r1, r3, #4
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	9103      	str	r1, [sp, #12]
 8006730:	2b00      	cmp	r3, #0
 8006732:	bfbb      	ittet	lt
 8006734:	425b      	neglt	r3, r3
 8006736:	f042 0202 	orrlt.w	r2, r2, #2
 800673a:	9307      	strge	r3, [sp, #28]
 800673c:	9307      	strlt	r3, [sp, #28]
 800673e:	bfb8      	it	lt
 8006740:	9204      	strlt	r2, [sp, #16]
 8006742:	7823      	ldrb	r3, [r4, #0]
 8006744:	2b2e      	cmp	r3, #46	; 0x2e
 8006746:	d10c      	bne.n	8006762 <_vfiprintf_r+0x176>
 8006748:	7863      	ldrb	r3, [r4, #1]
 800674a:	2b2a      	cmp	r3, #42	; 0x2a
 800674c:	d135      	bne.n	80067ba <_vfiprintf_r+0x1ce>
 800674e:	9b03      	ldr	r3, [sp, #12]
 8006750:	3402      	adds	r4, #2
 8006752:	1d1a      	adds	r2, r3, #4
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	9203      	str	r2, [sp, #12]
 8006758:	2b00      	cmp	r3, #0
 800675a:	bfb8      	it	lt
 800675c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006760:	9305      	str	r3, [sp, #20]
 8006762:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006848 <_vfiprintf_r+0x25c>
 8006766:	2203      	movs	r2, #3
 8006768:	4650      	mov	r0, sl
 800676a:	7821      	ldrb	r1, [r4, #0]
 800676c:	f7ff f8ca 	bl	8005904 <memchr>
 8006770:	b140      	cbz	r0, 8006784 <_vfiprintf_r+0x198>
 8006772:	2340      	movs	r3, #64	; 0x40
 8006774:	eba0 000a 	sub.w	r0, r0, sl
 8006778:	fa03 f000 	lsl.w	r0, r3, r0
 800677c:	9b04      	ldr	r3, [sp, #16]
 800677e:	3401      	adds	r4, #1
 8006780:	4303      	orrs	r3, r0
 8006782:	9304      	str	r3, [sp, #16]
 8006784:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006788:	2206      	movs	r2, #6
 800678a:	482c      	ldr	r0, [pc, #176]	; (800683c <_vfiprintf_r+0x250>)
 800678c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006790:	f7ff f8b8 	bl	8005904 <memchr>
 8006794:	2800      	cmp	r0, #0
 8006796:	d03f      	beq.n	8006818 <_vfiprintf_r+0x22c>
 8006798:	4b29      	ldr	r3, [pc, #164]	; (8006840 <_vfiprintf_r+0x254>)
 800679a:	bb1b      	cbnz	r3, 80067e4 <_vfiprintf_r+0x1f8>
 800679c:	9b03      	ldr	r3, [sp, #12]
 800679e:	3307      	adds	r3, #7
 80067a0:	f023 0307 	bic.w	r3, r3, #7
 80067a4:	3308      	adds	r3, #8
 80067a6:	9303      	str	r3, [sp, #12]
 80067a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067aa:	443b      	add	r3, r7
 80067ac:	9309      	str	r3, [sp, #36]	; 0x24
 80067ae:	e767      	b.n	8006680 <_vfiprintf_r+0x94>
 80067b0:	460c      	mov	r4, r1
 80067b2:	2001      	movs	r0, #1
 80067b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80067b8:	e7a5      	b.n	8006706 <_vfiprintf_r+0x11a>
 80067ba:	2300      	movs	r3, #0
 80067bc:	f04f 0c0a 	mov.w	ip, #10
 80067c0:	4619      	mov	r1, r3
 80067c2:	3401      	adds	r4, #1
 80067c4:	9305      	str	r3, [sp, #20]
 80067c6:	4620      	mov	r0, r4
 80067c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067cc:	3a30      	subs	r2, #48	; 0x30
 80067ce:	2a09      	cmp	r2, #9
 80067d0:	d903      	bls.n	80067da <_vfiprintf_r+0x1ee>
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d0c5      	beq.n	8006762 <_vfiprintf_r+0x176>
 80067d6:	9105      	str	r1, [sp, #20]
 80067d8:	e7c3      	b.n	8006762 <_vfiprintf_r+0x176>
 80067da:	4604      	mov	r4, r0
 80067dc:	2301      	movs	r3, #1
 80067de:	fb0c 2101 	mla	r1, ip, r1, r2
 80067e2:	e7f0      	b.n	80067c6 <_vfiprintf_r+0x1da>
 80067e4:	ab03      	add	r3, sp, #12
 80067e6:	9300      	str	r3, [sp, #0]
 80067e8:	462a      	mov	r2, r5
 80067ea:	4630      	mov	r0, r6
 80067ec:	4b15      	ldr	r3, [pc, #84]	; (8006844 <_vfiprintf_r+0x258>)
 80067ee:	a904      	add	r1, sp, #16
 80067f0:	f7fd fe1e 	bl	8004430 <_printf_float>
 80067f4:	4607      	mov	r7, r0
 80067f6:	1c78      	adds	r0, r7, #1
 80067f8:	d1d6      	bne.n	80067a8 <_vfiprintf_r+0x1bc>
 80067fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067fc:	07d9      	lsls	r1, r3, #31
 80067fe:	d405      	bmi.n	800680c <_vfiprintf_r+0x220>
 8006800:	89ab      	ldrh	r3, [r5, #12]
 8006802:	059a      	lsls	r2, r3, #22
 8006804:	d402      	bmi.n	800680c <_vfiprintf_r+0x220>
 8006806:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006808:	f000 faaf 	bl	8006d6a <__retarget_lock_release_recursive>
 800680c:	89ab      	ldrh	r3, [r5, #12]
 800680e:	065b      	lsls	r3, r3, #25
 8006810:	f53f af12 	bmi.w	8006638 <_vfiprintf_r+0x4c>
 8006814:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006816:	e711      	b.n	800663c <_vfiprintf_r+0x50>
 8006818:	ab03      	add	r3, sp, #12
 800681a:	9300      	str	r3, [sp, #0]
 800681c:	462a      	mov	r2, r5
 800681e:	4630      	mov	r0, r6
 8006820:	4b08      	ldr	r3, [pc, #32]	; (8006844 <_vfiprintf_r+0x258>)
 8006822:	a904      	add	r1, sp, #16
 8006824:	f7fe f8a0 	bl	8004968 <_printf_i>
 8006828:	e7e4      	b.n	80067f4 <_vfiprintf_r+0x208>
 800682a:	bf00      	nop
 800682c:	080088e4 	.word	0x080088e4
 8006830:	08008904 	.word	0x08008904
 8006834:	080088c4 	.word	0x080088c4
 8006838:	0800876c 	.word	0x0800876c
 800683c:	08008776 	.word	0x08008776
 8006840:	08004431 	.word	0x08004431
 8006844:	080065c7 	.word	0x080065c7
 8006848:	08008772 	.word	0x08008772

0800684c <__swbuf_r>:
 800684c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800684e:	460e      	mov	r6, r1
 8006850:	4614      	mov	r4, r2
 8006852:	4605      	mov	r5, r0
 8006854:	b118      	cbz	r0, 800685e <__swbuf_r+0x12>
 8006856:	6983      	ldr	r3, [r0, #24]
 8006858:	b90b      	cbnz	r3, 800685e <__swbuf_r+0x12>
 800685a:	f000 f9e7 	bl	8006c2c <__sinit>
 800685e:	4b21      	ldr	r3, [pc, #132]	; (80068e4 <__swbuf_r+0x98>)
 8006860:	429c      	cmp	r4, r3
 8006862:	d12b      	bne.n	80068bc <__swbuf_r+0x70>
 8006864:	686c      	ldr	r4, [r5, #4]
 8006866:	69a3      	ldr	r3, [r4, #24]
 8006868:	60a3      	str	r3, [r4, #8]
 800686a:	89a3      	ldrh	r3, [r4, #12]
 800686c:	071a      	lsls	r2, r3, #28
 800686e:	d52f      	bpl.n	80068d0 <__swbuf_r+0x84>
 8006870:	6923      	ldr	r3, [r4, #16]
 8006872:	b36b      	cbz	r3, 80068d0 <__swbuf_r+0x84>
 8006874:	6923      	ldr	r3, [r4, #16]
 8006876:	6820      	ldr	r0, [r4, #0]
 8006878:	b2f6      	uxtb	r6, r6
 800687a:	1ac0      	subs	r0, r0, r3
 800687c:	6963      	ldr	r3, [r4, #20]
 800687e:	4637      	mov	r7, r6
 8006880:	4283      	cmp	r3, r0
 8006882:	dc04      	bgt.n	800688e <__swbuf_r+0x42>
 8006884:	4621      	mov	r1, r4
 8006886:	4628      	mov	r0, r5
 8006888:	f000 f93c 	bl	8006b04 <_fflush_r>
 800688c:	bb30      	cbnz	r0, 80068dc <__swbuf_r+0x90>
 800688e:	68a3      	ldr	r3, [r4, #8]
 8006890:	3001      	adds	r0, #1
 8006892:	3b01      	subs	r3, #1
 8006894:	60a3      	str	r3, [r4, #8]
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	1c5a      	adds	r2, r3, #1
 800689a:	6022      	str	r2, [r4, #0]
 800689c:	701e      	strb	r6, [r3, #0]
 800689e:	6963      	ldr	r3, [r4, #20]
 80068a0:	4283      	cmp	r3, r0
 80068a2:	d004      	beq.n	80068ae <__swbuf_r+0x62>
 80068a4:	89a3      	ldrh	r3, [r4, #12]
 80068a6:	07db      	lsls	r3, r3, #31
 80068a8:	d506      	bpl.n	80068b8 <__swbuf_r+0x6c>
 80068aa:	2e0a      	cmp	r6, #10
 80068ac:	d104      	bne.n	80068b8 <__swbuf_r+0x6c>
 80068ae:	4621      	mov	r1, r4
 80068b0:	4628      	mov	r0, r5
 80068b2:	f000 f927 	bl	8006b04 <_fflush_r>
 80068b6:	b988      	cbnz	r0, 80068dc <__swbuf_r+0x90>
 80068b8:	4638      	mov	r0, r7
 80068ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068bc:	4b0a      	ldr	r3, [pc, #40]	; (80068e8 <__swbuf_r+0x9c>)
 80068be:	429c      	cmp	r4, r3
 80068c0:	d101      	bne.n	80068c6 <__swbuf_r+0x7a>
 80068c2:	68ac      	ldr	r4, [r5, #8]
 80068c4:	e7cf      	b.n	8006866 <__swbuf_r+0x1a>
 80068c6:	4b09      	ldr	r3, [pc, #36]	; (80068ec <__swbuf_r+0xa0>)
 80068c8:	429c      	cmp	r4, r3
 80068ca:	bf08      	it	eq
 80068cc:	68ec      	ldreq	r4, [r5, #12]
 80068ce:	e7ca      	b.n	8006866 <__swbuf_r+0x1a>
 80068d0:	4621      	mov	r1, r4
 80068d2:	4628      	mov	r0, r5
 80068d4:	f000 f81a 	bl	800690c <__swsetup_r>
 80068d8:	2800      	cmp	r0, #0
 80068da:	d0cb      	beq.n	8006874 <__swbuf_r+0x28>
 80068dc:	f04f 37ff 	mov.w	r7, #4294967295
 80068e0:	e7ea      	b.n	80068b8 <__swbuf_r+0x6c>
 80068e2:	bf00      	nop
 80068e4:	080088e4 	.word	0x080088e4
 80068e8:	08008904 	.word	0x08008904
 80068ec:	080088c4 	.word	0x080088c4

080068f0 <__ascii_wctomb>:
 80068f0:	4603      	mov	r3, r0
 80068f2:	4608      	mov	r0, r1
 80068f4:	b141      	cbz	r1, 8006908 <__ascii_wctomb+0x18>
 80068f6:	2aff      	cmp	r2, #255	; 0xff
 80068f8:	d904      	bls.n	8006904 <__ascii_wctomb+0x14>
 80068fa:	228a      	movs	r2, #138	; 0x8a
 80068fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006900:	601a      	str	r2, [r3, #0]
 8006902:	4770      	bx	lr
 8006904:	2001      	movs	r0, #1
 8006906:	700a      	strb	r2, [r1, #0]
 8006908:	4770      	bx	lr
	...

0800690c <__swsetup_r>:
 800690c:	4b32      	ldr	r3, [pc, #200]	; (80069d8 <__swsetup_r+0xcc>)
 800690e:	b570      	push	{r4, r5, r6, lr}
 8006910:	681d      	ldr	r5, [r3, #0]
 8006912:	4606      	mov	r6, r0
 8006914:	460c      	mov	r4, r1
 8006916:	b125      	cbz	r5, 8006922 <__swsetup_r+0x16>
 8006918:	69ab      	ldr	r3, [r5, #24]
 800691a:	b913      	cbnz	r3, 8006922 <__swsetup_r+0x16>
 800691c:	4628      	mov	r0, r5
 800691e:	f000 f985 	bl	8006c2c <__sinit>
 8006922:	4b2e      	ldr	r3, [pc, #184]	; (80069dc <__swsetup_r+0xd0>)
 8006924:	429c      	cmp	r4, r3
 8006926:	d10f      	bne.n	8006948 <__swsetup_r+0x3c>
 8006928:	686c      	ldr	r4, [r5, #4]
 800692a:	89a3      	ldrh	r3, [r4, #12]
 800692c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006930:	0719      	lsls	r1, r3, #28
 8006932:	d42c      	bmi.n	800698e <__swsetup_r+0x82>
 8006934:	06dd      	lsls	r5, r3, #27
 8006936:	d411      	bmi.n	800695c <__swsetup_r+0x50>
 8006938:	2309      	movs	r3, #9
 800693a:	6033      	str	r3, [r6, #0]
 800693c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006940:	f04f 30ff 	mov.w	r0, #4294967295
 8006944:	81a3      	strh	r3, [r4, #12]
 8006946:	e03e      	b.n	80069c6 <__swsetup_r+0xba>
 8006948:	4b25      	ldr	r3, [pc, #148]	; (80069e0 <__swsetup_r+0xd4>)
 800694a:	429c      	cmp	r4, r3
 800694c:	d101      	bne.n	8006952 <__swsetup_r+0x46>
 800694e:	68ac      	ldr	r4, [r5, #8]
 8006950:	e7eb      	b.n	800692a <__swsetup_r+0x1e>
 8006952:	4b24      	ldr	r3, [pc, #144]	; (80069e4 <__swsetup_r+0xd8>)
 8006954:	429c      	cmp	r4, r3
 8006956:	bf08      	it	eq
 8006958:	68ec      	ldreq	r4, [r5, #12]
 800695a:	e7e6      	b.n	800692a <__swsetup_r+0x1e>
 800695c:	0758      	lsls	r0, r3, #29
 800695e:	d512      	bpl.n	8006986 <__swsetup_r+0x7a>
 8006960:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006962:	b141      	cbz	r1, 8006976 <__swsetup_r+0x6a>
 8006964:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006968:	4299      	cmp	r1, r3
 800696a:	d002      	beq.n	8006972 <__swsetup_r+0x66>
 800696c:	4630      	mov	r0, r6
 800696e:	f7ff fb75 	bl	800605c <_free_r>
 8006972:	2300      	movs	r3, #0
 8006974:	6363      	str	r3, [r4, #52]	; 0x34
 8006976:	89a3      	ldrh	r3, [r4, #12]
 8006978:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800697c:	81a3      	strh	r3, [r4, #12]
 800697e:	2300      	movs	r3, #0
 8006980:	6063      	str	r3, [r4, #4]
 8006982:	6923      	ldr	r3, [r4, #16]
 8006984:	6023      	str	r3, [r4, #0]
 8006986:	89a3      	ldrh	r3, [r4, #12]
 8006988:	f043 0308 	orr.w	r3, r3, #8
 800698c:	81a3      	strh	r3, [r4, #12]
 800698e:	6923      	ldr	r3, [r4, #16]
 8006990:	b94b      	cbnz	r3, 80069a6 <__swsetup_r+0x9a>
 8006992:	89a3      	ldrh	r3, [r4, #12]
 8006994:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006998:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800699c:	d003      	beq.n	80069a6 <__swsetup_r+0x9a>
 800699e:	4621      	mov	r1, r4
 80069a0:	4630      	mov	r0, r6
 80069a2:	f000 fa07 	bl	8006db4 <__smakebuf_r>
 80069a6:	89a0      	ldrh	r0, [r4, #12]
 80069a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069ac:	f010 0301 	ands.w	r3, r0, #1
 80069b0:	d00a      	beq.n	80069c8 <__swsetup_r+0xbc>
 80069b2:	2300      	movs	r3, #0
 80069b4:	60a3      	str	r3, [r4, #8]
 80069b6:	6963      	ldr	r3, [r4, #20]
 80069b8:	425b      	negs	r3, r3
 80069ba:	61a3      	str	r3, [r4, #24]
 80069bc:	6923      	ldr	r3, [r4, #16]
 80069be:	b943      	cbnz	r3, 80069d2 <__swsetup_r+0xc6>
 80069c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80069c4:	d1ba      	bne.n	800693c <__swsetup_r+0x30>
 80069c6:	bd70      	pop	{r4, r5, r6, pc}
 80069c8:	0781      	lsls	r1, r0, #30
 80069ca:	bf58      	it	pl
 80069cc:	6963      	ldrpl	r3, [r4, #20]
 80069ce:	60a3      	str	r3, [r4, #8]
 80069d0:	e7f4      	b.n	80069bc <__swsetup_r+0xb0>
 80069d2:	2000      	movs	r0, #0
 80069d4:	e7f7      	b.n	80069c6 <__swsetup_r+0xba>
 80069d6:	bf00      	nop
 80069d8:	2000001c 	.word	0x2000001c
 80069dc:	080088e4 	.word	0x080088e4
 80069e0:	08008904 	.word	0x08008904
 80069e4:	080088c4 	.word	0x080088c4

080069e8 <abort>:
 80069e8:	2006      	movs	r0, #6
 80069ea:	b508      	push	{r3, lr}
 80069ec:	f000 fa52 	bl	8006e94 <raise>
 80069f0:	2001      	movs	r0, #1
 80069f2:	f7fb fba1 	bl	8002138 <_exit>
	...

080069f8 <__sflush_r>:
 80069f8:	898a      	ldrh	r2, [r1, #12]
 80069fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069fe:	4605      	mov	r5, r0
 8006a00:	0710      	lsls	r0, r2, #28
 8006a02:	460c      	mov	r4, r1
 8006a04:	d458      	bmi.n	8006ab8 <__sflush_r+0xc0>
 8006a06:	684b      	ldr	r3, [r1, #4]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	dc05      	bgt.n	8006a18 <__sflush_r+0x20>
 8006a0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	dc02      	bgt.n	8006a18 <__sflush_r+0x20>
 8006a12:	2000      	movs	r0, #0
 8006a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a1a:	2e00      	cmp	r6, #0
 8006a1c:	d0f9      	beq.n	8006a12 <__sflush_r+0x1a>
 8006a1e:	2300      	movs	r3, #0
 8006a20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a24:	682f      	ldr	r7, [r5, #0]
 8006a26:	602b      	str	r3, [r5, #0]
 8006a28:	d032      	beq.n	8006a90 <__sflush_r+0x98>
 8006a2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a2c:	89a3      	ldrh	r3, [r4, #12]
 8006a2e:	075a      	lsls	r2, r3, #29
 8006a30:	d505      	bpl.n	8006a3e <__sflush_r+0x46>
 8006a32:	6863      	ldr	r3, [r4, #4]
 8006a34:	1ac0      	subs	r0, r0, r3
 8006a36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a38:	b10b      	cbz	r3, 8006a3e <__sflush_r+0x46>
 8006a3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a3c:	1ac0      	subs	r0, r0, r3
 8006a3e:	2300      	movs	r3, #0
 8006a40:	4602      	mov	r2, r0
 8006a42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a44:	4628      	mov	r0, r5
 8006a46:	6a21      	ldr	r1, [r4, #32]
 8006a48:	47b0      	blx	r6
 8006a4a:	1c43      	adds	r3, r0, #1
 8006a4c:	89a3      	ldrh	r3, [r4, #12]
 8006a4e:	d106      	bne.n	8006a5e <__sflush_r+0x66>
 8006a50:	6829      	ldr	r1, [r5, #0]
 8006a52:	291d      	cmp	r1, #29
 8006a54:	d82c      	bhi.n	8006ab0 <__sflush_r+0xb8>
 8006a56:	4a2a      	ldr	r2, [pc, #168]	; (8006b00 <__sflush_r+0x108>)
 8006a58:	40ca      	lsrs	r2, r1
 8006a5a:	07d6      	lsls	r6, r2, #31
 8006a5c:	d528      	bpl.n	8006ab0 <__sflush_r+0xb8>
 8006a5e:	2200      	movs	r2, #0
 8006a60:	6062      	str	r2, [r4, #4]
 8006a62:	6922      	ldr	r2, [r4, #16]
 8006a64:	04d9      	lsls	r1, r3, #19
 8006a66:	6022      	str	r2, [r4, #0]
 8006a68:	d504      	bpl.n	8006a74 <__sflush_r+0x7c>
 8006a6a:	1c42      	adds	r2, r0, #1
 8006a6c:	d101      	bne.n	8006a72 <__sflush_r+0x7a>
 8006a6e:	682b      	ldr	r3, [r5, #0]
 8006a70:	b903      	cbnz	r3, 8006a74 <__sflush_r+0x7c>
 8006a72:	6560      	str	r0, [r4, #84]	; 0x54
 8006a74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a76:	602f      	str	r7, [r5, #0]
 8006a78:	2900      	cmp	r1, #0
 8006a7a:	d0ca      	beq.n	8006a12 <__sflush_r+0x1a>
 8006a7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a80:	4299      	cmp	r1, r3
 8006a82:	d002      	beq.n	8006a8a <__sflush_r+0x92>
 8006a84:	4628      	mov	r0, r5
 8006a86:	f7ff fae9 	bl	800605c <_free_r>
 8006a8a:	2000      	movs	r0, #0
 8006a8c:	6360      	str	r0, [r4, #52]	; 0x34
 8006a8e:	e7c1      	b.n	8006a14 <__sflush_r+0x1c>
 8006a90:	6a21      	ldr	r1, [r4, #32]
 8006a92:	2301      	movs	r3, #1
 8006a94:	4628      	mov	r0, r5
 8006a96:	47b0      	blx	r6
 8006a98:	1c41      	adds	r1, r0, #1
 8006a9a:	d1c7      	bne.n	8006a2c <__sflush_r+0x34>
 8006a9c:	682b      	ldr	r3, [r5, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d0c4      	beq.n	8006a2c <__sflush_r+0x34>
 8006aa2:	2b1d      	cmp	r3, #29
 8006aa4:	d001      	beq.n	8006aaa <__sflush_r+0xb2>
 8006aa6:	2b16      	cmp	r3, #22
 8006aa8:	d101      	bne.n	8006aae <__sflush_r+0xb6>
 8006aaa:	602f      	str	r7, [r5, #0]
 8006aac:	e7b1      	b.n	8006a12 <__sflush_r+0x1a>
 8006aae:	89a3      	ldrh	r3, [r4, #12]
 8006ab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ab4:	81a3      	strh	r3, [r4, #12]
 8006ab6:	e7ad      	b.n	8006a14 <__sflush_r+0x1c>
 8006ab8:	690f      	ldr	r7, [r1, #16]
 8006aba:	2f00      	cmp	r7, #0
 8006abc:	d0a9      	beq.n	8006a12 <__sflush_r+0x1a>
 8006abe:	0793      	lsls	r3, r2, #30
 8006ac0:	bf18      	it	ne
 8006ac2:	2300      	movne	r3, #0
 8006ac4:	680e      	ldr	r6, [r1, #0]
 8006ac6:	bf08      	it	eq
 8006ac8:	694b      	ldreq	r3, [r1, #20]
 8006aca:	eba6 0807 	sub.w	r8, r6, r7
 8006ace:	600f      	str	r7, [r1, #0]
 8006ad0:	608b      	str	r3, [r1, #8]
 8006ad2:	f1b8 0f00 	cmp.w	r8, #0
 8006ad6:	dd9c      	ble.n	8006a12 <__sflush_r+0x1a>
 8006ad8:	4643      	mov	r3, r8
 8006ada:	463a      	mov	r2, r7
 8006adc:	4628      	mov	r0, r5
 8006ade:	6a21      	ldr	r1, [r4, #32]
 8006ae0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ae2:	47b0      	blx	r6
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	dc06      	bgt.n	8006af6 <__sflush_r+0xfe>
 8006ae8:	89a3      	ldrh	r3, [r4, #12]
 8006aea:	f04f 30ff 	mov.w	r0, #4294967295
 8006aee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006af2:	81a3      	strh	r3, [r4, #12]
 8006af4:	e78e      	b.n	8006a14 <__sflush_r+0x1c>
 8006af6:	4407      	add	r7, r0
 8006af8:	eba8 0800 	sub.w	r8, r8, r0
 8006afc:	e7e9      	b.n	8006ad2 <__sflush_r+0xda>
 8006afe:	bf00      	nop
 8006b00:	20400001 	.word	0x20400001

08006b04 <_fflush_r>:
 8006b04:	b538      	push	{r3, r4, r5, lr}
 8006b06:	690b      	ldr	r3, [r1, #16]
 8006b08:	4605      	mov	r5, r0
 8006b0a:	460c      	mov	r4, r1
 8006b0c:	b913      	cbnz	r3, 8006b14 <_fflush_r+0x10>
 8006b0e:	2500      	movs	r5, #0
 8006b10:	4628      	mov	r0, r5
 8006b12:	bd38      	pop	{r3, r4, r5, pc}
 8006b14:	b118      	cbz	r0, 8006b1e <_fflush_r+0x1a>
 8006b16:	6983      	ldr	r3, [r0, #24]
 8006b18:	b90b      	cbnz	r3, 8006b1e <_fflush_r+0x1a>
 8006b1a:	f000 f887 	bl	8006c2c <__sinit>
 8006b1e:	4b14      	ldr	r3, [pc, #80]	; (8006b70 <_fflush_r+0x6c>)
 8006b20:	429c      	cmp	r4, r3
 8006b22:	d11b      	bne.n	8006b5c <_fflush_r+0x58>
 8006b24:	686c      	ldr	r4, [r5, #4]
 8006b26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d0ef      	beq.n	8006b0e <_fflush_r+0xa>
 8006b2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b30:	07d0      	lsls	r0, r2, #31
 8006b32:	d404      	bmi.n	8006b3e <_fflush_r+0x3a>
 8006b34:	0599      	lsls	r1, r3, #22
 8006b36:	d402      	bmi.n	8006b3e <_fflush_r+0x3a>
 8006b38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b3a:	f000 f915 	bl	8006d68 <__retarget_lock_acquire_recursive>
 8006b3e:	4628      	mov	r0, r5
 8006b40:	4621      	mov	r1, r4
 8006b42:	f7ff ff59 	bl	80069f8 <__sflush_r>
 8006b46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b48:	4605      	mov	r5, r0
 8006b4a:	07da      	lsls	r2, r3, #31
 8006b4c:	d4e0      	bmi.n	8006b10 <_fflush_r+0xc>
 8006b4e:	89a3      	ldrh	r3, [r4, #12]
 8006b50:	059b      	lsls	r3, r3, #22
 8006b52:	d4dd      	bmi.n	8006b10 <_fflush_r+0xc>
 8006b54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b56:	f000 f908 	bl	8006d6a <__retarget_lock_release_recursive>
 8006b5a:	e7d9      	b.n	8006b10 <_fflush_r+0xc>
 8006b5c:	4b05      	ldr	r3, [pc, #20]	; (8006b74 <_fflush_r+0x70>)
 8006b5e:	429c      	cmp	r4, r3
 8006b60:	d101      	bne.n	8006b66 <_fflush_r+0x62>
 8006b62:	68ac      	ldr	r4, [r5, #8]
 8006b64:	e7df      	b.n	8006b26 <_fflush_r+0x22>
 8006b66:	4b04      	ldr	r3, [pc, #16]	; (8006b78 <_fflush_r+0x74>)
 8006b68:	429c      	cmp	r4, r3
 8006b6a:	bf08      	it	eq
 8006b6c:	68ec      	ldreq	r4, [r5, #12]
 8006b6e:	e7da      	b.n	8006b26 <_fflush_r+0x22>
 8006b70:	080088e4 	.word	0x080088e4
 8006b74:	08008904 	.word	0x08008904
 8006b78:	080088c4 	.word	0x080088c4

08006b7c <std>:
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	b510      	push	{r4, lr}
 8006b80:	4604      	mov	r4, r0
 8006b82:	e9c0 3300 	strd	r3, r3, [r0]
 8006b86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b8a:	6083      	str	r3, [r0, #8]
 8006b8c:	8181      	strh	r1, [r0, #12]
 8006b8e:	6643      	str	r3, [r0, #100]	; 0x64
 8006b90:	81c2      	strh	r2, [r0, #14]
 8006b92:	6183      	str	r3, [r0, #24]
 8006b94:	4619      	mov	r1, r3
 8006b96:	2208      	movs	r2, #8
 8006b98:	305c      	adds	r0, #92	; 0x5c
 8006b9a:	f7fd fba3 	bl	80042e4 <memset>
 8006b9e:	4b05      	ldr	r3, [pc, #20]	; (8006bb4 <std+0x38>)
 8006ba0:	6224      	str	r4, [r4, #32]
 8006ba2:	6263      	str	r3, [r4, #36]	; 0x24
 8006ba4:	4b04      	ldr	r3, [pc, #16]	; (8006bb8 <std+0x3c>)
 8006ba6:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ba8:	4b04      	ldr	r3, [pc, #16]	; (8006bbc <std+0x40>)
 8006baa:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006bac:	4b04      	ldr	r3, [pc, #16]	; (8006bc0 <std+0x44>)
 8006bae:	6323      	str	r3, [r4, #48]	; 0x30
 8006bb0:	bd10      	pop	{r4, pc}
 8006bb2:	bf00      	nop
 8006bb4:	08006ecd 	.word	0x08006ecd
 8006bb8:	08006eef 	.word	0x08006eef
 8006bbc:	08006f27 	.word	0x08006f27
 8006bc0:	08006f4b 	.word	0x08006f4b

08006bc4 <_cleanup_r>:
 8006bc4:	4901      	ldr	r1, [pc, #4]	; (8006bcc <_cleanup_r+0x8>)
 8006bc6:	f000 b8af 	b.w	8006d28 <_fwalk_reent>
 8006bca:	bf00      	nop
 8006bcc:	08006b05 	.word	0x08006b05

08006bd0 <__sfmoreglue>:
 8006bd0:	b570      	push	{r4, r5, r6, lr}
 8006bd2:	2568      	movs	r5, #104	; 0x68
 8006bd4:	1e4a      	subs	r2, r1, #1
 8006bd6:	4355      	muls	r5, r2
 8006bd8:	460e      	mov	r6, r1
 8006bda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006bde:	f7ff fa89 	bl	80060f4 <_malloc_r>
 8006be2:	4604      	mov	r4, r0
 8006be4:	b140      	cbz	r0, 8006bf8 <__sfmoreglue+0x28>
 8006be6:	2100      	movs	r1, #0
 8006be8:	e9c0 1600 	strd	r1, r6, [r0]
 8006bec:	300c      	adds	r0, #12
 8006bee:	60a0      	str	r0, [r4, #8]
 8006bf0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006bf4:	f7fd fb76 	bl	80042e4 <memset>
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	bd70      	pop	{r4, r5, r6, pc}

08006bfc <__sfp_lock_acquire>:
 8006bfc:	4801      	ldr	r0, [pc, #4]	; (8006c04 <__sfp_lock_acquire+0x8>)
 8006bfe:	f000 b8b3 	b.w	8006d68 <__retarget_lock_acquire_recursive>
 8006c02:	bf00      	nop
 8006c04:	20000768 	.word	0x20000768

08006c08 <__sfp_lock_release>:
 8006c08:	4801      	ldr	r0, [pc, #4]	; (8006c10 <__sfp_lock_release+0x8>)
 8006c0a:	f000 b8ae 	b.w	8006d6a <__retarget_lock_release_recursive>
 8006c0e:	bf00      	nop
 8006c10:	20000768 	.word	0x20000768

08006c14 <__sinit_lock_acquire>:
 8006c14:	4801      	ldr	r0, [pc, #4]	; (8006c1c <__sinit_lock_acquire+0x8>)
 8006c16:	f000 b8a7 	b.w	8006d68 <__retarget_lock_acquire_recursive>
 8006c1a:	bf00      	nop
 8006c1c:	20000763 	.word	0x20000763

08006c20 <__sinit_lock_release>:
 8006c20:	4801      	ldr	r0, [pc, #4]	; (8006c28 <__sinit_lock_release+0x8>)
 8006c22:	f000 b8a2 	b.w	8006d6a <__retarget_lock_release_recursive>
 8006c26:	bf00      	nop
 8006c28:	20000763 	.word	0x20000763

08006c2c <__sinit>:
 8006c2c:	b510      	push	{r4, lr}
 8006c2e:	4604      	mov	r4, r0
 8006c30:	f7ff fff0 	bl	8006c14 <__sinit_lock_acquire>
 8006c34:	69a3      	ldr	r3, [r4, #24]
 8006c36:	b11b      	cbz	r3, 8006c40 <__sinit+0x14>
 8006c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c3c:	f7ff bff0 	b.w	8006c20 <__sinit_lock_release>
 8006c40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006c44:	6523      	str	r3, [r4, #80]	; 0x50
 8006c46:	4b13      	ldr	r3, [pc, #76]	; (8006c94 <__sinit+0x68>)
 8006c48:	4a13      	ldr	r2, [pc, #76]	; (8006c98 <__sinit+0x6c>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006c4e:	42a3      	cmp	r3, r4
 8006c50:	bf08      	it	eq
 8006c52:	2301      	moveq	r3, #1
 8006c54:	4620      	mov	r0, r4
 8006c56:	bf08      	it	eq
 8006c58:	61a3      	streq	r3, [r4, #24]
 8006c5a:	f000 f81f 	bl	8006c9c <__sfp>
 8006c5e:	6060      	str	r0, [r4, #4]
 8006c60:	4620      	mov	r0, r4
 8006c62:	f000 f81b 	bl	8006c9c <__sfp>
 8006c66:	60a0      	str	r0, [r4, #8]
 8006c68:	4620      	mov	r0, r4
 8006c6a:	f000 f817 	bl	8006c9c <__sfp>
 8006c6e:	2200      	movs	r2, #0
 8006c70:	2104      	movs	r1, #4
 8006c72:	60e0      	str	r0, [r4, #12]
 8006c74:	6860      	ldr	r0, [r4, #4]
 8006c76:	f7ff ff81 	bl	8006b7c <std>
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	2109      	movs	r1, #9
 8006c7e:	68a0      	ldr	r0, [r4, #8]
 8006c80:	f7ff ff7c 	bl	8006b7c <std>
 8006c84:	2202      	movs	r2, #2
 8006c86:	2112      	movs	r1, #18
 8006c88:	68e0      	ldr	r0, [r4, #12]
 8006c8a:	f7ff ff77 	bl	8006b7c <std>
 8006c8e:	2301      	movs	r3, #1
 8006c90:	61a3      	str	r3, [r4, #24]
 8006c92:	e7d1      	b.n	8006c38 <__sinit+0xc>
 8006c94:	08008544 	.word	0x08008544
 8006c98:	08006bc5 	.word	0x08006bc5

08006c9c <__sfp>:
 8006c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c9e:	4607      	mov	r7, r0
 8006ca0:	f7ff ffac 	bl	8006bfc <__sfp_lock_acquire>
 8006ca4:	4b1e      	ldr	r3, [pc, #120]	; (8006d20 <__sfp+0x84>)
 8006ca6:	681e      	ldr	r6, [r3, #0]
 8006ca8:	69b3      	ldr	r3, [r6, #24]
 8006caa:	b913      	cbnz	r3, 8006cb2 <__sfp+0x16>
 8006cac:	4630      	mov	r0, r6
 8006cae:	f7ff ffbd 	bl	8006c2c <__sinit>
 8006cb2:	3648      	adds	r6, #72	; 0x48
 8006cb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	d503      	bpl.n	8006cc4 <__sfp+0x28>
 8006cbc:	6833      	ldr	r3, [r6, #0]
 8006cbe:	b30b      	cbz	r3, 8006d04 <__sfp+0x68>
 8006cc0:	6836      	ldr	r6, [r6, #0]
 8006cc2:	e7f7      	b.n	8006cb4 <__sfp+0x18>
 8006cc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006cc8:	b9d5      	cbnz	r5, 8006d00 <__sfp+0x64>
 8006cca:	4b16      	ldr	r3, [pc, #88]	; (8006d24 <__sfp+0x88>)
 8006ccc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006cd0:	60e3      	str	r3, [r4, #12]
 8006cd2:	6665      	str	r5, [r4, #100]	; 0x64
 8006cd4:	f000 f847 	bl	8006d66 <__retarget_lock_init_recursive>
 8006cd8:	f7ff ff96 	bl	8006c08 <__sfp_lock_release>
 8006cdc:	2208      	movs	r2, #8
 8006cde:	4629      	mov	r1, r5
 8006ce0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006ce4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006ce8:	6025      	str	r5, [r4, #0]
 8006cea:	61a5      	str	r5, [r4, #24]
 8006cec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006cf0:	f7fd faf8 	bl	80042e4 <memset>
 8006cf4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006cf8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006cfc:	4620      	mov	r0, r4
 8006cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d00:	3468      	adds	r4, #104	; 0x68
 8006d02:	e7d9      	b.n	8006cb8 <__sfp+0x1c>
 8006d04:	2104      	movs	r1, #4
 8006d06:	4638      	mov	r0, r7
 8006d08:	f7ff ff62 	bl	8006bd0 <__sfmoreglue>
 8006d0c:	4604      	mov	r4, r0
 8006d0e:	6030      	str	r0, [r6, #0]
 8006d10:	2800      	cmp	r0, #0
 8006d12:	d1d5      	bne.n	8006cc0 <__sfp+0x24>
 8006d14:	f7ff ff78 	bl	8006c08 <__sfp_lock_release>
 8006d18:	230c      	movs	r3, #12
 8006d1a:	603b      	str	r3, [r7, #0]
 8006d1c:	e7ee      	b.n	8006cfc <__sfp+0x60>
 8006d1e:	bf00      	nop
 8006d20:	08008544 	.word	0x08008544
 8006d24:	ffff0001 	.word	0xffff0001

08006d28 <_fwalk_reent>:
 8006d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d2c:	4606      	mov	r6, r0
 8006d2e:	4688      	mov	r8, r1
 8006d30:	2700      	movs	r7, #0
 8006d32:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006d36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d3a:	f1b9 0901 	subs.w	r9, r9, #1
 8006d3e:	d505      	bpl.n	8006d4c <_fwalk_reent+0x24>
 8006d40:	6824      	ldr	r4, [r4, #0]
 8006d42:	2c00      	cmp	r4, #0
 8006d44:	d1f7      	bne.n	8006d36 <_fwalk_reent+0xe>
 8006d46:	4638      	mov	r0, r7
 8006d48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d4c:	89ab      	ldrh	r3, [r5, #12]
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d907      	bls.n	8006d62 <_fwalk_reent+0x3a>
 8006d52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d56:	3301      	adds	r3, #1
 8006d58:	d003      	beq.n	8006d62 <_fwalk_reent+0x3a>
 8006d5a:	4629      	mov	r1, r5
 8006d5c:	4630      	mov	r0, r6
 8006d5e:	47c0      	blx	r8
 8006d60:	4307      	orrs	r7, r0
 8006d62:	3568      	adds	r5, #104	; 0x68
 8006d64:	e7e9      	b.n	8006d3a <_fwalk_reent+0x12>

08006d66 <__retarget_lock_init_recursive>:
 8006d66:	4770      	bx	lr

08006d68 <__retarget_lock_acquire_recursive>:
 8006d68:	4770      	bx	lr

08006d6a <__retarget_lock_release_recursive>:
 8006d6a:	4770      	bx	lr

08006d6c <__swhatbuf_r>:
 8006d6c:	b570      	push	{r4, r5, r6, lr}
 8006d6e:	460e      	mov	r6, r1
 8006d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d74:	4614      	mov	r4, r2
 8006d76:	2900      	cmp	r1, #0
 8006d78:	461d      	mov	r5, r3
 8006d7a:	b096      	sub	sp, #88	; 0x58
 8006d7c:	da07      	bge.n	8006d8e <__swhatbuf_r+0x22>
 8006d7e:	2300      	movs	r3, #0
 8006d80:	602b      	str	r3, [r5, #0]
 8006d82:	89b3      	ldrh	r3, [r6, #12]
 8006d84:	061a      	lsls	r2, r3, #24
 8006d86:	d410      	bmi.n	8006daa <__swhatbuf_r+0x3e>
 8006d88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d8c:	e00e      	b.n	8006dac <__swhatbuf_r+0x40>
 8006d8e:	466a      	mov	r2, sp
 8006d90:	f000 f902 	bl	8006f98 <_fstat_r>
 8006d94:	2800      	cmp	r0, #0
 8006d96:	dbf2      	blt.n	8006d7e <__swhatbuf_r+0x12>
 8006d98:	9a01      	ldr	r2, [sp, #4]
 8006d9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006d9e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006da2:	425a      	negs	r2, r3
 8006da4:	415a      	adcs	r2, r3
 8006da6:	602a      	str	r2, [r5, #0]
 8006da8:	e7ee      	b.n	8006d88 <__swhatbuf_r+0x1c>
 8006daa:	2340      	movs	r3, #64	; 0x40
 8006dac:	2000      	movs	r0, #0
 8006dae:	6023      	str	r3, [r4, #0]
 8006db0:	b016      	add	sp, #88	; 0x58
 8006db2:	bd70      	pop	{r4, r5, r6, pc}

08006db4 <__smakebuf_r>:
 8006db4:	898b      	ldrh	r3, [r1, #12]
 8006db6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006db8:	079d      	lsls	r5, r3, #30
 8006dba:	4606      	mov	r6, r0
 8006dbc:	460c      	mov	r4, r1
 8006dbe:	d507      	bpl.n	8006dd0 <__smakebuf_r+0x1c>
 8006dc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006dc4:	6023      	str	r3, [r4, #0]
 8006dc6:	6123      	str	r3, [r4, #16]
 8006dc8:	2301      	movs	r3, #1
 8006dca:	6163      	str	r3, [r4, #20]
 8006dcc:	b002      	add	sp, #8
 8006dce:	bd70      	pop	{r4, r5, r6, pc}
 8006dd0:	466a      	mov	r2, sp
 8006dd2:	ab01      	add	r3, sp, #4
 8006dd4:	f7ff ffca 	bl	8006d6c <__swhatbuf_r>
 8006dd8:	9900      	ldr	r1, [sp, #0]
 8006dda:	4605      	mov	r5, r0
 8006ddc:	4630      	mov	r0, r6
 8006dde:	f7ff f989 	bl	80060f4 <_malloc_r>
 8006de2:	b948      	cbnz	r0, 8006df8 <__smakebuf_r+0x44>
 8006de4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006de8:	059a      	lsls	r2, r3, #22
 8006dea:	d4ef      	bmi.n	8006dcc <__smakebuf_r+0x18>
 8006dec:	f023 0303 	bic.w	r3, r3, #3
 8006df0:	f043 0302 	orr.w	r3, r3, #2
 8006df4:	81a3      	strh	r3, [r4, #12]
 8006df6:	e7e3      	b.n	8006dc0 <__smakebuf_r+0xc>
 8006df8:	4b0d      	ldr	r3, [pc, #52]	; (8006e30 <__smakebuf_r+0x7c>)
 8006dfa:	62b3      	str	r3, [r6, #40]	; 0x28
 8006dfc:	89a3      	ldrh	r3, [r4, #12]
 8006dfe:	6020      	str	r0, [r4, #0]
 8006e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e04:	81a3      	strh	r3, [r4, #12]
 8006e06:	9b00      	ldr	r3, [sp, #0]
 8006e08:	6120      	str	r0, [r4, #16]
 8006e0a:	6163      	str	r3, [r4, #20]
 8006e0c:	9b01      	ldr	r3, [sp, #4]
 8006e0e:	b15b      	cbz	r3, 8006e28 <__smakebuf_r+0x74>
 8006e10:	4630      	mov	r0, r6
 8006e12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e16:	f000 f8d1 	bl	8006fbc <_isatty_r>
 8006e1a:	b128      	cbz	r0, 8006e28 <__smakebuf_r+0x74>
 8006e1c:	89a3      	ldrh	r3, [r4, #12]
 8006e1e:	f023 0303 	bic.w	r3, r3, #3
 8006e22:	f043 0301 	orr.w	r3, r3, #1
 8006e26:	81a3      	strh	r3, [r4, #12]
 8006e28:	89a0      	ldrh	r0, [r4, #12]
 8006e2a:	4305      	orrs	r5, r0
 8006e2c:	81a5      	strh	r5, [r4, #12]
 8006e2e:	e7cd      	b.n	8006dcc <__smakebuf_r+0x18>
 8006e30:	08006bc5 	.word	0x08006bc5

08006e34 <_malloc_usable_size_r>:
 8006e34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e38:	1f18      	subs	r0, r3, #4
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	bfbc      	itt	lt
 8006e3e:	580b      	ldrlt	r3, [r1, r0]
 8006e40:	18c0      	addlt	r0, r0, r3
 8006e42:	4770      	bx	lr

08006e44 <_raise_r>:
 8006e44:	291f      	cmp	r1, #31
 8006e46:	b538      	push	{r3, r4, r5, lr}
 8006e48:	4604      	mov	r4, r0
 8006e4a:	460d      	mov	r5, r1
 8006e4c:	d904      	bls.n	8006e58 <_raise_r+0x14>
 8006e4e:	2316      	movs	r3, #22
 8006e50:	6003      	str	r3, [r0, #0]
 8006e52:	f04f 30ff 	mov.w	r0, #4294967295
 8006e56:	bd38      	pop	{r3, r4, r5, pc}
 8006e58:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006e5a:	b112      	cbz	r2, 8006e62 <_raise_r+0x1e>
 8006e5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006e60:	b94b      	cbnz	r3, 8006e76 <_raise_r+0x32>
 8006e62:	4620      	mov	r0, r4
 8006e64:	f000 f830 	bl	8006ec8 <_getpid_r>
 8006e68:	462a      	mov	r2, r5
 8006e6a:	4601      	mov	r1, r0
 8006e6c:	4620      	mov	r0, r4
 8006e6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e72:	f000 b817 	b.w	8006ea4 <_kill_r>
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d00a      	beq.n	8006e90 <_raise_r+0x4c>
 8006e7a:	1c59      	adds	r1, r3, #1
 8006e7c:	d103      	bne.n	8006e86 <_raise_r+0x42>
 8006e7e:	2316      	movs	r3, #22
 8006e80:	6003      	str	r3, [r0, #0]
 8006e82:	2001      	movs	r0, #1
 8006e84:	e7e7      	b.n	8006e56 <_raise_r+0x12>
 8006e86:	2400      	movs	r4, #0
 8006e88:	4628      	mov	r0, r5
 8006e8a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006e8e:	4798      	blx	r3
 8006e90:	2000      	movs	r0, #0
 8006e92:	e7e0      	b.n	8006e56 <_raise_r+0x12>

08006e94 <raise>:
 8006e94:	4b02      	ldr	r3, [pc, #8]	; (8006ea0 <raise+0xc>)
 8006e96:	4601      	mov	r1, r0
 8006e98:	6818      	ldr	r0, [r3, #0]
 8006e9a:	f7ff bfd3 	b.w	8006e44 <_raise_r>
 8006e9e:	bf00      	nop
 8006ea0:	2000001c 	.word	0x2000001c

08006ea4 <_kill_r>:
 8006ea4:	b538      	push	{r3, r4, r5, lr}
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	4d06      	ldr	r5, [pc, #24]	; (8006ec4 <_kill_r+0x20>)
 8006eaa:	4604      	mov	r4, r0
 8006eac:	4608      	mov	r0, r1
 8006eae:	4611      	mov	r1, r2
 8006eb0:	602b      	str	r3, [r5, #0]
 8006eb2:	f7fb f931 	bl	8002118 <_kill>
 8006eb6:	1c43      	adds	r3, r0, #1
 8006eb8:	d102      	bne.n	8006ec0 <_kill_r+0x1c>
 8006eba:	682b      	ldr	r3, [r5, #0]
 8006ebc:	b103      	cbz	r3, 8006ec0 <_kill_r+0x1c>
 8006ebe:	6023      	str	r3, [r4, #0]
 8006ec0:	bd38      	pop	{r3, r4, r5, pc}
 8006ec2:	bf00      	nop
 8006ec4:	2000075c 	.word	0x2000075c

08006ec8 <_getpid_r>:
 8006ec8:	f7fb b91f 	b.w	800210a <_getpid>

08006ecc <__sread>:
 8006ecc:	b510      	push	{r4, lr}
 8006ece:	460c      	mov	r4, r1
 8006ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ed4:	f000 f894 	bl	8007000 <_read_r>
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	bfab      	itete	ge
 8006edc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006ede:	89a3      	ldrhlt	r3, [r4, #12]
 8006ee0:	181b      	addge	r3, r3, r0
 8006ee2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006ee6:	bfac      	ite	ge
 8006ee8:	6563      	strge	r3, [r4, #84]	; 0x54
 8006eea:	81a3      	strhlt	r3, [r4, #12]
 8006eec:	bd10      	pop	{r4, pc}

08006eee <__swrite>:
 8006eee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ef2:	461f      	mov	r7, r3
 8006ef4:	898b      	ldrh	r3, [r1, #12]
 8006ef6:	4605      	mov	r5, r0
 8006ef8:	05db      	lsls	r3, r3, #23
 8006efa:	460c      	mov	r4, r1
 8006efc:	4616      	mov	r6, r2
 8006efe:	d505      	bpl.n	8006f0c <__swrite+0x1e>
 8006f00:	2302      	movs	r3, #2
 8006f02:	2200      	movs	r2, #0
 8006f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f08:	f000 f868 	bl	8006fdc <_lseek_r>
 8006f0c:	89a3      	ldrh	r3, [r4, #12]
 8006f0e:	4632      	mov	r2, r6
 8006f10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f14:	81a3      	strh	r3, [r4, #12]
 8006f16:	4628      	mov	r0, r5
 8006f18:	463b      	mov	r3, r7
 8006f1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f22:	f000 b817 	b.w	8006f54 <_write_r>

08006f26 <__sseek>:
 8006f26:	b510      	push	{r4, lr}
 8006f28:	460c      	mov	r4, r1
 8006f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f2e:	f000 f855 	bl	8006fdc <_lseek_r>
 8006f32:	1c43      	adds	r3, r0, #1
 8006f34:	89a3      	ldrh	r3, [r4, #12]
 8006f36:	bf15      	itete	ne
 8006f38:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f42:	81a3      	strheq	r3, [r4, #12]
 8006f44:	bf18      	it	ne
 8006f46:	81a3      	strhne	r3, [r4, #12]
 8006f48:	bd10      	pop	{r4, pc}

08006f4a <__sclose>:
 8006f4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f4e:	f000 b813 	b.w	8006f78 <_close_r>
	...

08006f54 <_write_r>:
 8006f54:	b538      	push	{r3, r4, r5, lr}
 8006f56:	4604      	mov	r4, r0
 8006f58:	4608      	mov	r0, r1
 8006f5a:	4611      	mov	r1, r2
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	4d05      	ldr	r5, [pc, #20]	; (8006f74 <_write_r+0x20>)
 8006f60:	602a      	str	r2, [r5, #0]
 8006f62:	461a      	mov	r2, r3
 8006f64:	f7fb f90f 	bl	8002186 <_write>
 8006f68:	1c43      	adds	r3, r0, #1
 8006f6a:	d102      	bne.n	8006f72 <_write_r+0x1e>
 8006f6c:	682b      	ldr	r3, [r5, #0]
 8006f6e:	b103      	cbz	r3, 8006f72 <_write_r+0x1e>
 8006f70:	6023      	str	r3, [r4, #0]
 8006f72:	bd38      	pop	{r3, r4, r5, pc}
 8006f74:	2000075c 	.word	0x2000075c

08006f78 <_close_r>:
 8006f78:	b538      	push	{r3, r4, r5, lr}
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	4d05      	ldr	r5, [pc, #20]	; (8006f94 <_close_r+0x1c>)
 8006f7e:	4604      	mov	r4, r0
 8006f80:	4608      	mov	r0, r1
 8006f82:	602b      	str	r3, [r5, #0]
 8006f84:	f7fb f91b 	bl	80021be <_close>
 8006f88:	1c43      	adds	r3, r0, #1
 8006f8a:	d102      	bne.n	8006f92 <_close_r+0x1a>
 8006f8c:	682b      	ldr	r3, [r5, #0]
 8006f8e:	b103      	cbz	r3, 8006f92 <_close_r+0x1a>
 8006f90:	6023      	str	r3, [r4, #0]
 8006f92:	bd38      	pop	{r3, r4, r5, pc}
 8006f94:	2000075c 	.word	0x2000075c

08006f98 <_fstat_r>:
 8006f98:	b538      	push	{r3, r4, r5, lr}
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	4d06      	ldr	r5, [pc, #24]	; (8006fb8 <_fstat_r+0x20>)
 8006f9e:	4604      	mov	r4, r0
 8006fa0:	4608      	mov	r0, r1
 8006fa2:	4611      	mov	r1, r2
 8006fa4:	602b      	str	r3, [r5, #0]
 8006fa6:	f7fb f915 	bl	80021d4 <_fstat>
 8006faa:	1c43      	adds	r3, r0, #1
 8006fac:	d102      	bne.n	8006fb4 <_fstat_r+0x1c>
 8006fae:	682b      	ldr	r3, [r5, #0]
 8006fb0:	b103      	cbz	r3, 8006fb4 <_fstat_r+0x1c>
 8006fb2:	6023      	str	r3, [r4, #0]
 8006fb4:	bd38      	pop	{r3, r4, r5, pc}
 8006fb6:	bf00      	nop
 8006fb8:	2000075c 	.word	0x2000075c

08006fbc <_isatty_r>:
 8006fbc:	b538      	push	{r3, r4, r5, lr}
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	4d05      	ldr	r5, [pc, #20]	; (8006fd8 <_isatty_r+0x1c>)
 8006fc2:	4604      	mov	r4, r0
 8006fc4:	4608      	mov	r0, r1
 8006fc6:	602b      	str	r3, [r5, #0]
 8006fc8:	f7fb f913 	bl	80021f2 <_isatty>
 8006fcc:	1c43      	adds	r3, r0, #1
 8006fce:	d102      	bne.n	8006fd6 <_isatty_r+0x1a>
 8006fd0:	682b      	ldr	r3, [r5, #0]
 8006fd2:	b103      	cbz	r3, 8006fd6 <_isatty_r+0x1a>
 8006fd4:	6023      	str	r3, [r4, #0]
 8006fd6:	bd38      	pop	{r3, r4, r5, pc}
 8006fd8:	2000075c 	.word	0x2000075c

08006fdc <_lseek_r>:
 8006fdc:	b538      	push	{r3, r4, r5, lr}
 8006fde:	4604      	mov	r4, r0
 8006fe0:	4608      	mov	r0, r1
 8006fe2:	4611      	mov	r1, r2
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	4d05      	ldr	r5, [pc, #20]	; (8006ffc <_lseek_r+0x20>)
 8006fe8:	602a      	str	r2, [r5, #0]
 8006fea:	461a      	mov	r2, r3
 8006fec:	f7fb f90b 	bl	8002206 <_lseek>
 8006ff0:	1c43      	adds	r3, r0, #1
 8006ff2:	d102      	bne.n	8006ffa <_lseek_r+0x1e>
 8006ff4:	682b      	ldr	r3, [r5, #0]
 8006ff6:	b103      	cbz	r3, 8006ffa <_lseek_r+0x1e>
 8006ff8:	6023      	str	r3, [r4, #0]
 8006ffa:	bd38      	pop	{r3, r4, r5, pc}
 8006ffc:	2000075c 	.word	0x2000075c

08007000 <_read_r>:
 8007000:	b538      	push	{r3, r4, r5, lr}
 8007002:	4604      	mov	r4, r0
 8007004:	4608      	mov	r0, r1
 8007006:	4611      	mov	r1, r2
 8007008:	2200      	movs	r2, #0
 800700a:	4d05      	ldr	r5, [pc, #20]	; (8007020 <_read_r+0x20>)
 800700c:	602a      	str	r2, [r5, #0]
 800700e:	461a      	mov	r2, r3
 8007010:	f7fb f89c 	bl	800214c <_read>
 8007014:	1c43      	adds	r3, r0, #1
 8007016:	d102      	bne.n	800701e <_read_r+0x1e>
 8007018:	682b      	ldr	r3, [r5, #0]
 800701a:	b103      	cbz	r3, 800701e <_read_r+0x1e>
 800701c:	6023      	str	r3, [r4, #0]
 800701e:	bd38      	pop	{r3, r4, r5, pc}
 8007020:	2000075c 	.word	0x2000075c

08007024 <_init>:
 8007024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007026:	bf00      	nop
 8007028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800702a:	bc08      	pop	{r3}
 800702c:	469e      	mov	lr, r3
 800702e:	4770      	bx	lr

08007030 <_fini>:
 8007030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007032:	bf00      	nop
 8007034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007036:	bc08      	pop	{r3}
 8007038:	469e      	mov	lr, r3
 800703a:	4770      	bx	lr
